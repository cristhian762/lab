/******************************************************************************
 * This file was generated by langium-cli 3.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CrudGeneratorTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type CrudGeneratorTerminalNames = keyof typeof CrudGeneratorTerminals;

export type CrudGeneratorKeywordNames = 
    | ":"
    | ";"
    | "INT"
    | "STRING"
    | "entity"
    | "{"
    | "}";

export type CrudGeneratorTokenNames = CrudGeneratorTerminalNames | CrudGeneratorKeywordNames;

export interface Entity extends AstNode {
    readonly $container: Model;
    readonly $type: 'Entity';
    fields: Array<Field>;
    name: string;
}

export const Entity = 'Entity';

export function isEntity(item: unknown): item is Entity {
    return reflection.isInstance(item, Entity);
}

export interface Field extends AstNode {
    readonly $container: Entity;
    readonly $type: 'Field';
    name: string;
    type: 'INT' | 'STRING';
}

export const Field = 'Field';

export function isField(item: unknown): item is Field {
    return reflection.isInstance(item, Field);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    entities: Array<Entity>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export type CrudGeneratorAstType = {
    Entity: Entity
    Field: Field
    Model: Model
}

export class CrudGeneratorAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Entity, Field, Model];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Entity: {
                return {
                    name: Entity,
                    properties: [
                        { name: 'fields', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case Field: {
                return {
                    name: Field,
                    properties: [
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'entities', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CrudGeneratorAstReflection();
