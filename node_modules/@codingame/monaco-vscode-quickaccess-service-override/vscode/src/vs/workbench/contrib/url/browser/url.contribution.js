import { URI } from 'vscode/vscode/vs/base/common/uri';
import { localizeWithPath, localize2WithPath } from 'vscode/vscode/vs/nls';
import { registerAction2, MenuRegistry, MenuId, Action2 } from 'vscode/vscode/vs/platform/actions/common/actions';
import { CommandsRegistry } from 'vscode/vscode/vs/platform/commands/common/commands';
import { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput';
import { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';
import { IURLService } from 'vscode/vscode/vs/platform/url/common/url';
import { Extensions, registerWorkbenchContribution2 } from 'vscode/vscode/vs/workbench/common/contributions';
import { ExternalUriResolverContribution } from './externalUriResolver.js';
import { manageTrustedDomainSettingsCommand } from './trustedDomains.js';
import { TrustedDomainsFileSystemProvider } from './trustedDomainsFileSystemProvider.js';
import { OpenerValidatorContributions } from './trustedDomainsValidator.js';
import { Categories } from 'vscode/vscode/vs/platform/action/common/actionCommonCategories';
import { Extensions as Extensions$1 } from 'vscode/vscode/vs/platform/configuration/common/configurationRegistry';
import { workbenchConfigurationNodeBase } from 'vscode/vscode/vs/workbench/common/configuration';

class OpenUrlAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.url.openUrl',
            title: ( localize2WithPath('vs/workbench/contrib/url/browser/url.contribution', 'openUrl', 'Open URL')),
            category: Categories.Developer,
            f1: true
        });
    }
    async run(accessor) {
        const quickInputService = accessor.get(IQuickInputService);
        const urlService = accessor.get(IURLService);
        return quickInputService.input({ prompt: ( localizeWithPath(
            'vs/workbench/contrib/url/browser/url.contribution',
            'urlToOpen',
            "URL to open"
        )) }).then(input => {
            if (input) {
                const uri = ( URI.parse(input));
                urlService.open(uri, { originalUrl: input });
            }
        });
    }
}
registerAction2(OpenUrlAction);
CommandsRegistry.registerCommand(manageTrustedDomainSettingsCommand);
MenuRegistry.appendMenuItem(MenuId.CommandPalette, {
    command: {
        id: manageTrustedDomainSettingsCommand.id,
        title: manageTrustedDomainSettingsCommand.description.description
    }
});
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(OpenerValidatorContributions, 3 );
registerWorkbenchContribution2(TrustedDomainsFileSystemProvider.ID, TrustedDomainsFileSystemProvider, 2 );
registerWorkbenchContribution2(ExternalUriResolverContribution.ID, ExternalUriResolverContribution, 2 );
const configurationRegistry = ( Registry.as(Extensions$1.Configuration));
configurationRegistry.registerConfiguration({
    ...workbenchConfigurationNodeBase,
    properties: {
        'workbench.trustedDomains.promptInTrustedWorkspace': {
            scope: 1 ,
            type: 'boolean',
            default: false,
            description: ( localizeWithPath(
                'vs/workbench/contrib/url/browser/url.contribution',
                'workbench.trustedDomains.promptInTrustedWorkspace',
                "When enabled, trusted domain prompts will appear when opening links in trusted workspaces."
            ))
        }
    }
});
