import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';
import { WorkbenchKeybindingService } from './vscode/src/vs/workbench/services/keybinding/browser/keybindingService.js';
import { IKeybindingService } from 'vscode/vscode/vs/platform/keybinding/common/keybinding';
import { VSBuffer } from 'vscode/vscode/vs/base/common/buffer';
import { IUserDataProfilesService } from 'vscode/vscode/vs/platform/userDataProfile/common/userDataProfile';
import { IKeyboardLayoutService } from 'vscode/vscode/vs/platform/keyboardLayout/common/keyboardLayout';
import { BrowserKeyboardLayoutService } from './vscode/src/vs/workbench/services/keybinding/browser/keyboardLayoutService.js';
import { IFileService } from 'vscode/vscode/vs/platform/files/common/files';
import { ICommandService } from 'vscode/vscode/vs/platform/commands/common/commands';
import { CommandService } from './vscode/src/vs/workbench/services/commands/common/commandService.js';
import { DisposableStore, toDisposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { IContextKeyService } from 'vscode/vscode/vs/platform/contextkey/common/contextkey';
import { IUriIdentityService } from 'vscode/vscode/vs/platform/uriIdentity/common/uriIdentity';
import { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry';
import { INotificationService } from 'vscode/vscode/vs/platform/notification/common/notification';
import { IUserDataProfileService } from 'vscode/vscode/vs/workbench/services/userDataProfile/common/userDataProfile';
import { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host';
import { IExtensionService } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log';
import { WorkbenchContextKeysHandler } from './vscode/src/vs/workbench/browser/contextkeys.js';
import { Schemas } from 'vscode/vscode/vs/base/common/network';
import { URI } from 'vscode/vscode/vs/base/common/uri';
import { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import getServiceOverride$1, { initFile } from '@codingame/monaco-vscode-files-service-override';
import { onRenderWorkbench } from 'vscode/lifecycle';
import 'vscode/vscode/vs/workbench/browser/workbench.contribution';
import './vscode/src/vs/workbench/contrib/keybindings/browser/keybindings.contribution.js';
import './vscode/src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.js';
import './vscode/src/vs/workbench/contrib/commands/common/commands.contribution.js';
import { getService } from 'vscode/services';

const defaultUserKeybindindsFile = ( URI.from({ scheme: Schemas.vscodeUserData, path: '/User/keybindings.json' }));
async function initUserKeybindings(configurationJson, options, file = defaultUserKeybindindsFile) {
    await initFile(file, configurationJson, options);
}
async function updateUserKeybindings(keybindingsJson) {
    const userDataProfilesService = await getService(IUserDataProfilesService);
    const fileService = await getService(IFileService);
    await fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(keybindingsJson));
}
let DynamicWorkbenchKeybindingService = class DynamicWorkbenchKeybindingService extends WorkbenchKeybindingService {
    constructor(shouldUseGlobalKeybindings, contextKeyService, commandService, telemetryService, notificationService, userDataProfileService, hostService, extensionService, fileService, uriIdentityService, logService, keyboardLayoutService) {
        super(contextKeyService, commandService, telemetryService, notificationService, userDataProfileService, hostService, extensionService, fileService, uriIdentityService, logService, keyboardLayoutService);
        this.shouldUseGlobalKeybindings = shouldUseGlobalKeybindings;
        this.keybindingProviders = [];
    }
    registerKeybindingProvider(provider) {
        this.keybindingProviders.push(provider);
        this.updateResolver();
        const store = new DisposableStore();
        store.add(provider.onDidChangeKeybindings(() => {
            this.updateResolver();
        }));
        store.add(toDisposable(() => {
            const idx = this.keybindingProviders.indexOf(provider);
            if (idx >= 0) {
                this.keybindingProviders.splice(idx, 1);
                this.updateResolver();
            }
        }));
        return store;
    }
    _getResolver() {
        return super._getResolver();
    }
    _dispatch(e, target) {
        if (!this.shouldUseGlobalKeybindings()) {
            return false;
        }
        return super._dispatch(e, target);
    }
    getUserKeybindingItems() {
        return [...super.getUserKeybindingItems(), ...this.keybindingProviders.flatMap(provider => provider.provideKeybindings())];
    }
};
DynamicWorkbenchKeybindingService = __decorate([
    ( __param(1, IContextKeyService)),
    ( __param(2, ICommandService)),
    ( __param(3, ITelemetryService)),
    ( __param(4, INotificationService)),
    ( __param(5, IUserDataProfileService)),
    ( __param(6, IHostService)),
    ( __param(7, IExtensionService)),
    ( __param(8, IFileService)),
    ( __param(9, IUriIdentityService)),
    ( __param(10, ILogService)),
    ( __param(11, IKeyboardLayoutService))
], DynamicWorkbenchKeybindingService);
onRenderWorkbench((accessor) => {
    accessor.get(IInstantiationService).createInstance(WorkbenchContextKeysHandler);
});
function getServiceOverride({ shouldUseGlobalKeybindings = () => false } = {}) {
    return {
        ...getServiceOverride$1(),
        [( IKeybindingService.toString())]: new SyncDescriptor(DynamicWorkbenchKeybindingService, [shouldUseGlobalKeybindings], false),
        [( IKeyboardLayoutService.toString())]: new SyncDescriptor(BrowserKeyboardLayoutService, undefined, true),
        [( ICommandService.toString())]: new SyncDescriptor(CommandService, [], true)
    };
}

export { getServiceOverride as default, defaultUserKeybindindsFile, initUserKeybindings, updateUserKeybindings };
