import { localize2WithPath, localizeWithPath } from 'vscode/vscode/vs/nls';
import { registerAction2, Action2 } from 'vscode/vscode/vs/platform/actions/common/actions';
import { ICommandService } from 'vscode/vscode/vs/platform/commands/common/commands';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log';
import { INotificationService } from 'vscode/vscode/vs/platform/notification/common/notification';

class RunCommands extends Action2 {
    constructor() {
        super({
            id: 'runCommands',
            title: ( localize2WithPath(
                'vs/workbench/contrib/commands/common/commands.contribution',
                'runCommands',
                "Run Commands"
            )),
            f1: false,
            metadata: {
                description: ( localizeWithPath(
                    'vs/workbench/contrib/commands/common/commands.contribution',
                    'runCommands.description',
                    "Run several commands"
                )),
                args: [
                    {
                        name: 'args',
                        schema: {
                            type: 'object',
                            required: ['commands'],
                            properties: {
                                commands: {
                                    type: 'array',
                                    description: ( localizeWithPath(
                                        'vs/workbench/contrib/commands/common/commands.contribution',
                                        'runCommands.commands',
                                        "Commands to run"
                                    )),
                                    items: {
                                        anyOf: [
                                            {
                                                $ref: 'vscode://schemas/keybindings#/definitions/commandNames'
                                            },
                                            {
                                                type: 'string',
                                            },
                                            {
                                                type: 'object',
                                                required: ['command'],
                                                properties: {
                                                    command: {
                                                        'anyOf': [
                                                            {
                                                                $ref: 'vscode://schemas/keybindings#/definitions/commandNames'
                                                            },
                                                            {
                                                                type: 'string'
                                                            },
                                                        ]
                                                    }
                                                },
                                                $ref: 'vscode://schemas/keybindings#/definitions/commandsSchemas'
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        });
    }
    async run(accessor, args) {
        const notificationService = accessor.get(INotificationService);
        if (!this._isCommandArgs(args)) {
            notificationService.error(( localizeWithPath(
                'vs/workbench/contrib/commands/common/commands.contribution',
                'runCommands.invalidArgs',
                "'runCommands' has received an argument with incorrect type. Please, review the argument passed to the command."
            )));
            return;
        }
        if (args.commands.length === 0) {
            notificationService.warn(( localizeWithPath(
                'vs/workbench/contrib/commands/common/commands.contribution',
                'runCommands.noCommandsToRun',
                "'runCommands' has not received commands to run. Did you forget to pass commands in the 'runCommands' argument?"
            )));
            return;
        }
        const commandService = accessor.get(ICommandService);
        const logService = accessor.get(ILogService);
        let i = 0;
        try {
            for (; i < args.commands.length; ++i) {
                const cmd = args.commands[i];
                logService.debug(`runCommands: executing ${i}-th command: ${JSON.stringify(cmd)}`);
                const r = await this._runCommand(commandService, cmd);
                logService.debug(`runCommands: executed ${i}-th command with return value: ${JSON.stringify(r)}`);
            }
        }
        catch (err) {
            logService.debug(`runCommands: executing ${i}-th command resulted in an error: ${err instanceof Error ? err.message : JSON.stringify(err)}`);
            notificationService.error(err);
        }
    }
    _isCommandArgs(args) {
        if (!args || typeof args !== 'object') {
            return false;
        }
        if (!('commands' in args) || !Array.isArray(args.commands)) {
            return false;
        }
        for (const cmd of args.commands) {
            if (typeof cmd === 'string') {
                continue;
            }
            if (typeof cmd === 'object' && typeof cmd.command === 'string') {
                continue;
            }
            return false;
        }
        return true;
    }
    _runCommand(commandService, cmd) {
        let commandID, commandArgs;
        if (typeof cmd === 'string') {
            commandID = cmd;
        }
        else {
            commandID = cmd.command;
            commandArgs = cmd.args;
        }
        if (commandArgs === undefined) {
            return commandService.executeCommand(commandID);
        }
        else {
            if (Array.isArray(commandArgs)) {
                return commandService.executeCommand(commandID, ...commandArgs);
            }
            else {
                return commandService.executeCommand(commandID, commandArgs);
            }
        }
    }
}
registerAction2(RunCommands);
