import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { WorkspaceService } from './vscode/src/vs/workbench/services/configuration/browser/configurationService.js';
import { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration';
import { ITextResourceConfigurationService, ITextResourcePropertiesService } from 'vscode/vscode/vs/editor/common/services/textResourceConfiguration';
import { TextResourceConfigurationService } from './vscode/src/vs/editor/common/services/textResourceConfigurationService.js';
import { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';
import { Extensions } from 'vscode/vscode/vs/platform/configuration/common/configurationRegistry';
export { ConfigurationScope } from 'vscode/vscode/vs/platform/configuration/common/configurationRegistry';
import { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';
import { VSBuffer } from 'vscode/vscode/vs/base/common/buffer';
import { IFileService } from 'vscode/vscode/vs/platform/files/common/files';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log';
import { IUserDataProfilesService } from 'vscode/vscode/vs/platform/userDataProfile/common/userDataProfile';
import { IPolicyService } from 'vscode/vscode/vs/platform/policy/common/policy';
import { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import { IUserDataProfileService } from 'vscode/vscode/vs/workbench/services/userDataProfile/common/userDataProfile';
import { IRemoteAgentService } from 'vscode/vscode/vs/workbench/services/remote/common/remoteAgentService';
import { IUriIdentityService } from 'vscode/vscode/vs/platform/uriIdentity/common/uriIdentity';
import { ConfigurationCache } from './vscode/src/vs/workbench/services/configuration/common/configurationCache.js';
import { Schemas } from 'vscode/vscode/vs/base/common/network';
import { IWorkbenchEnvironmentService } from 'vscode/vscode/vs/workbench/services/environment/common/environmentService';
import { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace';
import { LabelService } from './vscode/src/vs/workbench/services/label/common/labelService.js';
import { ILabelService } from 'vscode/vscode/vs/platform/label/common/label';
import { generateUuid } from 'vscode/vscode/vs/base/common/uuid';
import { IWorkspacesService } from 'vscode/vscode/vs/platform/workspaces/common/workspaces';
import { BrowserWorkspacesService } from './vscode/src/vs/workbench/services/workspaces/browser/workspacesService.js';
import { IWorkspaceEditingService } from 'vscode/vscode/vs/workbench/services/workspaces/common/workspaceEditing';
import { AbstractWorkspaceEditingService } from './vscode/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.js';
import { URI } from 'vscode/vscode/vs/base/common/uri';
import './vscode/src/vs/workbench/api/common/configurationExtensionPoint.js';
import { TextResourcePropertiesService } from './vscode/src/vs/workbench/services/textresourceProperties/common/textResourcePropertiesService.js';
import getServiceOverride$1, { initFile } from '@codingame/monaco-vscode-files-service-override';
import { memoizedConstructor, unsupported } from './tools.js';
import { registerServiceInitializePreParticipant } from 'vscode/lifecycle';
import { getService, withReadyServices } from 'vscode/services';
import { getWorkspaceIdentifier } from 'vscode/workbench';
import './vscode/src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.js';

const defaultUserConfigurationFile = ( URI.from({ scheme: Schemas.vscodeUserData, path: '/User/settings.json' }));
async function initUserConfiguration(configurationJson, options, file = defaultUserConfigurationFile) {
    await initFile(file, configurationJson, options);
}
async function updateUserConfiguration(configurationJson) {
    const userDataProfilesService = await getService(IUserDataProfilesService);
    const fileService = await getService(IFileService);
    await fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(configurationJson));
}
async function getUserConfiguration() {
    const userDataProfilesService = await getService(IUserDataProfilesService);
    const fileService = await getService(IFileService);
    return ( (await fileService.readFile(userDataProfilesService.defaultProfile.settingsResource)).value.toString());
}
function onUserConfigurationChange(callback) {
    return withReadyServices(accessor => {
        const userDataProfilesService = accessor.get(IUserDataProfilesService);
        return accessor.get(IFileService).onDidFilesChange(e => {
            if (e.affects(userDataProfilesService.defaultProfile.settingsResource)) {
                callback();
            }
        });
    });
}
const configurationRegistry = ( Registry.as(Extensions.Configuration));
let InjectedConfigurationService = class InjectedConfigurationService extends WorkspaceService {
    constructor(workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService) {
        const configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData, Schemas.tmp], workbenchEnvironmentService, fileService);
        super({ configurationCache }, workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService);
    }
};
InjectedConfigurationService = __decorate([
    ( __param(0, IWorkbenchEnvironmentService)),
    ( __param(1, IUserDataProfileService)),
    ( __param(2, IUserDataProfilesService)),
    ( __param(3, IFileService)),
    ( __param(4, IRemoteAgentService)),
    ( __param(5, IUriIdentityService)),
    ( __param(6, ILogService)),
    ( __param(7, IPolicyService))
], InjectedConfigurationService);
class MonacoWorkspaceEditingService extends AbstractWorkspaceEditingService {
    constructor() {
        super(...arguments);
        this.enterWorkspace = unsupported;
    }
}
let _defaultWorkspace;
registerServiceInitializePreParticipant(async (accessor) => {
    const workspaceService = accessor.get(IWorkspaceContextService);
    workspaceService.acquireInstantiationService(accessor.get(IInstantiationService));
    const workspace = _defaultWorkspace ?? getWorkspaceIdentifier();
    if (URI.isUri(workspace)) {
        const configPath = workspace.with({ path: '/workspace.code-workspace' });
        try {
            const fileService = accessor.get(IFileService);
            await fileService.createFolder(workspace);
            await fileService.writeFile(configPath, VSBuffer.fromString(JSON.stringify({
                folders: [
                    {
                        path: workspace.path
                    }
                ]
            })));
        }
        catch (err) {
        }
        await workspaceService.initialize({
            id: generateUuid(),
            configPath
        });
    }
    else {
        await workspaceService.initialize(workspace);
    }
});
const MemoizedInjectedConfigurationService = memoizedConstructor(InjectedConfigurationService);
async function reinitializeWorkspace(workspace) {
    const workspaceService = await getService(IWorkspaceContextService);
    await workspaceService.initialize(workspace);
}
function getServiceOverride(defaultWorkspace) {
    _defaultWorkspace = defaultWorkspace;
    return {
        ...getServiceOverride$1(),
        [( ILabelService.toString())]: new SyncDescriptor(LabelService, undefined, true),
        [( IConfigurationService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),
        [( IWorkspaceContextService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),
        [( ITextResourceConfigurationService.toString())]: new SyncDescriptor(TextResourceConfigurationService, [], true),
        [( IWorkspaceEditingService.toString())]: new SyncDescriptor(MonacoWorkspaceEditingService, [], true),
        [( IWorkspacesService.toString())]: new SyncDescriptor(BrowserWorkspacesService, undefined, true),
        [( ITextResourcePropertiesService.toString())]: new SyncDescriptor(TextResourcePropertiesService, undefined, true)
    };
}

export { configurationRegistry, getServiceOverride as default, defaultUserConfigurationFile, getUserConfiguration, initUserConfiguration, onUserConfigurationChange, reinitializeWorkspace, updateUserConfiguration };
