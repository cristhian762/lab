import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { localize2WithPath, localizeWithPath } from 'vscode/vscode/vs/nls';
import { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';
import { Extensions } from 'vscode/vscode/vs/workbench/common/contributions';
import { WORKSPACE_SUFFIX, IWorkspaceContextService, hasWorkspaceFileExtension } from 'vscode/vscode/vs/platform/workspace/common/workspace';
import { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { IFileService } from 'vscode/vscode/vs/platform/files/common/files';
import { INotificationService, NeverShowAgainScope, Severity, NotificationPriority } from 'vscode/vscode/vs/platform/notification/common/notification';
import { isEqual, joinPath } from 'vscode/vscode/vs/base/common/resources';
import { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host';
import { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput';
import { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage';
import { isVirtualWorkspace } from 'vscode/vscode/vs/platform/workspace/common/virtualWorkspace';
import { registerAction2, Action2, MenuId } from 'vscode/vscode/vs/platform/actions/common/actions';
import { ResourceContextKey, ActiveEditorContext, TemporaryWorkspaceContext } from 'vscode/vscode/vs/workbench/common/contextkeys';
import { ContextKeyExpr } from 'vscode/vscode/vs/platform/contextkey/common/contextkey';
import { TEXT_FILE_EDITOR_ID } from 'vscode/vscode/vs/workbench/contrib/files/common/files';

let WorkspacesFinderContribution = class WorkspacesFinderContribution extends Disposable {
    constructor(contextService, notificationService, fileService, quickInputService, hostService, storageService) {
        super();
        this.contextService = contextService;
        this.notificationService = notificationService;
        this.fileService = fileService;
        this.quickInputService = quickInputService;
        this.hostService = hostService;
        this.storageService = storageService;
        this.findWorkspaces();
    }
    async findWorkspaces() {
        const folder = this.contextService.getWorkspace().folders[0];
        if (!folder || this.contextService.getWorkbenchState() !== 2  || isVirtualWorkspace(this.contextService.getWorkspace())) {
            return;
        }
        const rootFileNames = (await this.fileService.resolve(folder.uri)).children?.map(child => child.name);
        if (Array.isArray(rootFileNames)) {
            const workspaceFiles = rootFileNames.filter(hasWorkspaceFileExtension);
            if (workspaceFiles.length > 0) {
                this.doHandleWorkspaceFiles(folder.uri, workspaceFiles);
            }
        }
    }
    doHandleWorkspaceFiles(folder, workspaces) {
        const neverShowAgain = { id: 'workspaces.dontPromptToOpen', scope: NeverShowAgainScope.WORKSPACE, isSecondary: true };
        if (workspaces.length === 1) {
            const workspaceFile = workspaces[0];
            this.notificationService.prompt(Severity.Info, ( localizeWithPath('vs/workbench/contrib/workspaces/browser/workspaces.contribution', {
                key: 'foundWorkspace',
                comment: ['{Locked="]({1})"}']
            }, "This folder contains a workspace file '{0}'. Do you want to open it? [Learn more]({1}) about workspace files.", workspaceFile, 'https://go.microsoft.com/fwlink/?linkid=2025315')), [{
                    label: ( localizeWithPath(
                        'vs/workbench/contrib/workspaces/browser/workspaces.contribution',
                        'openWorkspace',
                        "Open Workspace"
                    )),
                    run: () => this.hostService.openWindow([{ workspaceUri: joinPath(folder, workspaceFile) }])
                }], {
                neverShowAgain,
                priority: !this.storageService.isNew(1 ) ? NotificationPriority.SILENT : undefined
            });
        }
        else if (workspaces.length > 1) {
            this.notificationService.prompt(Severity.Info, ( localizeWithPath('vs/workbench/contrib/workspaces/browser/workspaces.contribution', {
                key: 'foundWorkspaces',
                comment: ['{Locked="]({0})"}']
            }, "This folder contains multiple workspace files. Do you want to open one? [Learn more]({0}) about workspace files.", 'https://go.microsoft.com/fwlink/?linkid=2025315')), [{
                    label: ( localizeWithPath(
                        'vs/workbench/contrib/workspaces/browser/workspaces.contribution',
                        'selectWorkspace',
                        "Select Workspace"
                    )),
                    run: () => {
                        this.quickInputService.pick(( workspaces.map(workspace => ({ label: workspace }))), { placeHolder: ( localizeWithPath(
                            'vs/workbench/contrib/workspaces/browser/workspaces.contribution',
                            'selectToOpen',
                            "Select a workspace to open"
                        )) }).then(pick => {
                            if (pick) {
                                this.hostService.openWindow([{ workspaceUri: joinPath(folder, pick.label) }]);
                            }
                        });
                    }
                }], {
                neverShowAgain,
                priority: !this.storageService.isNew(1 ) ? NotificationPriority.SILENT : undefined
            });
        }
    }
};
WorkspacesFinderContribution = ( __decorate([
    ( __param(0, IWorkspaceContextService)),
    ( __param(1, INotificationService)),
    ( __param(2, IFileService)),
    ( __param(3, IQuickInputService)),
    ( __param(4, IHostService)),
    ( __param(5, IStorageService))
], WorkspacesFinderContribution));
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(WorkspacesFinderContribution, 4 );
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.openWorkspaceFromEditor',
            title: ( localize2WithPath(
                'vs/workbench/contrib/workspaces/browser/workspaces.contribution',
                'openWorkspace',
                "Open Workspace"
            )),
            f1: false,
            menu: {
                id: MenuId.EditorContent,
                when: ( ContextKeyExpr.and(( ResourceContextKey.Extension.isEqualTo(WORKSPACE_SUFFIX)), ( ActiveEditorContext.isEqualTo(TEXT_FILE_EDITOR_ID)), ( TemporaryWorkspaceContext.toNegated())))
            }
        });
    }
    async run(accessor, uri) {
        const hostService = accessor.get(IHostService);
        const contextService = accessor.get(IWorkspaceContextService);
        const notificationService = accessor.get(INotificationService);
        if (contextService.getWorkbenchState() === 3 ) {
            const workspaceConfiguration = contextService.getWorkspace().configuration;
            if (workspaceConfiguration && isEqual(workspaceConfiguration, uri)) {
                notificationService.info(( localizeWithPath(
                    'vs/workbench/contrib/workspaces/browser/workspaces.contribution',
                    'alreadyOpen',
                    "This workspace is already open."
                )));
                return;
            }
        }
        return hostService.openWindow([{ workspaceUri: uri }]);
    }
});

export { WorkspacesFinderContribution };
