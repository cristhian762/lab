import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { request } from '../../../base/parts/request/browser/request.js';
import { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration';
import { ILoggerService } from 'vscode/vscode/vs/platform/log/common/log';
import { AbstractRequestService } from 'vscode/vscode/vs/platform/request/common/request';

let RequestService = class RequestService extends AbstractRequestService {
    constructor(configurationService, loggerService) {
        super(loggerService);
        this.configurationService = configurationService;
    }
    async request(options, token) {
        if (!options.proxyAuthorization) {
            options.proxyAuthorization = this.configurationService.getValue('http.proxyAuthorization');
        }
        return this.logAndRequest('browser', options, () => request(options, token));
    }
    async resolveProxy(url) {
        return undefined;
    }
    async loadCertificates() {
        return [];
    }
};
RequestService = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, ILoggerService))
], RequestService));

export { RequestService };
