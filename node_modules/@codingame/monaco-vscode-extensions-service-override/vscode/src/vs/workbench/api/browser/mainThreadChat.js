import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { Emitter } from 'vscode/vscode/vs/base/common/event';
import { Disposable, DisposableMap } from 'vscode/vscode/vs/base/common/lifecycle';
import { URI } from 'vscode/vscode/vs/base/common/uri';
import { MainContext, ExtHostContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { IChatWidgetService } from 'vscode/vscode/vs/workbench/contrib/chat/browser/chat';
import { IChatContributionService } from 'vscode/vscode/vs/workbench/contrib/chat/common/chatContributionService';
import { IChatService } from 'vscode/vscode/vs/workbench/contrib/chat/common/chatService';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';

let MainThreadChat = class MainThreadChat extends Disposable {
    constructor(extHostContext, _chatService, _chatWidgetService, chatContribService) {
        super();
        this._chatService = _chatService;
        this._chatWidgetService = _chatWidgetService;
        this.chatContribService = chatContribService;
        this._providerRegistrations = this._register(( new DisposableMap()));
        this._stateEmitters = ( new Map());
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostChat));
    }
    $transferChatSession(sessionId, toWorkspace) {
        const sessionIdStr = this._chatService.getSessionId(sessionId);
        if (!sessionIdStr) {
            throw new Error(`Failed to transfer session. Unknown session provider ID: ${sessionId}`);
        }
        const widget = this._chatWidgetService.getWidgetBySessionId(sessionIdStr);
        const inputValue = widget?.inputEditor.getValue() ?? '';
        this._chatService.transferChatSession({ sessionId: sessionIdStr, inputValue: inputValue }, URI.revive(toWorkspace));
    }
    async $registerChatProvider(handle, id) {
        const registration = this.chatContribService.registeredProviders.find(staticProvider => staticProvider.id === id);
        if (!registration) {
            throw new Error(`Provider ${id} must be declared in the package.json.`);
        }
        const unreg = this._chatService.registerProvider({
            id,
            prepareSession: async (token) => {
                const session = await this._proxy.$prepareChat(handle, token);
                if (!session) {
                    return undefined;
                }
                const responderAvatarIconUri = session.responderAvatarIconUri &&
                    URI.revive(session.responderAvatarIconUri);
                const emitter = ( new Emitter());
                this._stateEmitters.set(session.id, emitter);
                return {
                    id: session.id,
                    requesterUsername: session.requesterUsername,
                    requesterAvatarIconUri: URI.revive(session.requesterAvatarIconUri),
                    responderUsername: session.responderUsername,
                    responderAvatarIconUri,
                    inputPlaceholder: session.inputPlaceholder,
                    dispose: () => {
                        emitter.dispose();
                        this._stateEmitters.delete(session.id);
                        this._proxy.$releaseSession(session.id);
                    }
                };
            },
        });
        this._providerRegistrations.set(handle, unreg);
    }
    async $acceptChatState(sessionId, state) {
        this._stateEmitters.get(sessionId)?.fire(state);
    }
    async $sendRequestToProvider(providerId, message) {
        const widget = await this._chatWidgetService.revealViewForProvider(providerId);
        if (widget && widget.viewModel) {
            this._chatService.sendRequestToProvider(widget.viewModel.sessionId, message);
        }
    }
    async $unregisterChatProvider(handle) {
        this._providerRegistrations.deleteAndDispose(handle);
    }
};
MainThreadChat = __decorate([
    extHostNamedCustomer(MainContext.MainThreadChat),
    ( __param(1, IChatService)),
    ( __param(2, IChatWidgetService)),
    ( __param(3, IChatContributionService))
], MainThreadChat);

export { MainThreadChat };
