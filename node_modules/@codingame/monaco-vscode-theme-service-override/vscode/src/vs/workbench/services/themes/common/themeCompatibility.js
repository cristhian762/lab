import { Color } from 'vscode/vscode/vs/base/common/color';
import { editorBackground, editorForeground, editorSelectionBackground, editorInactiveSelection, editorSelectionHighlight, editorFindMatchHighlight, editorFindMatch, editorHoverHighlight, editorFindRangeHighlight } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';
import { editorLineHighlight, editorRangeHighlight, editorCursorForeground, editorWhitespaces, editorIndentGuide1, editorActiveIndentGuide1 } from 'vscode/vscode/vs/editor/common/core/editorColorRegistry';

const settingToColorIdMapping = {};
function addSettingMapping(settingId, colorId) {
    let colorIds = settingToColorIdMapping[settingId];
    if (!colorIds) {
        settingToColorIdMapping[settingId] = colorIds = [];
    }
    colorIds.push(colorId);
}
function convertSettings(oldSettings, result) {
    for (const rule of oldSettings) {
        result.textMateRules.push(rule);
        if (!rule.scope) {
            const settings = rule.settings;
            if (!settings) {
                rule.settings = {};
            }
            else {
                for (const settingKey in settings) {
                    const key = settingKey;
                    const mappings = settingToColorIdMapping[key];
                    if (mappings) {
                        const colorHex = settings[key];
                        if (typeof colorHex === 'string') {
                            const color = ( Color.fromHex(colorHex));
                            for (const colorId of mappings) {
                                result.colors[colorId] = color;
                            }
                        }
                    }
                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {
                        delete settings[key];
                    }
                }
            }
        }
    }
}
addSettingMapping('background', editorBackground);
addSettingMapping('foreground', editorForeground);
addSettingMapping('selection', editorSelectionBackground);
addSettingMapping('inactiveSelection', editorInactiveSelection);
addSettingMapping('selectionHighlightColor', editorSelectionHighlight);
addSettingMapping('findMatchHighlight', editorFindMatchHighlight);
addSettingMapping('currentFindMatchHighlight', editorFindMatch);
addSettingMapping('hoverHighlight', editorHoverHighlight);
addSettingMapping('wordHighlight', 'editor.wordHighlightBackground');
addSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');
addSettingMapping('findRangeHighlight', editorFindRangeHighlight);
addSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');
addSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');
addSettingMapping('lineHighlight', editorLineHighlight);
addSettingMapping('rangeHighlight', editorRangeHighlight);
addSettingMapping('caret', editorCursorForeground);
addSettingMapping('invisibles', editorWhitespaces);
addSettingMapping('guide', editorIndentGuide1);
addSettingMapping('activeGuide', editorActiveIndentGuide1);
const ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',
    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'
];
for (const color of ansiColorMap) {
    addSettingMapping(color, 'terminal.' + color);
}

export { convertSettings };
