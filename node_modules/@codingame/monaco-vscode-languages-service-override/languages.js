import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';
import { WorkbenchLanguageService } from 'vscode/vscode/vs/workbench/services/language/common/languageService';
import { LanguageConfigurationFileHandler } from 'vscode/vscode/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint';
import { registerWorkbenchContribution2 } from 'vscode/vscode/vs/workbench/common/contributions';
import { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import { ILanguageService } from 'vscode/vscode/vs/editor/common/languages/language';
import { ILanguageStatusService, LanguageStatusServiceImpl } from 'vscode/vscode/vs/workbench/services/languageStatus/common/languageStatusService';
import getServiceOverride$1 from '@codingame/monaco-vscode-files-service-override';

let ExtensionPoints = class ExtensionPoints {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.instantiationService.createInstance(LanguageConfigurationFileHandler);
    }
};
ExtensionPoints.ID = 'workbench.contrib.extensionPoints.languageConfiguration';
ExtensionPoints = __decorate([
    ( __param(0, IInstantiationService))
], ExtensionPoints);
registerWorkbenchContribution2(ExtensionPoints.ID, ExtensionPoints, 1 );
function getServiceOverride() {
    return {
        ...getServiceOverride$1(),
        [( ILanguageService.toString())]: new SyncDescriptor(WorkbenchLanguageService, [], false),
        [( ILanguageStatusService.toString())]: new SyncDescriptor(LanguageStatusServiceImpl, [], true)
    };
}

export { ExtensionPoints, getServiceOverride as default };
