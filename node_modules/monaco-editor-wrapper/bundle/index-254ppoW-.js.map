{"version":3,"file":"index-254ppoW-.js","sources":["../../../node_modules/@codingame/monaco-vscode-theme-service-override/external/tslib/tslib.es6.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeCompatibility.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/plistParser.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/textMateScopeMatcher.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/colorThemeData.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/productIconThemeSchema.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/fileIconThemeSchema.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/fileIconThemeData.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/colorThemeSchema.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeExtensionPoints.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeConfiguration.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/productIconThemeData.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/override/vs/platform/dialogs/common/dialogs.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.js","../../../node_modules/@codingame/monaco-vscode-theme-service-override/theme.js"],"sourcesContent":["function __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport { __decorate, __param };\n","import { Color } from 'vscode/vscode/vs/base/common/color';\nimport { editorBackground, editorForeground, editorSelectionBackground, editorInactiveSelection, editorSelectionHighlight, editorFindMatchHighlight, editorFindMatch, editorHoverHighlight, editorFindRangeHighlight } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';\nimport { editorLineHighlight, editorRangeHighlight, editorCursorForeground, editorWhitespaces, editorIndentGuide1, editorActiveIndentGuide1 } from 'vscode/vscode/vs/editor/common/core/editorColorRegistry';\n\nconst settingToColorIdMapping = {};\nfunction addSettingMapping(settingId, colorId) {\n    let colorIds = settingToColorIdMapping[settingId];\n    if (!colorIds) {\n        settingToColorIdMapping[settingId] = colorIds = [];\n    }\n    colorIds.push(colorId);\n}\nfunction convertSettings(oldSettings, result) {\n    for (const rule of oldSettings) {\n        result.textMateRules.push(rule);\n        if (!rule.scope) {\n            const settings = rule.settings;\n            if (!settings) {\n                rule.settings = {};\n            }\n            else {\n                for (const settingKey in settings) {\n                    const key = settingKey;\n                    const mappings = settingToColorIdMapping[key];\n                    if (mappings) {\n                        const colorHex = settings[key];\n                        if (typeof colorHex === 'string') {\n                            const color = ( Color.fromHex(colorHex));\n                            for (const colorId of mappings) {\n                                result.colors[colorId] = color;\n                            }\n                        }\n                    }\n                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n                        delete settings[key];\n                    }\n                }\n            }\n        }\n    }\n}\naddSettingMapping('background', editorBackground);\naddSettingMapping('foreground', editorForeground);\naddSettingMapping('selection', editorSelectionBackground);\naddSettingMapping('inactiveSelection', editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', editorFindMatch);\naddSettingMapping('hoverHighlight', editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground');\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorLineHighlight);\naddSettingMapping('rangeHighlight', editorRangeHighlight);\naddSettingMapping('caret', editorCursorForeground);\naddSettingMapping('invisibles', editorWhitespaces);\naddSettingMapping('guide', editorIndentGuide1);\naddSettingMapping('activeGuide', editorActiveIndentGuide1);\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\nfor (const color of ansiColorMap) {\n    addSettingMapping(color, 'terminal.' + color);\n}\n\nexport { convertSettings };\n","function parse(content) {\n    return _parse(content, null, null);\n}\nfunction _parse(content, filename, locationKeyName) {\n    const len = content.length;\n    let pos = 0;\n    let line = 1;\n    let char = 0;\n    if (len > 0 && content.charCodeAt(0) === 65279 ) {\n        pos = 1;\n    }\n    function advancePosBy(by) {\n        if (locationKeyName === null) {\n            pos = pos + by;\n        }\n        else {\n            while (by > 0) {\n                const chCode = content.charCodeAt(pos);\n                if (chCode === 10 ) {\n                    pos++;\n                    line++;\n                    char = 0;\n                }\n                else {\n                    pos++;\n                    char++;\n                }\n                by--;\n            }\n        }\n    }\n    function advancePosTo(to) {\n        if (locationKeyName === null) {\n            pos = to;\n        }\n        else {\n            advancePosBy(to - pos);\n        }\n    }\n    function skipWhitespace() {\n        while (pos < len) {\n            const chCode = content.charCodeAt(pos);\n            if (chCode !== 32  && chCode !== 9  && chCode !== 13  && chCode !== 10 ) {\n                break;\n            }\n            advancePosBy(1);\n        }\n    }\n    function advanceIfStartsWith(str) {\n        if (content.substr(pos, str.length) === str) {\n            advancePosBy(str.length);\n            return true;\n        }\n        return false;\n    }\n    function advanceUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            advancePosTo(nextOccurence + str.length);\n        }\n        else {\n            advancePosTo(len);\n        }\n    }\n    function captureUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            const r = content.substring(pos, nextOccurence);\n            advancePosTo(nextOccurence + str.length);\n            return r;\n        }\n        else {\n            const r = content.substr(pos);\n            advancePosTo(len);\n            return r;\n        }\n    }\n    let state = 0 ;\n    let cur = null;\n    const stateStack = [];\n    const objStack = [];\n    let curKey = null;\n    function pushState(newState, newCur) {\n        stateStack.push(state);\n        objStack.push(cur);\n        state = newState;\n        cur = newCur;\n    }\n    function popState() {\n        if (stateStack.length === 0) {\n            return fail('illegal state stack');\n        }\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        throw new Error('Near offset ' + pos + ': ' + msg + ' ~~~' + content.substr(pos, 50) + '~~~');\n    }\n    const dictState = {\n        enterDict: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur[curKey] = newDict;\n            curKey = null;\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newArr = [];\n            cur[curKey] = newArr;\n            curKey = null;\n            pushState(2 , newArr);\n        }\n    };\n    const arrState = {\n        enterDict: function () {\n            const newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur.push(newDict);\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            const newArr = [];\n            cur.push(newArr);\n            pushState(2 , newArr);\n        }\n    };\n    function enterDict() {\n        if (state === 1 ) {\n            dictState.enterDict();\n        }\n        else if (state === 2 ) {\n            arrState.enterDict();\n        }\n        else {\n            cur = {};\n            if (locationKeyName !== null) {\n                cur[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            pushState(1 , cur);\n        }\n    }\n    function leaveDict() {\n        if (state === 1 ) {\n            popState();\n        }\n        else if (state === 2 ) {\n            return fail('unexpected </dict>');\n        }\n        else {\n            return fail('unexpected </dict>');\n        }\n    }\n    function enterArray() {\n        if (state === 1 ) {\n            dictState.enterArray();\n        }\n        else if (state === 2 ) {\n            arrState.enterArray();\n        }\n        else {\n            cur = [];\n            pushState(2 , cur);\n        }\n    }\n    function leaveArray() {\n        if (state === 1 ) {\n            return fail('unexpected </array>');\n        }\n        else if (state === 2 ) {\n            popState();\n        }\n        else {\n            return fail('unexpected </array>');\n        }\n    }\n    function acceptKey(val) {\n        if (state === 1 ) {\n            if (curKey !== null) {\n                return fail('too many <key>');\n            }\n            curKey = val;\n        }\n        else if (state === 2 ) {\n            return fail('unexpected <key>');\n        }\n        else {\n            return fail('unexpected <key>');\n        }\n    }\n    function acceptString(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptReal(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse float');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptInteger(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse integer');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptDate(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptData(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptBool(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function escapeVal(str) {\n        return str.replace(/&#([0-9]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 10));\n        }).replace(/&#x([0-9a-f]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function (_) {\n            switch (_) {\n                case '&amp;': return '&';\n                case '&lt;': return '<';\n                case '&gt;': return '>';\n                case '&quot;': return '\"';\n                case '&apos;': return '\\'';\n            }\n            return _;\n        });\n    }\n    function parseOpenTag() {\n        let r = captureUntil('>');\n        let isClosed = false;\n        if (r.charCodeAt(r.length - 1) === 47 ) {\n            isClosed = true;\n            r = r.substring(0, r.length - 1);\n        }\n        return {\n            name: r.trim(),\n            isClosed: isClosed\n        };\n    }\n    function parseTagValue(tag) {\n        if (tag.isClosed) {\n            return '';\n        }\n        const val = captureUntil('</');\n        advanceUntil('>');\n        return escapeVal(val);\n    }\n    while (pos < len) {\n        skipWhitespace();\n        if (pos >= len) {\n            break;\n        }\n        const chCode = content.charCodeAt(pos);\n        advancePosBy(1);\n        if (chCode !== 60 ) {\n            return fail('expected <');\n        }\n        if (pos >= len) {\n            return fail('unexpected end of input');\n        }\n        const peekChCode = content.charCodeAt(pos);\n        if (peekChCode === 63 ) {\n            advancePosBy(1);\n            advanceUntil('?>');\n            continue;\n        }\n        if (peekChCode === 33 ) {\n            advancePosBy(1);\n            if (advanceIfStartsWith('--')) {\n                advanceUntil('-->');\n                continue;\n            }\n            advanceUntil('>');\n            continue;\n        }\n        if (peekChCode === 47 ) {\n            advancePosBy(1);\n            skipWhitespace();\n            if (advanceIfStartsWith('plist')) {\n                advanceUntil('>');\n                continue;\n            }\n            if (advanceIfStartsWith('dict')) {\n                advanceUntil('>');\n                leaveDict();\n                continue;\n            }\n            if (advanceIfStartsWith('array')) {\n                advanceUntil('>');\n                leaveArray();\n                continue;\n            }\n            return fail('unexpected closed tag');\n        }\n        const tag = parseOpenTag();\n        switch (tag.name) {\n            case 'dict':\n                enterDict();\n                if (tag.isClosed) {\n                    leaveDict();\n                }\n                continue;\n            case 'array':\n                enterArray();\n                if (tag.isClosed) {\n                    leaveArray();\n                }\n                continue;\n            case 'key':\n                acceptKey(parseTagValue(tag));\n                continue;\n            case 'string':\n                acceptString(parseTagValue(tag));\n                continue;\n            case 'real':\n                acceptReal(parseFloat(parseTagValue(tag)));\n                continue;\n            case 'integer':\n                acceptInteger(parseInt(parseTagValue(tag), 10));\n                continue;\n            case 'date':\n                acceptDate(( new Date(parseTagValue(tag))));\n                continue;\n            case 'data':\n                acceptData(parseTagValue(tag));\n                continue;\n            case 'true':\n                parseTagValue(tag);\n                acceptBool(true);\n                continue;\n            case 'false':\n                parseTagValue(tag);\n                acceptBool(false);\n                continue;\n        }\n        if (/^plist/.test(tag.name)) {\n            continue;\n        }\n        return fail('unexpected opened tag ' + tag.name);\n    }\n    return cur;\n}\n\nexport { parse };\n","function createMatchers(selector, matchesName, results) {\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        const matcher = parseConjunction();\n        if (matcher) {\n            results.push({ matcher, priority });\n        }\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            if (!expressionToNegate) {\n                return null;\n            }\n            return matcherInput => {\n                const score = expressionToNegate(matcherInput);\n                return score < 0 ? 0 : -1;\n            };\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        let matcher = parseOperand();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => {\n            let min = matchers[0](matcherInput);\n            for (let i = 1; min >= 0 && i < matchers.length; i++) {\n                min = Math.min(min, matchers[i](matcherInput));\n            }\n            return min;\n        };\n    }\n    function parseInnerExpression() {\n        let matcher = parseConjunction();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ',');\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => {\n            let max = matchers[0](matcherInput);\n            for (let i = 1; i < matchers.length; i++) {\n                max = Math.max(max, matchers[i](matcherInput));\n            }\n            return max;\n        };\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    const regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\n\nexport { createMatchers };\n","import { basename } from 'vscode/vscode/vs/base/common/path';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { Color } from 'vscode/vscode/vs/base/common/color';\nimport { THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_WILDCARD, themeScopeRegex, ExtensionData, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { convertSettings } from './themeCompatibility.js';\nimport { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isUndefined, isObject, isString, isBoolean } from 'vscode/vscode/vs/base/common/types';\nimport { extname, joinPath, dirname } from 'vscode/vscode/vs/base/common/resources';\nimport { Extensions, editorForeground, editorBackground } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';\nimport { getThemeTypeSelector } from 'vscode/vscode/vs/platform/theme/common/themeService';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { parse as parse$1 } from './plistParser.js';\nimport { getTokenClassificationRegistry, TokenStyle, parseClassifierString, SemanticTokenRule } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\nimport { createMatchers } from './textMateScopeMatcher.js';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\n\nconst colorRegistry = ( Registry.as(Extensions.ColorContribution));\nconst tokenClassificationRegistry = getTokenClassificationRegistry();\nconst tokenGroupToScopesMap = {\n    comments: ['comment', 'punctuation.definition.comment'],\n    strings: ['string', 'meta.embedded.assembly'],\n    keywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n    numbers: ['constant.numeric'],\n    types: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n    functions: ['entity.name.function', 'support.function'],\n    variables: ['variable', 'entity.name.variable']\n};\nclass ColorThemeData {\n    static { this.STORAGE_KEY = 'colorThemeData'; }\n    constructor(id, label, settingsId) {\n        this.themeTokenColors = [];\n        this.customTokenColors = [];\n        this.colorMap = {};\n        this.customColorMap = {};\n        this.semanticTokenRules = [];\n        this.customSemanticTokenRules = [];\n        this.textMateThemingRules = undefined;\n        this.tokenColorIndex = undefined;\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    get semanticHighlighting() {\n        if (this.customSemanticHighlighting !== undefined) {\n            return this.customSemanticHighlighting;\n        }\n        if (this.customSemanticHighlightingDeprecated !== undefined) {\n            return this.customSemanticHighlightingDeprecated;\n        }\n        return !!this.themeSemanticHighlighting;\n    }\n    get tokenColors() {\n        if (!this.textMateThemingRules) {\n            const result = [];\n            const foreground = this.getColor(editorForeground) || this.getDefault(editorForeground);\n            const background = this.getColor(editorBackground) || this.getDefault(editorBackground);\n            result.push({\n                settings: {\n                    foreground: normalizeColor(foreground),\n                    background: normalizeColor(background)\n                }\n            });\n            let hasDefaultTokens = false;\n            function addRule(rule) {\n                if (rule.scope && rule.settings) {\n                    if (rule.scope === 'token.info-token') {\n                        hasDefaultTokens = true;\n                    }\n                    result.push({ scope: rule.scope, settings: { foreground: normalizeColor(rule.settings.foreground), background: normalizeColor(rule.settings.background), fontStyle: rule.settings.fontStyle } });\n                }\n            }\n            this.themeTokenColors.forEach(addRule);\n            this.customTokenColors.forEach(addRule);\n            if (!hasDefaultTokens) {\n                defaultThemeColors[this.type].forEach(addRule);\n            }\n            this.textMateThemingRules = result;\n        }\n        return this.textMateThemingRules;\n    }\n    getColor(colorId, useDefault) {\n        let color = this.customColorMap[colorId];\n        if (color) {\n            return color;\n        }\n        color = this.colorMap[colorId];\n        if (useDefault !== false && isUndefined(color)) {\n            color = this.getDefault(colorId);\n        }\n        return color;\n    }\n    getTokenStyle(type, modifiers, language, useDefault = true, definitions = {}) {\n        const result = {\n            foreground: undefined,\n            bold: undefined,\n            underline: undefined,\n            strikethrough: undefined,\n            italic: undefined\n        };\n        const score = {\n            foreground: -1,\n            bold: -1,\n            underline: -1,\n            strikethrough: -1,\n            italic: -1\n        };\n        function _processStyle(matchScore, style, definition) {\n            if (style.foreground && score.foreground <= matchScore) {\n                score.foreground = matchScore;\n                result.foreground = style.foreground;\n                definitions.foreground = definition;\n            }\n            for (const p of ['bold', 'underline', 'strikethrough', 'italic']) {\n                const property = p;\n                const info = style[property];\n                if (info !== undefined) {\n                    if (score[property] <= matchScore) {\n                        score[property] = matchScore;\n                        result[property] = info;\n                        definitions[property] = definition;\n                    }\n                }\n            }\n        }\n        function _processSemanticTokenRule(rule) {\n            const matchScore = rule.selector.match(type, modifiers, language);\n            if (matchScore >= 0) {\n                _processStyle(matchScore, rule.style, rule);\n            }\n        }\n        this.semanticTokenRules.forEach(_processSemanticTokenRule);\n        this.customSemanticTokenRules.forEach(_processSemanticTokenRule);\n        let hasUndefinedStyleProperty = false;\n        for (const k in score) {\n            const key = k;\n            if (score[key] === -1) {\n                hasUndefinedStyleProperty = true;\n            }\n            else {\n                score[key] = Number.MAX_VALUE;\n            }\n        }\n        if (hasUndefinedStyleProperty) {\n            for (const rule of tokenClassificationRegistry.getTokenStylingDefaultRules()) {\n                const matchScore = rule.selector.match(type, modifiers, language);\n                if (matchScore >= 0) {\n                    let style;\n                    if (rule.defaults.scopesToProbe) {\n                        style = this.resolveScopes(rule.defaults.scopesToProbe);\n                        if (style) {\n                            _processStyle(matchScore, style, rule.defaults.scopesToProbe);\n                        }\n                    }\n                    if (!style && useDefault !== false) {\n                        const tokenStyleValue = rule.defaults[this.type];\n                        style = this.resolveTokenStyleValue(tokenStyleValue);\n                        if (style) {\n                            _processStyle(matchScore, style, tokenStyleValue);\n                        }\n                    }\n                }\n            }\n        }\n        return TokenStyle.fromData(result);\n    }\n    resolveTokenStyleValue(tokenStyleValue) {\n        if (tokenStyleValue === undefined) {\n            return undefined;\n        }\n        else if (typeof tokenStyleValue === 'string') {\n            const { type, modifiers, language } = parseClassifierString(tokenStyleValue, '');\n            return this.getTokenStyle(type, modifiers, language);\n        }\n        else if (typeof tokenStyleValue === 'object') {\n            return tokenStyleValue;\n        }\n        return undefined;\n    }\n    getTokenColorIndex() {\n        if (!this.tokenColorIndex) {\n            const index = ( new TokenColorIndex());\n            this.tokenColors.forEach(rule => {\n                index.add(rule.settings.foreground);\n                index.add(rule.settings.background);\n            });\n            this.semanticTokenRules.forEach(r => index.add(r.style.foreground));\n            tokenClassificationRegistry.getTokenStylingDefaultRules().forEach(r => {\n                const defaultColor = r.defaults[this.type];\n                if (defaultColor && typeof defaultColor === 'object') {\n                    index.add(defaultColor.foreground);\n                }\n            });\n            this.customSemanticTokenRules.forEach(r => index.add(r.style.foreground));\n            this.tokenColorIndex = index;\n        }\n        return this.tokenColorIndex;\n    }\n    get tokenColorMap() {\n        return this.getTokenColorIndex().asArray();\n    }\n    getTokenStyleMetadata(typeWithLanguage, modifiers, defaultLanguage, useDefault = true, definitions = {}) {\n        const { type, language } = parseClassifierString(typeWithLanguage, defaultLanguage);\n        const style = this.getTokenStyle(type, modifiers, language, useDefault, definitions);\n        if (!style) {\n            return undefined;\n        }\n        return {\n            foreground: this.getTokenColorIndex().get(style.foreground),\n            bold: style.bold,\n            underline: style.underline,\n            strikethrough: style.strikethrough,\n            italic: style.italic,\n        };\n    }\n    getTokenStylingRuleScope(rule) {\n        if (this.customSemanticTokenRules.indexOf(rule) !== -1) {\n            return 'setting';\n        }\n        if (this.semanticTokenRules.indexOf(rule) !== -1) {\n            return 'theme';\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        return colorRegistry.resolveDefaultColor(colorId, this);\n    }\n    resolveScopes(scopes, definitions) {\n        if (!this.themeTokenScopeMatchers) {\n            this.themeTokenScopeMatchers = ( this.themeTokenColors.map(getScopeMatcher));\n        }\n        if (!this.customTokenScopeMatchers) {\n            this.customTokenScopeMatchers = ( this.customTokenColors.map(getScopeMatcher));\n        }\n        for (const scope of scopes) {\n            let foreground = undefined;\n            let fontStyle = undefined;\n            let foregroundScore = -1;\n            let fontStyleScore = -1;\n            let fontStyleThemingRule = undefined;\n            let foregroundThemingRule = undefined;\n            function findTokenStyleForScopeInScopes(scopeMatchers, themingRules) {\n                for (let i = 0; i < scopeMatchers.length; i++) {\n                    const score = scopeMatchers[i](scope);\n                    if (score >= 0) {\n                        const themingRule = themingRules[i];\n                        const settings = themingRules[i].settings;\n                        if (score >= foregroundScore && settings.foreground) {\n                            foreground = settings.foreground;\n                            foregroundScore = score;\n                            foregroundThemingRule = themingRule;\n                        }\n                        if (score >= fontStyleScore && isString(settings.fontStyle)) {\n                            fontStyle = settings.fontStyle;\n                            fontStyleScore = score;\n                            fontStyleThemingRule = themingRule;\n                        }\n                    }\n                }\n            }\n            findTokenStyleForScopeInScopes(this.themeTokenScopeMatchers, this.themeTokenColors);\n            findTokenStyleForScopeInScopes(this.customTokenScopeMatchers, this.customTokenColors);\n            if (foreground !== undefined || fontStyle !== undefined) {\n                if (definitions) {\n                    definitions.foreground = foregroundThemingRule;\n                    definitions.bold = definitions.italic = definitions.underline = definitions.strikethrough = fontStyleThemingRule;\n                    definitions.scope = scope;\n                }\n                return TokenStyle.fromSettings(foreground, fontStyle);\n            }\n        }\n        return undefined;\n    }\n    defines(colorId) {\n        return this.customColorMap.hasOwnProperty(colorId) || this.colorMap.hasOwnProperty(colorId);\n    }\n    setCustomizations(settings) {\n        this.setCustomColors(settings.colorCustomizations);\n        this.setCustomTokenColors(settings.tokenColorCustomizations);\n        this.setCustomSemanticTokenColors(settings.semanticTokenColorCustomizations);\n    }\n    setCustomColors(colors) {\n        this.customColorMap = {};\n        this.overwriteCustomColors(colors);\n        const themeSpecificColors = this.getThemeSpecificColors(colors);\n        if (isObject(themeSpecificColors)) {\n            this.overwriteCustomColors(themeSpecificColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    overwriteCustomColors(colors) {\n        for (const id in colors) {\n            const colorVal = colors[id];\n            if (typeof colorVal === 'string') {\n                this.customColorMap[id] = ( Color.fromHex(colorVal));\n            }\n        }\n    }\n    setCustomTokenColors(customTokenColors) {\n        this.customTokenColors = [];\n        this.customSemanticHighlightingDeprecated = undefined;\n        this.addCustomTokenColors(customTokenColors);\n        const themeSpecificTokenColors = this.getThemeSpecificColors(customTokenColors);\n        if (isObject(themeSpecificTokenColors)) {\n            this.addCustomTokenColors(themeSpecificTokenColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    setCustomSemanticTokenColors(semanticTokenColors) {\n        this.customSemanticTokenRules = [];\n        this.customSemanticHighlighting = undefined;\n        if (semanticTokenColors) {\n            this.customSemanticHighlighting = semanticTokenColors.enabled;\n            if (semanticTokenColors.rules) {\n                this.readSemanticTokenRules(semanticTokenColors.rules);\n            }\n            const themeSpecificColors = this.getThemeSpecificColors(semanticTokenColors);\n            if (isObject(themeSpecificColors)) {\n                if (themeSpecificColors.enabled !== undefined) {\n                    this.customSemanticHighlighting = themeSpecificColors.enabled;\n                }\n                if (themeSpecificColors.rules) {\n                    this.readSemanticTokenRules(themeSpecificColors.rules);\n                }\n            }\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n    }\n    isThemeScope(key) {\n        return key.charAt(0) === THEME_SCOPE_OPEN_PAREN && key.charAt(key.length - 1) === THEME_SCOPE_CLOSE_PAREN;\n    }\n    isThemeScopeMatch(themeId) {\n        const themeIdFirstChar = themeId.charAt(0);\n        const themeIdLastChar = themeId.charAt(themeId.length - 1);\n        const themeIdPrefix = themeId.slice(0, -1);\n        const themeIdInfix = themeId.slice(1, -1);\n        const themeIdSuffix = themeId.slice(1);\n        return themeId === this.settingsId\n            || (this.settingsId.includes(themeIdInfix) && themeIdFirstChar === THEME_SCOPE_WILDCARD && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.startsWith(themeIdPrefix) && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.endsWith(themeIdSuffix) && themeIdFirstChar === THEME_SCOPE_WILDCARD);\n    }\n    getThemeSpecificColors(colors) {\n        let themeSpecificColors;\n        for (const key in colors) {\n            const scopedColors = colors[key];\n            if (this.isThemeScope(key) && scopedColors instanceof Object && !Array.isArray(scopedColors)) {\n                const themeScopeList = key.match(themeScopeRegex) || [];\n                for (const themeScope of themeScopeList) {\n                    const themeId = themeScope.substring(1, themeScope.length - 1);\n                    if (this.isThemeScopeMatch(themeId)) {\n                        if (!themeSpecificColors) {\n                            themeSpecificColors = {};\n                        }\n                        const scopedThemeSpecificColors = scopedColors;\n                        for (const subkey in scopedThemeSpecificColors) {\n                            const originalColors = themeSpecificColors[subkey];\n                            const overrideColors = scopedThemeSpecificColors[subkey];\n                            if (Array.isArray(originalColors) && Array.isArray(overrideColors)) {\n                                themeSpecificColors[subkey] = originalColors.concat(overrideColors);\n                            }\n                            else if (overrideColors) {\n                                themeSpecificColors[subkey] = overrideColors;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return themeSpecificColors;\n    }\n    readSemanticTokenRules(tokenStylingRuleSection) {\n        for (const key in tokenStylingRuleSection) {\n            if (!this.isThemeScope(key)) {\n                try {\n                    const rule = readSemanticTokenRule(key, tokenStylingRuleSection[key]);\n                    if (rule) {\n                        this.customSemanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                }\n            }\n        }\n    }\n    addCustomTokenColors(customTokenColors) {\n        for (const tokenGroup in tokenGroupToScopesMap) {\n            const group = tokenGroup;\n            const value = customTokenColors[group];\n            if (value) {\n                const settings = typeof value === 'string' ? { foreground: value } : value;\n                const scopes = tokenGroupToScopesMap[group];\n                for (const scope of scopes) {\n                    this.customTokenColors.push({ scope, settings });\n                }\n            }\n        }\n        if (Array.isArray(customTokenColors.textMateRules)) {\n            for (const rule of customTokenColors.textMateRules) {\n                if (rule.scope && rule.settings) {\n                    this.customTokenColors.push(rule);\n                }\n            }\n        }\n        if (customTokenColors.semanticHighlighting !== undefined) {\n            this.customSemanticHighlightingDeprecated = customTokenColors.semanticHighlighting;\n        }\n    }\n    ensureLoaded(extensionResourceLoaderService) {\n        return !this.isLoaded ? this.load(extensionResourceLoaderService) : Promise.resolve(undefined);\n    }\n    reload(extensionResourceLoaderService) {\n        return this.load(extensionResourceLoaderService);\n    }\n    load(extensionResourceLoaderService) {\n        if (!this.location) {\n            return Promise.resolve(undefined);\n        }\n        this.themeTokenColors = [];\n        this.clearCaches();\n        const result = {\n            colors: {},\n            textMateRules: [],\n            semanticTokenRules: [],\n            semanticHighlighting: false\n        };\n        return _loadColorTheme(extensionResourceLoaderService, this.location, result).then(_ => {\n            this.isLoaded = true;\n            this.semanticTokenRules = result.semanticTokenRules;\n            this.colorMap = result.colors;\n            this.themeTokenColors = result.textMateRules;\n            this.themeSemanticHighlighting = result.semanticHighlighting;\n        });\n    }\n    clearCaches() {\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.themeTokenScopeMatchers = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    toStorage(storageService) {\n        const colorMapData = {};\n        for (const key in this.colorMap) {\n            colorMapData[key] = Color.Format.CSS.formatHexA(this.colorMap[key], true);\n        }\n        const value = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            settingsId: this.settingsId,\n            themeTokenColors: ( this.themeTokenColors.map(tc => ({ settings: tc.settings, scope: tc.scope }))),\n            semanticTokenRules: ( this.semanticTokenRules.map(SemanticTokenRule.toJSONObject)),\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            themeSemanticHighlighting: this.themeSemanticHighlighting,\n            colorMap: colorMapData,\n            watch: this.watch\n        });\n        storageService.store(ColorThemeData.STORAGE_KEY, value, 0 , 0 );\n    }\n    get baseTheme() {\n        return this.classNames[0];\n    }\n    get classNames() {\n        return this.id.split(' ');\n    }\n    get type() {\n        switch (this.baseTheme) {\n            case VS_LIGHT_THEME: return ColorScheme.LIGHT;\n            case VS_HC_THEME: return ColorScheme.HIGH_CONTRAST_DARK;\n            case VS_HC_LIGHT_THEME: return ColorScheme.HIGH_CONTRAST_LIGHT;\n            default: return ColorScheme.DARK;\n        }\n    }\n    static createUnloadedThemeForThemeType(themeType, colorMap) {\n        return ColorThemeData.createUnloadedTheme(getThemeTypeSelector(themeType), colorMap);\n    }\n    static createUnloadedTheme(id, colorMap) {\n        const themeData = ( new ColorThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        if (colorMap) {\n            for (const id in colorMap) {\n                themeData.colorMap[id] = ( Color.fromHex(colorMap[id]));\n            }\n        }\n        return themeData;\n    }\n    static createLoadedEmptyTheme(id, settingsId) {\n        const themeData = ( new ColorThemeData(id, '', settingsId));\n        themeData.isLoaded = true;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ColorThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new ColorThemeData('', '', ''));\n            for (const key in data) {\n                switch (key) {\n                    case 'colorMap': {\n                        const colorMapData = data[key];\n                        for (const id in colorMapData) {\n                            theme.colorMap[id] = ( Color.fromHex(colorMapData[id]));\n                        }\n                        break;\n                    }\n                    case 'themeTokenColors':\n                    case 'id':\n                    case 'label':\n                    case 'settingsId':\n                    case 'watch':\n                    case 'themeSemanticHighlighting':\n                        theme[key] = data[key];\n                        break;\n                    case 'semanticTokenRules': {\n                        const rulesData = data[key];\n                        if (Array.isArray(rulesData)) {\n                            for (const d of rulesData) {\n                                const rule = SemanticTokenRule.fromJSONObject(tokenClassificationRegistry, d);\n                                if (rule) {\n                                    theme.semanticTokenRules.push(rule);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            if (!theme.id || !theme.settingsId) {\n                return undefined;\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    static fromExtensionTheme(theme, colorThemeLocation, extensionData) {\n        const baseTheme = theme['uiTheme'] || 'vs-dark';\n        const themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n        const id = `${baseTheme} ${themeSelector}`;\n        const label = theme.label || basename(theme.path);\n        const settingsId = theme.id || label;\n        const themeData = ( new ColorThemeData(id, label, settingsId));\n        themeData.description = theme.description;\n        themeData.watch = theme._watch === true;\n        themeData.location = colorThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n}\nfunction toCSSSelector(extensionId, path) {\n    if (path.startsWith('./')) {\n        path = path.substr(2);\n    }\n    let str = `${extensionId}-${path}`;\n    str = str.replace(/[^_a-zA-Z0-9-]/g, '-');\n    if (str.charAt(0).match(/[0-9-]/)) {\n        str = '_' + str;\n    }\n    return str;\n}\nasync function _loadColorTheme(extensionResourceLoaderService, themeLocation, result) {\n    if (extname(themeLocation) === '.json') {\n        const content = await extensionResourceLoaderService.readExtensionResource(themeLocation);\n        const errors = [];\n        const contentValue = parse(content, errors);\n        if (errors.length > 0) {\n            return Promise.reject(( new Error(( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeData',\n                'error.cannotparsejson',\n                \"Problems parsing JSON theme file: {0}\",\n                ( errors.map(e => getParseErrorMessage(e.error))).join(', ')\n            )))));\n        }\n        else if (getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( new Error(( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeData',\n                'error.invalidformat',\n                \"Invalid format for JSON theme file: Object expected.\"\n            )))));\n        }\n        if (contentValue.include) {\n            await _loadColorTheme(extensionResourceLoaderService, joinPath(dirname(themeLocation), contentValue.include), result);\n        }\n        if (Array.isArray(contentValue.settings)) {\n            convertSettings(contentValue.settings, result);\n            return null;\n        }\n        result.semanticHighlighting = result.semanticHighlighting || contentValue.semanticHighlighting;\n        const colors = contentValue.colors;\n        if (colors) {\n            if (typeof colors !== 'object') {\n                return Promise.reject(( new Error(( localizeWithPath(\n                    'vs/workbench/services/themes/common/colorThemeData',\n                    { key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                    \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\",\n                    ( themeLocation.toString())\n                )))));\n            }\n            for (const colorId in colors) {\n                const colorHex = colors[colorId];\n                if (typeof colorHex === 'string') {\n                    result.colors[colorId] = ( Color.fromHex(colors[colorId]));\n                }\n            }\n        }\n        const tokenColors = contentValue.tokenColors;\n        if (tokenColors) {\n            if (Array.isArray(tokenColors)) {\n                result.textMateRules.push(...tokenColors);\n            }\n            else if (typeof tokenColors === 'string') {\n                await _loadSyntaxTokens(extensionResourceLoaderService, joinPath(dirname(themeLocation), tokenColors), result);\n            }\n            else {\n                return Promise.reject(( new Error(( localizeWithPath(\n                    'vs/workbench/services/themes/common/colorThemeData',\n                    { key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                    \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\",\n                    ( themeLocation.toString())\n                )))));\n            }\n        }\n        const semanticTokenColors = contentValue.semanticTokenColors;\n        if (semanticTokenColors && typeof semanticTokenColors === 'object') {\n            for (const key in semanticTokenColors) {\n                try {\n                    const rule = readSemanticTokenRule(key, semanticTokenColors[key]);\n                    if (rule) {\n                        result.semanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                    return Promise.reject(( new Error(( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeData',\n                        { key: 'error.invalidformat.semanticTokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                        \"Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector\",\n                        ( themeLocation.toString())\n                    )))));\n                }\n            }\n        }\n    }\n    else {\n        return _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result);\n    }\n}\nfunction _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result) {\n    return extensionResourceLoaderService.readExtensionResource(themeLocation).then(content => {\n        try {\n            const contentValue = parse$1(content);\n            const settings = contentValue.settings;\n            if (!Array.isArray(settings)) {\n                return Promise.reject(( new Error(( localizeWithPath(\n                    'vs/workbench/services/themes/common/colorThemeData',\n                    'error.plist.invalidformat',\n                    \"Problem parsing tmTheme file: {0}. 'settings' is not array.\"\n                )))));\n            }\n            convertSettings(settings, result);\n            return Promise.resolve(null);\n        }\n        catch (e) {\n            return Promise.reject(( new Error(( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeData',\n                'error.cannotparse',\n                \"Problems parsing tmTheme file: {0}\",\n                e.message\n            )))));\n        }\n    }, error => {\n        return Promise.reject(( new Error(( localizeWithPath(\n            'vs/workbench/services/themes/common/colorThemeData',\n            'error.cannotload',\n            \"Problems loading tmTheme file {0}: {1}\",\n            ( themeLocation.toString()),\n            error.message\n        )))));\n    });\n}\nconst defaultThemeColors = {\n    'light': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'dark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#f44747' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n    'hcLight': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'hcDark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#008000' } },\n        { scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ]\n};\nconst noMatch = (_scope) => -1;\nfunction nameMatcher(identifers, scope) {\n    function findInIdents(s, lastIndent) {\n        for (let i = lastIndent - 1; i >= 0; i--) {\n            if (scopesAreMatching(s, identifers[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    if (scope.length < identifers.length) {\n        return -1;\n    }\n    let lastScopeIndex = scope.length - 1;\n    let lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], identifers.length);\n    if (lastIdentifierIndex >= 0) {\n        const score = (lastIdentifierIndex + 1) * 0x10000 + identifers[lastIdentifierIndex].length;\n        while (lastScopeIndex >= 0) {\n            lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], lastIdentifierIndex);\n            if (lastIdentifierIndex === -1) {\n                return -1;\n            }\n        }\n        return score;\n    }\n    return -1;\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nfunction getScopeMatcher(rule) {\n    const ruleScope = rule.scope;\n    if (!ruleScope || !rule.settings) {\n        return noMatch;\n    }\n    const matchers = [];\n    if (Array.isArray(ruleScope)) {\n        for (const rs of ruleScope) {\n            createMatchers(rs, nameMatcher, matchers);\n        }\n    }\n    else {\n        createMatchers(ruleScope, nameMatcher, matchers);\n    }\n    if (matchers.length === 0) {\n        return noMatch;\n    }\n    return (scope) => {\n        let max = matchers[0].matcher(scope);\n        for (let i = 1; i < matchers.length; i++) {\n            max = Math.max(max, matchers[i].matcher(scope));\n        }\n        return max;\n    };\n}\nfunction readSemanticTokenRule(selectorString, settings) {\n    const selector = tokenClassificationRegistry.parseTokenSelector(selectorString);\n    let style;\n    if (typeof settings === 'string') {\n        style = TokenStyle.fromSettings(settings, undefined);\n    }\n    else if (isSemanticTokenColorizationSetting(settings)) {\n        style = TokenStyle.fromSettings(settings.foreground, settings.fontStyle, settings.bold, settings.underline, settings.strikethrough, settings.italic);\n    }\n    if (style) {\n        return { selector, style };\n    }\n    return undefined;\n}\nfunction isSemanticTokenColorizationSetting(style) {\n    return style && (isString(style.foreground) || isString(style.fontStyle) || isBoolean(style.italic)\n        || isBoolean(style.underline) || isBoolean(style.strikethrough) || isBoolean(style.bold));\n}\nclass TokenColorIndex {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n    }\n    add(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    get(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        const value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        console.log(`Color ${color} not in index.`);\n        return 0;\n    }\n    asArray() {\n        return this._id2color.slice(0);\n    }\n}\nfunction normalizeColor(color) {\n    if (!color) {\n        return undefined;\n    }\n    if (typeof color !== 'string') {\n        color = Color.Format.CSS.formatHexA(color, true);\n    }\n    const len = color.length;\n    if (color.charCodeAt(0) !== 35  || (len !== 4 && len !== 5 && len !== 7 && len !== 9)) {\n        return undefined;\n    }\n    const result = [35 ];\n    for (let i = 1; i < len; i++) {\n        const upper = hexUpper(color.charCodeAt(i));\n        if (!upper) {\n            return undefined;\n        }\n        result.push(upper);\n        if (len === 4 || len === 5) {\n            result.push(upper);\n        }\n    }\n    if (result.length === 9 && result[7] === 70  && result[8] === 70 ) {\n        result.length = 7;\n    }\n    return String.fromCharCode(...result);\n}\nfunction hexUpper(charCode) {\n    if (charCode >= 48  && charCode <= 57  || charCode >= 65  && charCode <= 70 ) {\n        return charCode;\n    }\n    else if (charCode >= 97  && charCode <= 102 ) {\n        return charCode - 97  + 65 ;\n    }\n    return 0;\n}\n\nexport { ColorThemeData };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { iconsSchemaId } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\n\nconst fontIdRegex = '^([\\\\w_-]+)$';\nconst fontStyleRegex = '^(normal|italic|(oblique[ \\\\w\\\\s-]+))$';\nconst fontWeightRegex = '^(normal|bold|lighter|bolder|(\\\\d{0-1000}))$';\nconst fontSizeRegex = '^([\\\\w .%_-]+)$';\nconst fontFormatRegex = '^woff|woff2|truetype|opentype|embedded-opentype|svg$';\nconst schemaId = 'vscode://schemas/product-icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        fonts: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/productIconThemeSchema',\n                            'schema.id',\n                            'The ID of the font.'\n                        )),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/productIconThemeSchema',\n                            'schema.id.formatError',\n                            'The ID must only contain letters, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/productIconThemeSchema',\n                            'schema.src',\n                            'The location of the font.'\n                        )),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(\n                                        'vs/workbench/services/themes/common/productIconThemeSchema',\n                                        'schema.font-path',\n                                        'The font path, relative to the current product icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(\n                                        'vs/workbench/services/themes/common/productIconThemeSchema',\n                                        'schema.font-format',\n                                        'The format of the font.'\n                                    )),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/productIconThemeSchema',\n                            'schema.font-weight',\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'bold', 'lighter', 'bolder'] },\n                            { type: 'string', pattern: fontWeightRegex }\n                        ]\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/productIconThemeSchema',\n                            'schema.font-style',\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'italic', 'oblique'] },\n                            { type: 'string', pattern: fontStyleRegex }\n                        ]\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/productIconThemeSchema',\n                'schema.iconDefinitions',\n                'Association of icon name to a font character.'\n            )),\n            $ref: iconsSchemaId\n        }\n    }\n};\nfunction registerProductIconThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\n\nexport { fontFormatRegex, fontIdRegex, fontSizeRegex, fontStyleRegex, fontWeightRegex, registerProductIconThemeSchemas };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontSizeRegex } from './productIconThemeSchema.js';\n\nconst schemaId = 'vscode://schemas/icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    definitions: {\n        folderExpanded: {\n            type: 'string',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.folderExpanded',\n                'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.'\n            ))\n        },\n        folder: {\n            type: 'string',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.folder',\n                'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.'\n            ))\n        },\n        file: {\n            type: 'string',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.file',\n                'The default file icon, shown for all files that don\\'t match any extension, filename or language id.'\n            ))\n        },\n        rootFolder: {\n            type: 'string',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.rootFolder',\n                'The folder icon for collapsed root folders, and if rootFolderExpanded is not set, also for expanded root folders.'\n            ))\n        },\n        rootFolderExpanded: {\n            type: 'string',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.rootFolderExpanded',\n                'The folder icon for expanded root folders. The expanded root folder icon is optional. If not set, the icon defined for root folder will be shown.'\n            ))\n        },\n        rootFolderNames: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.rootFolderNames',\n                'Associates root folder names to icons. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.folderName',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        rootFolderNamesExpanded: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.rootFolderNamesExpanded',\n                'Associates root folder names to icons for expanded root folders. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.rootFolderNameExpanded',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        folderNames: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.folderNames',\n                'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.folderName',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        folderNamesExpanded: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.folderNamesExpanded',\n                'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.folderNameExpanded',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        fileExtensions: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.fileExtensions',\n                'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.fileExtension',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        fileNames: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.fileNames',\n                'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.fileName',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        languageIds: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.languageIds',\n                'Associates languages to icons. The object key is the language id as defined in the language contribution point.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.languageId',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        associations: {\n            type: 'object',\n            properties: {\n                folderExpanded: {\n                    $ref: '#/definitions/folderExpanded'\n                },\n                folder: {\n                    $ref: '#/definitions/folder'\n                },\n                file: {\n                    $ref: '#/definitions/file'\n                },\n                folderNames: {\n                    $ref: '#/definitions/folderNames'\n                },\n                folderNamesExpanded: {\n                    $ref: '#/definitions/folderNamesExpanded'\n                },\n                rootFolder: {\n                    $ref: '#/definitions/rootFolder'\n                },\n                rootFolderExpanded: {\n                    $ref: '#/definitions/rootFolderExpanded'\n                },\n                rootFolderNames: {\n                    $ref: '#/definitions/rootFolderNames'\n                },\n                rootFolderNamesExpanded: {\n                    $ref: '#/definitions/rootFolderNamesExpanded'\n                },\n                fileExtensions: {\n                    $ref: '#/definitions/fileExtensions'\n                },\n                fileNames: {\n                    $ref: '#/definitions/fileNames'\n                },\n                languageIds: {\n                    $ref: '#/definitions/languageIds'\n                }\n            }\n        }\n    },\n    properties: {\n        fonts: {\n            type: 'array',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.fonts',\n                'Fonts that are used in the icon definitions.'\n            )),\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.id',\n                            'The ID of the font.'\n                        )),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.id.formatError',\n                            'The ID must only contain letter, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.src',\n                            'The location of the font.'\n                        )),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(\n                                        'vs/workbench/services/themes/common/fileIconThemeSchema',\n                                        'schema.font-path',\n                                        'The font path, relative to the current file icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( localizeWithPath(\n                                        'vs/workbench/services/themes/common/fileIconThemeSchema',\n                                        'schema.font-format',\n                                        'The format of the font.'\n                                    )),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.font-weight',\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        pattern: fontWeightRegex\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.font-style',\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        pattern: fontStyleRegex\n                    },\n                    size: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.font-size',\n                            'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'\n                        )),\n                        pattern: fontSizeRegex\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.iconDefinitions',\n                'Description of all icons that can be used when associating files to icons.'\n            )),\n            additionalProperties: {\n                type: 'object',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/fileIconThemeSchema',\n                    'schema.iconDefinition',\n                    'An icon definition. The object key is the ID of the definition.'\n                )),\n                properties: {\n                    iconPath: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.iconPath',\n                            'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.'\n                        ))\n                    },\n                    fontCharacter: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.fontCharacter',\n                            'When using a glyph font: The character in the font to use.'\n                        ))\n                    },\n                    fontColor: {\n                        type: 'string',\n                        format: 'color-hex',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.fontColor',\n                            'When using a glyph font: The color to use.'\n                        ))\n                    },\n                    fontSize: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.fontSize',\n                            'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'\n                        )),\n                        pattern: fontSizeRegex\n                    },\n                    fontId: {\n                        type: 'string',\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/fileIconThemeSchema',\n                            'schema.fontId',\n                            'When using a font: The id of the font. If not set, defaults to the first font definition.'\n                        ))\n                    }\n                }\n            }\n        },\n        folderExpanded: {\n            $ref: '#/definitions/folderExpanded'\n        },\n        folder: {\n            $ref: '#/definitions/folder'\n        },\n        file: {\n            $ref: '#/definitions/file'\n        },\n        folderNames: {\n            $ref: '#/definitions/folderNames'\n        },\n        folderNamesExpanded: {\n            $ref: '#/definitions/folderNamesExpanded'\n        },\n        rootFolder: {\n            $ref: '#/definitions/rootFolder'\n        },\n        rootFolderExpanded: {\n            $ref: '#/definitions/rootFolderExpanded'\n        },\n        rootFolderNames: {\n            $ref: '#/definitions/rootFolderNames'\n        },\n        rootFolderNamesExpanded: {\n            $ref: '#/definitions/rootFolderNamesExpanded'\n        },\n        fileExtensions: {\n            $ref: '#/definitions/fileExtensions'\n        },\n        fileNames: {\n            $ref: '#/definitions/fileNames'\n        },\n        languageIds: {\n            $ref: '#/definitions/languageIds'\n        },\n        light: {\n            $ref: '#/definitions/associations',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.light',\n                'Optional associations for file icons in light color themes.'\n            ))\n        },\n        highContrast: {\n            $ref: '#/definitions/associations',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.highContrast',\n                'Optional associations for file icons in high contrast color themes.'\n            ))\n        },\n        hidesExplorerArrows: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.hidesExplorerArrows',\n                'Configures whether the file explorer\\'s arrows should be hidden when this theme is active.'\n            ))\n        },\n        showLanguageModeIcons: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/fileIconThemeSchema',\n                'schema.showLanguageModeIcons',\n                'Configures whether the default language icons should be used if the theme does not define an icon for a language.'\n            ))\n        }\n    }\n};\nfunction registerFileIconThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\n\nexport { registerFileIconThemeSchemas };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { basename } from 'vscode/vscode/vs/base/common/path';\nimport { dirname, joinPath } from 'vscode/vscode/vs/base/common/resources';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { asCSSUrl } from 'vscode/vscode/vs/base/browser/dom';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\n\nclass FileIconThemeData {\n    static { this.STORAGE_KEY = 'iconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n        this.hasFileIcons = false;\n        this.hasFolderIcons = false;\n        this.hidesExplorerArrows = false;\n    }\n    ensureLoaded(themeLoader) {\n        return !this.isLoaded ? this.load(themeLoader) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(themeLoader) {\n        return this.load(themeLoader);\n    }\n    load(themeLoader) {\n        return themeLoader.load(this);\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( new FileIconThemeData(id, label, settingsId));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static { this._noIconTheme = null; }\n    static get noIconTheme() {\n        let themeData = FileIconThemeData._noIconTheme;\n        if (!themeData) {\n            themeData = FileIconThemeData._noIconTheme = ( new FileIconThemeData('', '', null));\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( new FileIconThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.hasFileIcons = false;\n        themeData.hasFolderIcons = false;\n        themeData.hidesExplorerArrows = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(FileIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new FileIconThemeData('', '', null));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'hasFileIcons':\n                    case 'hidesExplorerArrows':\n                    case 'hasFolderIcons':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            hasFileIcons: this.hasFileIcons,\n            hasFolderIcons: this.hasFolderIcons,\n            hidesExplorerArrows: this.hidesExplorerArrows,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            watch: this.watch\n        });\n        storageService.store(FileIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nclass FileIconThemeLoader {\n    constructor(fileService, languageService) {\n        this.fileService = fileService;\n        this.languageService = languageService;\n    }\n    load(data) {\n        if (!data.location) {\n            return Promise.resolve(data.styleSheetContent);\n        }\n        return this.loadIconThemeDocument(data.location).then(iconThemeDocument => {\n            const result = this.processIconThemeDocument(data.id, data.location, iconThemeDocument);\n            data.styleSheetContent = result.content;\n            data.hasFileIcons = result.hasFileIcons;\n            data.hasFolderIcons = result.hasFolderIcons;\n            data.hidesExplorerArrows = result.hidesExplorerArrows;\n            data.isLoaded = true;\n            return data.styleSheetContent;\n        });\n    }\n    loadIconThemeDocument(location) {\n        return this.fileService.readExtensionResource(location).then((content) => {\n            const errors = [];\n            const contentValue = parse(content, errors);\n            if (errors.length > 0) {\n                return Promise.reject(( new Error(( localizeWithPath(\n                    'vs/workbench/services/themes/browser/fileIconThemeData',\n                    'error.cannotparseicontheme',\n                    \"Problems parsing file icons file: {0}\",\n                    ( errors.map(e => getParseErrorMessage(e.error))).join(', ')\n                )))));\n            }\n            else if (getNodeType(contentValue) !== 'object') {\n                return Promise.reject(( new Error(( localizeWithPath(\n                    'vs/workbench/services/themes/browser/fileIconThemeData',\n                    'error.invalidformat',\n                    \"Invalid format for file icons theme file: Object expected.\"\n                )))));\n            }\n            return Promise.resolve(contentValue);\n        });\n    }\n    processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n        const result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n        let hasSpecificFileIcons = false;\n        if (!iconThemeDocument.iconDefinitions) {\n            return result;\n        }\n        const selectorByDefinitionId = {};\n        const coveredLanguages = {};\n        const iconThemeDocumentLocationDirname = dirname(iconThemeDocumentLocation);\n        function resolvePath(path) {\n            return joinPath(iconThemeDocumentLocationDirname, path);\n        }\n        function collectSelectors(associations, baseThemeClassName) {\n            function addSelector(selector, defId) {\n                if (defId) {\n                    let list = selectorByDefinitionId[defId];\n                    if (!list) {\n                        list = selectorByDefinitionId[defId] = [];\n                    }\n                    list.push(selector);\n                }\n            }\n            if (associations) {\n                let qualifier = '.show-file-icons';\n                if (baseThemeClassName) {\n                    qualifier = baseThemeClassName + ' ' + qualifier;\n                }\n                const expanded = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents';\n                if (associations.folder) {\n                    addSelector(`${qualifier} .folder-icon::before`, associations.folder);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.folderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                const rootFolder = associations.rootFolder || associations.folder;\n                const rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n                if (rootFolder) {\n                    addSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n                    result.hasFolderIcons = true;\n                }\n                if (rootFolderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.file) {\n                    addSelector(`${qualifier} .file-icon::before`, associations.file);\n                    result.hasFileIcons = true;\n                }\n                const folderNames = associations.folderNames;\n                if (folderNames) {\n                    for (const key in folderNames) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${selectors.join('')}.folder-icon::before`, folderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const folderNamesExpanded = associations.folderNamesExpanded;\n                if (folderNamesExpanded) {\n                    for (const key in folderNamesExpanded) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${expanded} ${selectors.join('')}.folder-icon::before`, folderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const rootFolderNames = associations.rootFolderNames;\n                if (rootFolderNames) {\n                    for (const key in rootFolderNames) {\n                        const name = key.toLowerCase();\n                        addSelector(`${qualifier} .${escapeCSS(name)}-root-name-folder-icon.rootfolder-icon::before`, rootFolderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const rootFolderNamesExpanded = associations.rootFolderNamesExpanded;\n                if (rootFolderNamesExpanded) {\n                    for (const key in rootFolderNamesExpanded) {\n                        const name = key.toLowerCase();\n                        addSelector(`${qualifier} ${expanded} .${escapeCSS(name)}-root-name-folder-icon.rootfolder-icon::before`, rootFolderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const languageIds = associations.languageIds;\n                if (languageIds) {\n                    if (!languageIds.jsonc && languageIds.json) {\n                        languageIds.jsonc = languageIds.json;\n                    }\n                    for (const languageId in languageIds) {\n                        addSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                        coveredLanguages[languageId] = true;\n                    }\n                }\n                const fileExtensions = associations.fileExtensions;\n                if (fileExtensions) {\n                    for (const key in fileExtensions) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        const segments = name.split('.');\n                        if (segments.length) {\n                            for (let i = 0; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n                const fileNames = associations.fileNames;\n                if (fileNames) {\n                    for (const key in fileNames) {\n                        const selectors = [];\n                        const fileName = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n                        selectors.push('.name-file-icon');\n                        const segments = fileName.split('.');\n                        if (segments.length) {\n                            for (let i = 1; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n            }\n        }\n        collectSelectors(iconThemeDocument);\n        collectSelectors(iconThemeDocument.light, '.vs');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-light');\n        if (!result.hasFileIcons && !result.hasFolderIcons) {\n            return result;\n        }\n        const showLanguageModeIcons = iconThemeDocument.showLanguageModeIcons === true || (hasSpecificFileIcons && iconThemeDocument.showLanguageModeIcons !== false);\n        const cssRules = [];\n        const fonts = iconThemeDocument.fonts;\n        const fontSizes = ( new Map());\n        if (Array.isArray(fonts)) {\n            const defaultFontSize = fonts[0].size || '150%';\n            fonts.forEach(font => {\n                const src = ( font.src.map(l => `${asCSSUrl(resolvePath(l.path))} format('${l.format}')`)).join(', ');\n                cssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; font-display: block; }`);\n                if (font.size !== undefined && font.size !== defaultFontSize) {\n                    fontSizes.set(font.id, font.size);\n                }\n            });\n            cssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${defaultFontSize}; }`);\n        }\n        for (const defId in selectorByDefinitionId) {\n            const selectors = selectorByDefinitionId[defId];\n            const definition = iconThemeDocument.iconDefinitions[defId];\n            if (definition) {\n                if (definition.iconPath) {\n                    cssRules.push(`${selectors.join(', ')} { content: ' '; background-image: ${asCSSUrl(resolvePath(definition.iconPath))}; }`);\n                }\n                else if (definition.fontCharacter || definition.fontColor) {\n                    const body = [];\n                    if (definition.fontColor) {\n                        body.push(`color: ${definition.fontColor};`);\n                    }\n                    if (definition.fontCharacter) {\n                        body.push(`content: '${definition.fontCharacter}';`);\n                    }\n                    const fontSize = definition.fontSize ?? (definition.fontId ? fontSizes.get(definition.fontId) : undefined);\n                    if (fontSize) {\n                        body.push(`font-size: ${fontSize};`);\n                    }\n                    if (definition.fontId) {\n                        body.push(`font-family: ${definition.fontId};`);\n                    }\n                    if (showLanguageModeIcons) {\n                        body.push(`background-image: unset;`);\n                    }\n                    cssRules.push(`${selectors.join(', ')} { ${body.join(' ')} }`);\n                }\n            }\n        }\n        if (showLanguageModeIcons) {\n            for (const languageId of this.languageService.getRegisteredLanguageIds()) {\n                if (!coveredLanguages[languageId]) {\n                    const icon = this.languageService.getIcon(languageId);\n                    if (icon) {\n                        const selector = `.show-file-icons .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`;\n                        cssRules.push(`${selector} { content: ' '; background-image: ${asCSSUrl(icon.dark)}; }`);\n                        cssRules.push(`.vs ${selector} { content: ' '; background-image: ${asCSSUrl(icon.light)}; }`);\n                    }\n                }\n            }\n        }\n        result.content = cssRules.join('\\n');\n        return result;\n    }\n}\nfunction handleParentFolder(key, selectors) {\n    const lastIndexOfSlash = key.lastIndexOf('/');\n    if (lastIndexOfSlash >= 0) {\n        const parentFolder = key.substring(0, lastIndexOfSlash);\n        selectors.push(`.${escapeCSS(parentFolder)}-name-dir-icon`);\n        return key.substring(lastIndexOfSlash + 1);\n    }\n    return key;\n}\nfunction escapeCSS(str) {\n    str = str.replace(/[\\11\\12\\14\\15\\40]/g, '/');\n    return mainWindow.CSS.escape(str);\n}\n\nexport { FileIconThemeData, FileIconThemeLoader };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { workbenchColorsSchemaId } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';\nimport { tokenStylingSchemaId } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\n\nconst textMateScopes = [\n    'comment',\n    'comment.block',\n    'comment.block.documentation',\n    'comment.line',\n    'constant',\n    'constant.character',\n    'constant.character.escape',\n    'constant.numeric',\n    'constant.numeric.integer',\n    'constant.numeric.float',\n    'constant.numeric.hex',\n    'constant.numeric.octal',\n    'constant.other',\n    'constant.regexp',\n    'constant.rgb-value',\n    'emphasis',\n    'entity',\n    'entity.name',\n    'entity.name.class',\n    'entity.name.function',\n    'entity.name.method',\n    'entity.name.section',\n    'entity.name.selector',\n    'entity.name.tag',\n    'entity.name.type',\n    'entity.other',\n    'entity.other.attribute-name',\n    'entity.other.inherited-class',\n    'invalid',\n    'invalid.deprecated',\n    'invalid.illegal',\n    'keyword',\n    'keyword.control',\n    'keyword.operator',\n    'keyword.operator.new',\n    'keyword.operator.assignment',\n    'keyword.operator.arithmetic',\n    'keyword.operator.logical',\n    'keyword.other',\n    'markup',\n    'markup.bold',\n    'markup.changed',\n    'markup.deleted',\n    'markup.heading',\n    'markup.inline.raw',\n    'markup.inserted',\n    'markup.italic',\n    'markup.list',\n    'markup.list.numbered',\n    'markup.list.unnumbered',\n    'markup.other',\n    'markup.quote',\n    'markup.raw',\n    'markup.underline',\n    'markup.underline.link',\n    'meta',\n    'meta.block',\n    'meta.cast',\n    'meta.class',\n    'meta.function',\n    'meta.function-call',\n    'meta.preprocessor',\n    'meta.return-type',\n    'meta.selector',\n    'meta.tag',\n    'meta.type.annotation',\n    'meta.type',\n    'punctuation.definition.string.begin',\n    'punctuation.definition.string.end',\n    'punctuation.separator',\n    'punctuation.separator.continuation',\n    'punctuation.terminator',\n    'storage',\n    'storage.modifier',\n    'storage.type',\n    'string',\n    'string.interpolated',\n    'string.other',\n    'string.quoted',\n    'string.quoted.double',\n    'string.quoted.other',\n    'string.quoted.single',\n    'string.quoted.triple',\n    'string.regexp',\n    'string.unquoted',\n    'strong',\n    'support',\n    'support.class',\n    'support.constant',\n    'support.function',\n    'support.other',\n    'support.type',\n    'support.type.property-name',\n    'support.variable',\n    'variable',\n    'variable.language',\n    'variable.name',\n    'variable.other',\n    'variable.other.readwrite',\n    'variable.parameter'\n];\nconst textmateColorsSchemaId = 'vscode://schemas/textmate-colors';\nconst textmateColorGroupSchemaId = `${textmateColorsSchemaId}#/definitions/colorGroup`;\nconst textmateColorSchema = {\n    type: 'array',\n    definitions: {\n        colorGroup: {\n            default: '#FF0000',\n            anyOf: [\n                {\n                    type: 'string',\n                    format: 'color-hex'\n                },\n                {\n                    $ref: '#/definitions/settings'\n                }\n            ]\n        },\n        settings: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeSchema',\n                'schema.token.settings',\n                'Colors and styles for the token.'\n            )),\n            properties: {\n                foreground: {\n                    type: 'string',\n                    description: ( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeSchema',\n                        'schema.token.foreground',\n                        'Foreground color for the token.'\n                    )),\n                    format: 'color-hex',\n                    default: '#ff0000'\n                },\n                background: {\n                    type: 'string',\n                    deprecationMessage: ( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeSchema',\n                        'schema.token.background.warning',\n                        'Token background colors are currently not supported.'\n                    ))\n                },\n                fontStyle: {\n                    type: 'string',\n                    description: ( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeSchema',\n                        'schema.token.fontStyle',\n                        'Font style of the rule: \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination. The empty string unsets inherited settings.'\n                    )),\n                    pattern: '^(\\\\s*\\\\b(italic|bold|underline|strikethrough))*\\\\s*$',\n                    patternErrorMessage: ( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeSchema',\n                        'schema.fontStyle.error',\n                        'Font style must be \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination or the empty string.'\n                    )),\n                    defaultSnippets: [\n                        { label: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/colorThemeSchema',\n                            'schema.token.fontStyle.none',\n                            'None (clear inherited style)'\n                        )), bodyText: '\"\"' },\n                        { body: 'italic' },\n                        { body: 'bold' },\n                        { body: 'underline' },\n                        { body: 'strikethrough' },\n                        { body: 'italic bold' },\n                        { body: 'italic underline' },\n                        { body: 'italic strikethrough' },\n                        { body: 'bold underline' },\n                        { body: 'bold strikethrough' },\n                        { body: 'underline strikethrough' },\n                        { body: 'italic bold underline' },\n                        { body: 'italic bold strikethrough' },\n                        { body: 'italic underline strikethrough' },\n                        { body: 'bold underline strikethrough' },\n                        { body: 'italic bold underline strikethrough' }\n                    ]\n                }\n            },\n            additionalProperties: false,\n            defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n        }\n    },\n    items: {\n        type: 'object',\n        defaultSnippets: [{ body: { scope: '${1:keyword.operator}', settings: { foreground: '${2:#FF0000}' } } }],\n        properties: {\n            name: {\n                type: 'string',\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/colorThemeSchema',\n                    'schema.properties.name',\n                    'Description of the rule.'\n                ))\n            },\n            scope: {\n                description: ( localizeWithPath(\n                    'vs/workbench/services/themes/common/colorThemeSchema',\n                    'schema.properties.scope',\n                    'Scope selector against which this rule matches.'\n                )),\n                anyOf: [\n                    {\n                        enum: textMateScopes\n                    },\n                    {\n                        type: 'string'\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            enum: textMateScopes\n                        }\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                ]\n            },\n            settings: {\n                $ref: '#/definitions/settings'\n            }\n        },\n        required: [\n            'settings'\n        ],\n        additionalProperties: false\n    }\n};\nconst colorThemeSchemaId = 'vscode://schemas/color-theme';\nconst colorThemeSchema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        colors: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeSchema',\n                'schema.workbenchColors',\n                'Colors in the workbench'\n            )),\n            $ref: workbenchColorsSchemaId,\n            additionalProperties: false\n        },\n        tokenColors: {\n            anyOf: [{\n                    type: 'string',\n                    description: ( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeSchema',\n                        'schema.tokenColors.path',\n                        'Path to a tmTheme file (relative to the current file).'\n                    ))\n                },\n                {\n                    description: ( localizeWithPath(\n                        'vs/workbench/services/themes/common/colorThemeSchema',\n                        'schema.colors',\n                        'Colors for syntax highlighting'\n                    )),\n                    $ref: textmateColorsSchemaId\n                }\n            ]\n        },\n        semanticHighlighting: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeSchema',\n                'schema.supportsSemanticHighlighting',\n                'Whether semantic highlighting should be enabled for this theme.'\n            ))\n        },\n        semanticTokenColors: {\n            type: 'object',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/colorThemeSchema',\n                'schema.semanticTokenColors',\n                'Colors for semantic tokens'\n            )),\n            $ref: tokenStylingSchemaId\n        }\n    }\n};\nfunction registerColorThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(colorThemeSchemaId, colorThemeSchema);\n    schemaRegistry.registerSchema(textmateColorsSchemaId, textmateColorSchema);\n}\n\nexport { colorThemeSchemaId, registerColorThemeSchemas, textmateColorGroupSchemaId, textmateColorsSchemaId };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isString } from 'vscode/vscode/vs/base/common/types';\nimport { joinPath, isEqualOrParent } from 'vscode/vscode/vs/base/common/resources';\nimport { ExtensionsRegistry } from 'vscode/vscode/vs/workbench/services/extensions/common/extensionsRegistry';\nimport { VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { Extensions } from 'vscode/vscode/vs/workbench/services/extensionManagement/common/extensionFeatures';\nimport { MarkdownString } from 'vscode/vscode/vs/base/common/htmlContent';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\n\nfunction registerColorThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'themes',\n        jsonSchema: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'vscode.extension.contributes.themes',\n                'Contributes textmate color themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n                properties: {\n                    id: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.themes.id',\n                            'Id of the color theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.themes.label',\n                            'Label of the color theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    uiTheme: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.themes.uiTheme',\n                            'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme, \\'hc-light\\' is the light high contrast theme.'\n                        )),\n                        enum: [VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME]\n                    },\n                    path: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.themes.path',\n                            'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./colorthemes/awesome-color-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'uiTheme']\n            }\n        }\n    });\n}\nfunction registerFileIconThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'iconThemes',\n        jsonSchema: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'vscode.extension.contributes.iconThemes',\n                'Contributes file icon themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.iconThemes.id',\n                            'Id of the file icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.iconThemes.label',\n                            'Label of the file icon theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.iconThemes.path',\n                            'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \\'./fileicons/awesome-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    });\n}\nfunction registerProductIconThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'productIconThemes',\n        jsonSchema: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'vscode.extension.contributes.productIconThemes',\n                'Contributes product icon themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './producticons/${3:id}-product-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.productIconThemes.id',\n                            'Id of the product icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.productIconThemes.label',\n                            'Label of the product icon theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( localizeWithPath(\n                            'vs/workbench/services/themes/common/themeExtensionPoints',\n                            'vscode.extension.contributes.productIconThemes.path',\n                            'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \\'./producticons/awesome-product-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    });\n}\nclass ThemeDataRenderer extends Disposable {\n    constructor() {\n        super(...arguments);\n        this.type = 'markdown';\n    }\n    shouldRender(manifest) {\n        return !!manifest.contributes?.themes || !!manifest.contributes?.iconThemes || !!manifest.contributes?.productIconThemes;\n    }\n    render(manifest) {\n        const markdown = ( new MarkdownString());\n        if (manifest.contributes?.themes) {\n            markdown.appendMarkdown(`### ${( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'color themes',\n                \"Color Themes\"\n            ))}\\n\\n`);\n            for (const theme of manifest.contributes.themes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        if (manifest.contributes?.iconThemes) {\n            markdown.appendMarkdown(`### ${( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'file icon themes',\n                \"File Icon Themes\"\n            ))}\\n\\n`);\n            for (const theme of manifest.contributes.iconThemes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        if (manifest.contributes?.productIconThemes) {\n            markdown.appendMarkdown(`### ${( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'product icon themes',\n                \"Product Icon Themes\"\n            ))}\\n\\n`);\n            for (const theme of manifest.contributes.productIconThemes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        return {\n            data: markdown,\n            dispose: () => { }\n        };\n    }\n}\n( Registry.as(Extensions.ExtensionFeaturesRegistry)).registerExtensionFeature({\n    id: 'themes',\n    label: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeExtensionPoints',\n        'themes',\n        \"Themes\"\n    )),\n    access: {\n        canToggle: false\n    },\n    renderer: ( new SyncDescriptor(ThemeDataRenderer)),\n});\nclass ThemeRegistry {\n    constructor(themesExtPoint, create, idRequired = false, builtInTheme = undefined) {\n        this.themesExtPoint = themesExtPoint;\n        this.create = create;\n        this.idRequired = idRequired;\n        this.builtInTheme = builtInTheme;\n        this.onDidChangeEmitter = ( new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.extensionThemes = [];\n        this.initialize();\n    }\n    initialize() {\n        this.themesExtPoint.setHandler((extensions, delta) => {\n            const previousIds = {};\n            const added = [];\n            for (const theme of this.extensionThemes) {\n                previousIds[theme.id] = theme;\n            }\n            this.extensionThemes.length = 0;\n            for (const ext of extensions) {\n                const extensionData = ExtensionData.fromName(ext.description.publisher, ext.description.name, ext.description.isBuiltin);\n                this.onThemes(extensionData, ext.description.extensionLocation, ext.value, this.extensionThemes, ext.collector);\n            }\n            for (const theme of this.extensionThemes) {\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n                else {\n                    delete previousIds[theme.id];\n                }\n            }\n            const removed = ( Object.values(previousIds));\n            this.onDidChangeEmitter.fire({ themes: this.extensionThemes, added, removed });\n        });\n    }\n    onThemes(extensionData, extensionLocation, themeContributions, resultingThemes = [], log) {\n        if (!Array.isArray(themeContributions)) {\n            log?.error(( localizeWithPath(\n                'vs/workbench/services/themes/common/themeExtensionPoints',\n                'reqarray',\n                \"Extension point `{0}` must be an array.\",\n                this.themesExtPoint.name\n            )));\n            return resultingThemes;\n        }\n        themeContributions.forEach(theme => {\n            if (!theme.path || !isString(theme.path)) {\n                log?.error(( localizeWithPath(\n                    'vs/workbench/services/themes/common/themeExtensionPoints',\n                    'reqpath',\n                    \"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.path)\n                )));\n                return;\n            }\n            if (this.idRequired && (!theme.id || !isString(theme.id))) {\n                log?.error(( localizeWithPath(\n                    'vs/workbench/services/themes/common/themeExtensionPoints',\n                    'reqid',\n                    \"Expected string in `contributes.{0}.id`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.id)\n                )));\n                return;\n            }\n            const themeLocation = joinPath(extensionLocation, theme.path);\n            if (!isEqualOrParent(themeLocation, extensionLocation)) {\n                log?.warn(( localizeWithPath(\n                    'vs/workbench/services/themes/common/themeExtensionPoints',\n                    'invalid.path.1',\n                    \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n                    this.themesExtPoint.name,\n                    themeLocation.path,\n                    extensionLocation.path\n                )));\n            }\n            const themeData = this.create(theme, themeLocation, extensionData);\n            resultingThemes.push(themeData);\n        });\n        return resultingThemes;\n    }\n    findThemeById(themeId) {\n        if (this.builtInTheme && this.builtInTheme.id === themeId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        for (const t of allThemes) {\n            if (t.id === themeId) {\n                return t;\n            }\n        }\n        return undefined;\n    }\n    findThemeBySettingsId(settingsId, defaultSettingsId) {\n        if (this.builtInTheme && this.builtInTheme.settingsId === settingsId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        let defaultTheme = undefined;\n        for (const t of allThemes) {\n            if (t.settingsId === settingsId) {\n                return t;\n            }\n            if (t.settingsId === defaultSettingsId) {\n                defaultTheme = t;\n            }\n        }\n        return defaultTheme;\n    }\n    findThemeByExtensionLocation(extLocation) {\n        if (extLocation) {\n            return this.getThemes().filter(t => t.location && isEqualOrParent(t.location, extLocation));\n        }\n        return [];\n    }\n    getThemes() {\n        return this.extensionThemes;\n    }\n    getMarketplaceThemes(manifest, extensionLocation, extensionData) {\n        const themes = manifest?.contributes?.[this.themesExtPoint.name];\n        if (Array.isArray(themes)) {\n            return this.onThemes(extensionData, extensionLocation, themes);\n        }\n        return [];\n    }\n}\n\nexport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isUndefined } from 'vscode/vscode/vs/base/common/types';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/configuration/common/configurationRegistry';\nimport { textmateColorsSchemaId, textmateColorGroupSchemaId } from './colorThemeSchema.js';\nimport { workbenchColorsSchemaId } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';\nimport { tokenStylingSchemaId } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\nimport { ThemeSettingDefaults, ThemeSettings } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\n\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nconst colorThemeSettingEnum = [];\nconst colorThemeSettingEnumItemLabels = [];\nconst colorThemeSettingEnumDescriptions = [];\nfunction formatSettingAsLink(str) {\n    return `\\`#${str}#\\``;\n}\nconst colorThemeSettingSchema = {\n    type: 'string',\n    description: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'colorTheme',\n        \"Specifies the color theme used in the workbench.\"\n    )),\n    default: isWeb ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'colorThemeError',\n        \"Theme is unknown or not installed.\"\n    )),\n};\nconst preferredDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        { key: 'preferredDarkColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme for dark OS appearance when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'colorThemeError',\n        \"Theme is unknown or not installed.\"\n    )),\n};\nconst preferredLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        { key: 'preferredLightColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme for light OS appearance when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_LIGHT,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'colorThemeError',\n        \"Theme is unknown or not installed.\"\n    )),\n};\nconst preferredHCDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        { key: 'preferredHCDarkColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme used in high contrast dark mode when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'colorThemeError',\n        \"Theme is unknown or not installed.\"\n    )),\n};\nconst preferredHCLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        { key: 'preferredHCLightColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme used in high contrast light mode when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_LIGHT,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'colorThemeError',\n        \"Theme is unknown or not installed.\"\n    )),\n};\nconst detectColorSchemeSettingSchema = {\n    type: 'boolean',\n    markdownDescription: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        { key: 'detectColorScheme', comment: ['{0} and {1} will become links to other settings.'] },\n        'If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at {0} is used, for light {1}.',\n        formatSettingAsLink(ThemeSettings.PREFERRED_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_LIGHT_THEME)\n    )),\n    default: false\n};\nconst colorCustomizationsSchema = {\n    type: 'object',\n    description: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'workbenchColors',\n        \"Overrides colors from the currently selected color theme.\"\n    )),\n    allOf: [{ $ref: workbenchColorsSchemaId }],\n    default: {},\n    defaultSnippets: [{\n            body: {}\n        }]\n};\nconst fileIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.FILE_ICON_THEME,\n    description: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'iconTheme',\n        \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"\n    )),\n    enum: [null],\n    enumItemLabels: [( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'noIconThemeLabel',\n        'None'\n    ))],\n    enumDescriptions: [( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'noIconThemeDesc',\n        'No file icons'\n    ))],\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'iconThemeError',\n        \"File icon theme is unknown or not installed.\"\n    ))\n};\nconst productIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.PRODUCT_ICON_THEME,\n    description: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'productIconTheme',\n        \"Specifies the product icon theme used.\"\n    )),\n    enum: [ThemeSettingDefaults.PRODUCT_ICON_THEME],\n    enumItemLabels: [( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'defaultProductIconThemeLabel',\n        'Default'\n    ))],\n    enumDescriptions: [( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'defaultProductIconThemeDesc',\n        'Default'\n    ))],\n    errorMessage: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'productIconThemeError',\n        \"Product icon theme is unknown or not installed.\"\n    ))\n};\nconst detectHCSchemeSettingSchema = {\n    type: 'boolean',\n    default: true,\n    markdownDescription: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        { key: 'autoDetectHighContrast', comment: ['{0} and {1} will become links to other settings.'] },\n        \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}.\",\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n    )),\n    scope: 1\n};\nconst themeSettingsConfiguration = {\n    id: 'workbench',\n    order: 7.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n        [ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_DARK_THEME]: preferredHCDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_LIGHT_THEME]: preferredHCLightThemeSettingSchema,\n        [ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n        [ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n        [ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\nconst themeSettingsWindowConfiguration = {\n    id: 'window',\n    order: 8.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n        [ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\nfunction tokenGroupSettings(description) {\n    return {\n        description,\n        $ref: textmateColorGroupSchemaId\n    };\n}\nconst themeSpecificSettingKey = '^\\\\[[^\\\\]]*(\\\\]\\\\s*\\\\[[^\\\\]]*)*\\\\]$';\nconst tokenColorSchema = {\n    type: 'object',\n    properties: {\n        comments: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.comments',\n            \"Sets the colors and styles for comments\"\n        ))),\n        strings: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.strings',\n            \"Sets the colors and styles for strings literals.\"\n        ))),\n        keywords: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.keywords',\n            \"Sets the colors and styles for keywords.\"\n        ))),\n        numbers: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.numbers',\n            \"Sets the colors and styles for number literals.\"\n        ))),\n        types: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.types',\n            \"Sets the colors and styles for type declarations and references.\"\n        ))),\n        functions: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.functions',\n            \"Sets the colors and styles for functions declarations and references.\"\n        ))),\n        variables: tokenGroupSettings(( localizeWithPath(\n            'vs/workbench/services/themes/common/themeConfiguration',\n            'editorColors.variables',\n            \"Sets the colors and styles for variables declarations and references.\"\n        ))),\n        textMateRules: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeConfiguration',\n                'editorColors.textMateRules',\n                'Sets colors and styles using textmate theming rules (advanced).'\n            )),\n            $ref: textmateColorsSchemaId\n        },\n        semanticHighlighting: {\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeConfiguration',\n                'editorColors.semanticHighlighting',\n                'Whether semantic highlighting should be enabled for this theme.'\n            )),\n            deprecationMessage: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeConfiguration',\n                'editorColors.semanticHighlighting.deprecationMessage',\n                'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'\n            )),\n            markdownDeprecationMessage: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeConfiguration',\n                { key: 'editorColors.semanticHighlighting.deprecationMessageMarkdown', comment: ['{0} will become a link to another setting.'] },\n                'Use `enabled` in {0} setting instead.',\n                formatSettingAsLink('editor.semanticTokenColorCustomizations')\n            )),\n            type: 'boolean'\n        }\n    },\n    additionalProperties: false\n};\nconst tokenColorCustomizationSchema = {\n    description: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'editorColors',\n        \"Overrides editor syntax colors and font style from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...tokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst semanticTokenColorSchema = {\n    type: 'object',\n    properties: {\n        enabled: {\n            type: 'boolean',\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeConfiguration',\n                'editorColors.semanticHighlighting.enabled',\n                'Whether semantic highlighting is enabled or disabled for this theme'\n            )),\n            suggestSortText: '0_enabled'\n        },\n        rules: {\n            $ref: tokenStylingSchemaId,\n            description: ( localizeWithPath(\n                'vs/workbench/services/themes/common/themeConfiguration',\n                'editorColors.semanticHighlighting.rules',\n                'Semantic token styling rules for this theme.'\n            )),\n            suggestSortText: '0_rules'\n        }\n    },\n    additionalProperties: false\n};\nconst semanticTokenColorCustomizationSchema = {\n    description: ( localizeWithPath(\n        'vs/workbench/services/themes/common/themeConfiguration',\n        'semanticTokenColors',\n        \"Overrides editor semantic token color and styles from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst tokenColorCustomizationConfiguration = {\n    id: 'editor',\n    order: 7.2,\n    type: 'object',\n    properties: {\n        [ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n        [ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\nfunction updateColorThemeConfigurationSchemas(themes) {\n    themes.sort((a, b) => a.label.localeCompare(b.label));\n    colorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...( themes.map(t => t.settingsId)));\n    colorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...( themes.map(t => t.description || '')));\n    colorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...( themes.map(t => t.label || '')));\n    const themeSpecificWorkbenchColors = { properties: {} };\n    const themeSpecificTokenColors = { properties: {} };\n    const themeSpecificSemanticTokenColors = { properties: {} };\n    const workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n    const tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n    for (const t of themes) {\n        const themeId = `[${t.settingsId}]`;\n        themeSpecificWorkbenchColors.properties[themeId] = workbenchColors;\n        themeSpecificTokenColors.properties[themeId] = tokenColors;\n        themeSpecificSemanticTokenColors.properties[themeId] = semanticTokenColorSchema;\n    }\n    themeSpecificWorkbenchColors.patternProperties = { [themeSpecificSettingKey]: workbenchColors };\n    themeSpecificTokenColors.patternProperties = { [themeSpecificSettingKey]: tokenColors };\n    themeSpecificSemanticTokenColors.patternProperties = { [themeSpecificSettingKey]: semanticTokenColorSchema };\n    colorCustomizationsSchema.allOf[1] = themeSpecificWorkbenchColors;\n    tokenColorCustomizationSchema.allOf[1] = themeSpecificTokenColors;\n    semanticTokenColorCustomizationSchema.allOf[1] = themeSpecificSemanticTokenColors;\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\nfunction updateFileIconThemeConfigurationSchemas(themes) {\n    fileIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.settingsId)));\n    fileIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.label)));\n    fileIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.description || '')));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nfunction updateProductIconThemeConfigurationSchemas(themes) {\n    productIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.settingsId)));\n    productIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.label)));\n    productIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.description || '')));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nclass ThemeConfiguration {\n    constructor(configurationService) {\n        this.configurationService = configurationService;\n    }\n    get colorTheme() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_THEME);\n    }\n    get fileIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.FILE_ICON_THEME);\n    }\n    get productIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.PRODUCT_ICON_THEME);\n    }\n    get colorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n    }\n    get tokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n    }\n    get semanticTokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n    }\n    async setColorTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.COLOR_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setFileIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setProductIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    isDefaultColorTheme() {\n        const settings = this.configurationService.inspect(ThemeSettings.COLOR_THEME);\n        return settings && settings.default?.value === settings.value;\n    }\n    findAutoConfigurationTarget(key) {\n        const settings = this.configurationService.inspect(key);\n        if (!isUndefined(settings.workspaceFolderValue)) {\n            return 6 ;\n        }\n        else if (!isUndefined(settings.workspaceValue)) {\n            return 5 ;\n        }\n        else if (!isUndefined(settings.userRemote)) {\n            return 4 ;\n        }\n        return 2 ;\n    }\n    async writeConfiguration(key, value, settingsTarget) {\n        if (settingsTarget === undefined || settingsTarget === 'preview') {\n            return;\n        }\n        const settings = this.configurationService.inspect(key);\n        if (settingsTarget === 'auto') {\n            return this.configurationService.updateValue(key, value);\n        }\n        if (settingsTarget === 2 ) {\n            if (value === settings.userValue) {\n                return Promise.resolve(undefined);\n            }\n            else if (value === settings.defaultValue) {\n                if (isUndefined(settings.userValue)) {\n                    return Promise.resolve(undefined);\n                }\n                value = undefined;\n            }\n        }\n        else if (settingsTarget === 5  || settingsTarget === 6  || settingsTarget === 4 ) {\n            if (value === settings.value) {\n                return Promise.resolve(undefined);\n            }\n        }\n        return this.configurationService.updateValue(key, value, settingsTarget);\n    }\n}\n\nexport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas };\n","import { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { basename } from 'vscode/vscode/vs/base/common/path';\nimport { dirname, joinPath } from 'vscode/vscode/vs/base/common/resources';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { ThemeSettingDefaults, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontFormatRegex } from '../common/productIconThemeSchema.js';\nimport { isObject, isString } from 'vscode/vscode/vs/base/common/types';\nimport { getIconRegistry, IconFontDefinition } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vscode/vscode/vs/base/common/themables';\n\nconst DEFAULT_PRODUCT_ICON_THEME_ID = '';\nclass ProductIconThemeData {\n    static { this.STORAGE_KEY = 'productIconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.iconThemeDocument = { iconDefinitions: ( new Map()) };\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    getIcon(iconContribution) {\n        return _resolveIconDefinition(iconContribution, this.iconThemeDocument);\n    }\n    ensureLoaded(fileService, logService) {\n        return !this.isLoaded ? this.load(fileService, logService) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(fileService, logService) {\n        return this.load(fileService, logService);\n    }\n    async load(fileService, logService) {\n        const location = this.location;\n        if (!location) {\n            return Promise.resolve(this.styleSheetContent);\n        }\n        const warnings = [];\n        this.iconThemeDocument = await _loadProductIconThemeDocument(fileService, location, warnings);\n        this.isLoaded = true;\n        if (warnings.length) {\n            logService.error(( localizeWithPath(\n                'vs/workbench/services/themes/browser/productIconThemeData',\n                'error.parseicondefs',\n                \"Problems processing product icons definitions in {0}:\\n{1}\",\n                ( location.toString()),\n                warnings.join('\\n')\n            )));\n        }\n        return this.styleSheetContent;\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( new ProductIconThemeData(id, label, settingsId));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( new ProductIconThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static { this._defaultProductIconTheme = null; }\n    static get defaultTheme() {\n        let themeData = ProductIconThemeData._defaultProductIconTheme;\n        if (!themeData) {\n            themeData = ProductIconThemeData._defaultProductIconTheme = ( new ProductIconThemeData(DEFAULT_PRODUCT_ICON_THEME_ID, ( localizeWithPath(\n                'vs/workbench/services/themes/browser/productIconThemeData',\n                'defaultTheme',\n                'Default'\n            )), ThemeSettingDefaults.PRODUCT_ICON_THEME));\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ProductIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new ProductIconThemeData('', '', ''));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            const { iconDefinitions, iconFontDefinitions } = data;\n            if (Array.isArray(iconDefinitions) && isObject(iconFontDefinitions)) {\n                const restoredIconDefinitions = ( new Map());\n                for (const entry of iconDefinitions) {\n                    const { id, fontCharacter, fontId } = entry;\n                    if (isString(id) && isString(fontCharacter)) {\n                        if (isString(fontId)) {\n                            const iconFontDefinition = IconFontDefinition.fromJSONObject(iconFontDefinitions[fontId]);\n                            if (iconFontDefinition) {\n                                restoredIconDefinitions.set(id, { fontCharacter, font: { id: fontId, definition: iconFontDefinition } });\n                            }\n                        }\n                        else {\n                            restoredIconDefinitions.set(id, { fontCharacter });\n                        }\n                    }\n                }\n                theme.iconThemeDocument = { iconDefinitions: restoredIconDefinitions };\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const iconDefinitions = [];\n        const iconFontDefinitions = {};\n        for (const entry of this.iconThemeDocument.iconDefinitions.entries()) {\n            const font = entry[1].font;\n            iconDefinitions.push({ id: entry[0], fontCharacter: entry[1].fontCharacter, fontId: font?.id });\n            if (font && iconFontDefinitions[font.id] === undefined) {\n                iconFontDefinitions[font.id] = IconFontDefinition.toJSONObject(font.definition);\n            }\n        }\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            watch: this.watch,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            iconDefinitions,\n            iconFontDefinitions\n        });\n        storageService.store(ProductIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nfunction _loadProductIconThemeDocument(fileService, location, warnings) {\n    return fileService.readExtensionResource(location).then((content) => {\n        const parseErrors = [];\n        const contentValue = parse(content, parseErrors);\n        if (parseErrors.length > 0) {\n            return Promise.reject(( new Error(( localizeWithPath(\n                'vs/workbench/services/themes/browser/productIconThemeData',\n                'error.cannotparseicontheme',\n                \"Problems parsing product icons file: {0}\",\n                ( parseErrors.map(e => getParseErrorMessage(e.error))).join(', ')\n            )))));\n        }\n        else if (getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( new Error(( localizeWithPath(\n                'vs/workbench/services/themes/browser/productIconThemeData',\n                'error.invalidformat',\n                \"Invalid format for product icons theme file: Object expected.\"\n            )))));\n        }\n        else if (!contentValue.iconDefinitions || !Array.isArray(contentValue.fonts) || !contentValue.fonts.length) {\n            return Promise.reject(( new Error(( localizeWithPath(\n                'vs/workbench/services/themes/browser/productIconThemeData',\n                'error.missingProperties',\n                \"Invalid format for product icons theme file: Must contain iconDefinitions and fonts.\"\n            )))));\n        }\n        const iconThemeDocumentLocationDirname = dirname(location);\n        const sanitizedFonts = ( new Map());\n        for (const font of contentValue.fonts) {\n            if (isString(font.id) && font.id.match(fontIdRegex)) {\n                const fontId = font.id;\n                let fontWeight = undefined;\n                if (isString(font.weight) && font.weight.match(fontWeightRegex)) {\n                    fontWeight = font.weight;\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        'vs/workbench/services/themes/browser/productIconThemeData',\n                        'error.fontWeight',\n                        'Invalid font weight in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                let fontStyle = undefined;\n                if (isString(font.style) && font.style.match(fontStyleRegex)) {\n                    fontStyle = font.style;\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        'vs/workbench/services/themes/browser/productIconThemeData',\n                        'error.fontStyle',\n                        'Invalid font style in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                const sanitizedSrc = [];\n                if (Array.isArray(font.src)) {\n                    for (const s of font.src) {\n                        if (isString(s.path) && isString(s.format) && s.format.match(fontFormatRegex)) {\n                            const iconFontLocation = joinPath(iconThemeDocumentLocationDirname, s.path);\n                            sanitizedSrc.push({ location: iconFontLocation, format: s.format });\n                        }\n                        else {\n                            warnings.push(( localizeWithPath(\n                                'vs/workbench/services/themes/browser/productIconThemeData',\n                                'error.fontSrc',\n                                'Invalid font source in font \\'{0}\\'. Ignoring source.',\n                                font.id\n                            )));\n                        }\n                    }\n                }\n                if (sanitizedSrc.length) {\n                    sanitizedFonts.set(fontId, { weight: fontWeight, style: fontStyle, src: sanitizedSrc });\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        'vs/workbench/services/themes/browser/productIconThemeData',\n                        'error.noFontSrc',\n                        'No valid font source in font \\'{0}\\'. Ignoring font definition.',\n                        font.id\n                    )));\n                }\n            }\n            else {\n                warnings.push(( localizeWithPath(\n                    'vs/workbench/services/themes/browser/productIconThemeData',\n                    'error.fontId',\n                    'Missing or invalid font id \\'{0}\\'. Skipping font definition.',\n                    font.id\n                )));\n            }\n        }\n        const iconDefinitions = ( new Map());\n        const primaryFontId = contentValue.fonts[0].id;\n        for (const iconId in contentValue.iconDefinitions) {\n            const definition = contentValue.iconDefinitions[iconId];\n            if (isString(definition.fontCharacter)) {\n                const fontId = definition.fontId ?? primaryFontId;\n                const fontDefinition = sanitizedFonts.get(fontId);\n                if (fontDefinition) {\n                    const font = { id: `pi-${fontId}`, definition: fontDefinition };\n                    iconDefinitions.set(iconId, { fontCharacter: definition.fontCharacter, font });\n                }\n                else {\n                    warnings.push(( localizeWithPath(\n                        'vs/workbench/services/themes/browser/productIconThemeData',\n                        'error.icon.font',\n                        'Skipping icon definition \\'{0}\\'. Unknown font.',\n                        iconId\n                    )));\n                }\n            }\n            else {\n                warnings.push(( localizeWithPath(\n                    'vs/workbench/services/themes/browser/productIconThemeData',\n                    'error.icon.fontCharacter',\n                    'Skipping icon definition \\'{0}\\'. Unknown fontCharacter.',\n                    iconId\n                )));\n            }\n        }\n        return { iconDefinitions };\n    });\n}\nconst iconRegistry = getIconRegistry();\nfunction _resolveIconDefinition(iconContribution, iconThemeDocument) {\n    const iconDefinitions = iconThemeDocument.iconDefinitions;\n    let definition = iconDefinitions.get(iconContribution.id);\n    let defaults = iconContribution.defaults;\n    while (!definition && ThemeIcon.isThemeIcon(defaults)) {\n        const ic = iconRegistry.getIcon(defaults.id);\n        if (ic) {\n            definition = iconDefinitions.get(ic.id);\n            defaults = ic.defaults;\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (definition) {\n        return definition;\n    }\n    if (!ThemeIcon.isThemeIcon(defaults)) {\n        return defaults;\n    }\n    return undefined;\n}\n\nexport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData };\n","import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { localizeWithPath } from 'vscode/vscode/vs/nls';\nimport { isUndefined, isString } from 'vscode/vscode/vs/base/common/types';\nimport { IExtensionService } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions';\nimport { ThemeSettingDefaults, COLOR_THEME_LIGHT_INITIAL_COLORS, COLOR_THEME_DARK_INITIAL_COLORS, ThemeSettings, ExtensionData, VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { onUnexpectedError } from 'vscode/vscode/vs/base/common/errors';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration';\nimport { ColorThemeData } from '../common/colorThemeData.js';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/themeService';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { registerFileIconThemeSchemas } from '../common/fileIconThemeSchema.js';\nimport { dispose } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { FileIconThemeData, FileIconThemeLoader } from './fileIconThemeData.js';\nimport { createStyleSheet } from 'vscode/vscode/vs/base/browser/dom';\nimport { IBrowserWorkbenchEnvironmentService } from 'vscode/vscode/vs/workbench/services/environment/browser/environmentService';\nimport { IFileService } from 'vscode/vscode/vs/platform/files/common/files';\nimport { joinPath, isEqual } from 'vscode/vscode/vs/base/common/resources';\nimport { registerColorThemeSchemas } from '../common/colorThemeSchema.js';\nimport { getRemoteAuthority } from 'vscode/vscode/vs/platform/remote/common/remoteHosts';\nimport { IWorkbenchLayoutService } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService';\nimport { IExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint, ThemeRegistry } from '../common/themeExtensionPoints.js';\nimport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas } from '../common/themeConfiguration.js';\nimport { ProductIconThemeData, DEFAULT_PRODUCT_ICON_THEME_ID } from './productIconThemeData.js';\nimport { registerProductIconThemeSchemas } from '../common/productIconThemeSchema.js';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { IHostColorSchemeService } from 'vscode/vscode/vs/workbench/services/themes/common/hostColorSchemeService';\nimport { Sequencer, RunOnceScheduler } from 'vscode/vscode/vs/base/common/async';\nimport { IUserDataInitializationService } from 'vscode/vscode/vs/workbench/services/userData/browser/userDataInit';\nimport { getIconsStyleSheet } from 'vscode/vscode/vs/platform/theme/browser/iconsStyleSheet';\nimport { getColorRegistry, asCssVariableName } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';\nimport { ILanguageService } from 'vscode/vscode/vs/editor/common/languages/language';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\n\nconst PERSISTED_OS_COLOR_SCHEME = 'osColorScheme';\nconst PERSISTED_OS_COLOR_SCHEME_SCOPE = -1 ;\nconst defaultThemeExtensionId = 'vscode-theme-defaults';\nconst DEFAULT_FILE_ICON_THEME_ID = 'vscode.vscode-theme-seti-vs-seti';\nconst fileIconsEnabledClass = 'file-icons-enabled';\nconst colorThemeRulesClassName = 'contributedColorTheme';\nconst fileIconThemeRulesClassName = 'contributedFileIconTheme';\nconst productIconThemeRulesClassName = 'contributedProductIconTheme';\nconst themingRegistry = ( Registry.as(Extensions.ThemingContribution));\nfunction validateThemeId(theme) {\n    switch (theme) {\n        case VS_LIGHT_THEME: return `vs ${defaultThemeExtensionId}-themes-light_vs-json`;\n        case VS_DARK_THEME: return `vs-dark ${defaultThemeExtensionId}-themes-dark_vs-json`;\n        case VS_HC_THEME: return `hc-black ${defaultThemeExtensionId}-themes-hc_black-json`;\n        case VS_HC_LIGHT_THEME: return `hc-light ${defaultThemeExtensionId}-themes-hc_light-json`;\n    }\n    return theme;\n}\nconst colorThemesExtPoint = registerColorThemeExtensionPoint();\nconst fileIconThemesExtPoint = registerFileIconThemeExtensionPoint();\nconst productIconThemesExtPoint = registerProductIconThemeExtensionPoint();\nlet WorkbenchThemeService = class WorkbenchThemeService {\n    constructor(extensionService, storageService, configurationService, telemetryService, environmentService, fileService, extensionResourceLoaderService, layoutService, logService, hostColorService, userDataInitializationService, languageService) {\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.telemetryService = telemetryService;\n        this.environmentService = environmentService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.logService = logService;\n        this.hostColorService = hostColorService;\n        this.userDataInitializationService = userDataInitializationService;\n        this.hasDefaultUpdated = false;\n        this.themeExtensionsActivated = ( new Map());\n        this.container = layoutService.mainContainer;\n        this.settings = ( new ThemeConfiguration(configurationService));\n        this.colorThemeRegistry = ( new ThemeRegistry(colorThemesExtPoint, ColorThemeData.fromExtensionTheme));\n        this.colorThemeWatcher = ( new ThemeFileWatcher(fileService, environmentService, this.reloadCurrentColorTheme.bind(this)));\n        this.onColorThemeChange = ( new Emitter({ leakWarningThreshold: 400 }));\n        this.currentColorTheme = ColorThemeData.createUnloadedTheme('');\n        this.colorThemeSequencer = ( new Sequencer());\n        this.fileIconThemeWatcher = ( new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentFileIconTheme.bind(this)\n        ));\n        this.fileIconThemeRegistry = ( new ThemeRegistry(\n            fileIconThemesExtPoint,\n            FileIconThemeData.fromExtensionTheme,\n            true,\n            FileIconThemeData.noIconTheme\n        ));\n        this.fileIconThemeLoader = ( new FileIconThemeLoader(extensionResourceLoaderService, languageService));\n        this.onFileIconThemeChange = ( new Emitter({ leakWarningThreshold: 400 }));\n        this.currentFileIconTheme = FileIconThemeData.createUnloadedTheme('');\n        this.fileIconThemeSequencer = ( new Sequencer());\n        this.productIconThemeWatcher = ( new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentProductIconTheme.bind(this)\n        ));\n        this.productIconThemeRegistry = ( new ThemeRegistry(\n            productIconThemesExtPoint,\n            ProductIconThemeData.fromExtensionTheme,\n            true,\n            ProductIconThemeData.defaultTheme\n        ));\n        this.onProductIconThemeChange = ( new Emitter());\n        this.currentProductIconTheme = ProductIconThemeData.createUnloadedTheme('');\n        this.productIconThemeSequencer = ( new Sequencer());\n        let themeData = ColorThemeData.fromStorageData(this.storageService);\n        const colorThemeSetting = this.settings.colorTheme;\n        if (themeData && colorThemeSetting !== themeData.settingsId && this.settings.isDefaultColorTheme()) {\n            this.hasDefaultUpdated = themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK_OLD || themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD;\n            themeData = undefined;\n        }\n        const preferredColorScheme = this.getPreferredColorScheme();\n        const defaultColorMap = colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_LIGHT ? COLOR_THEME_LIGHT_INITIAL_COLORS : colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_DARK ? COLOR_THEME_DARK_INITIAL_COLORS : undefined;\n        if (preferredColorScheme && themeData?.type !== preferredColorScheme && this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE) !== preferredColorScheme) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(preferredColorScheme, undefined);\n        }\n        if (!themeData) {\n            const initialColorTheme = environmentService.options?.initialColorTheme;\n            if (initialColorTheme) {\n                themeData = ColorThemeData.createUnloadedThemeForThemeType(initialColorTheme.themeType, initialColorTheme.colors ?? defaultColorMap);\n            }\n        }\n        if (!themeData) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(isWeb ? ColorScheme.LIGHT : ColorScheme.DARK, defaultColorMap);\n        }\n        themeData.setCustomizations(this.settings);\n        this.applyTheme(themeData, undefined, true);\n        const fileIconData = FileIconThemeData.fromStorageData(this.storageService);\n        if (fileIconData) {\n            this.applyAndSetFileIconTheme(fileIconData, true);\n        }\n        const productIconData = ProductIconThemeData.fromStorageData(this.storageService);\n        if (productIconData) {\n            this.applyAndSetProductIconTheme(productIconData, true);\n        }\n        extensionService.whenInstalledExtensionsRegistered().then(_ => {\n            this.installConfigurationListener();\n            this.installPreferredSchemeListener();\n            this.installRegistryListeners();\n            this.initialize().catch(onUnexpectedError);\n        });\n        const codiconStyleSheet = createStyleSheet();\n        codiconStyleSheet.id = 'codiconStyles';\n        const iconsStyleSheet = getIconsStyleSheet(this);\n        function updateAll() {\n            codiconStyleSheet.textContent = iconsStyleSheet.getCSS();\n        }\n        const delayer = ( new RunOnceScheduler(updateAll, 0));\n        iconsStyleSheet.onDidChange(() => delayer.schedule());\n        delayer.schedule();\n    }\n    initialize() {\n        const extDevLocs = this.environmentService.extensionDevelopmentLocationURI;\n        const extDevLoc = extDevLocs && extDevLocs.length === 1 ? extDevLocs[0] : undefined;\n        const initializeColorTheme = async () => {\n            const devThemes = this.colorThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                const matchedColorTheme = devThemes.find(theme => theme.type === this.currentColorTheme.type);\n                return this.setColorTheme(matchedColorTheme ? matchedColorTheme.id : devThemes[0].id, undefined);\n            }\n            const preferredColorScheme = this.getPreferredColorScheme();\n            const prevScheme = this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE);\n            if (preferredColorScheme !== prevScheme) {\n                this.storageService.store(PERSISTED_OS_COLOR_SCHEME, preferredColorScheme, PERSISTED_OS_COLOR_SCHEME_SCOPE, 0 );\n                if (preferredColorScheme && this.currentColorTheme.type !== preferredColorScheme) {\n                    return this.applyPreferredColorTheme(preferredColorScheme);\n                }\n            }\n            let theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, undefined);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                const fallbackTheme = this.currentColorTheme.type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n                theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, fallbackTheme);\n            }\n            return this.setColorTheme(theme && theme.id, undefined);\n        };\n        const initializeFileIconTheme = async () => {\n            const devThemes = this.fileIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setFileIconTheme(devThemes[0].id, 8 );\n            }\n            let theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            }\n            return this.setFileIconTheme(theme ? theme.id : DEFAULT_FILE_ICON_THEME_ID, undefined);\n        };\n        const initializeProductIconTheme = async () => {\n            const devThemes = this.productIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setProductIconTheme(devThemes[0].id, 8 );\n            }\n            let theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            }\n            return this.setProductIconTheme(theme ? theme.id : DEFAULT_PRODUCT_ICON_THEME_ID, undefined);\n        };\n        return Promise.all([initializeColorTheme(), initializeFileIconTheme(), initializeProductIconTheme()]);\n    }\n    installConfigurationListener() {\n        this.configurationService.onDidChangeConfiguration(e => {\n            let lazyPreferredColorScheme = null;\n            const getPreferredColorScheme = () => {\n                if (lazyPreferredColorScheme === null) {\n                    lazyPreferredColorScheme = this.getPreferredColorScheme();\n                }\n                return lazyPreferredColorScheme;\n            };\n            if (e.affectsConfiguration(ThemeSettings.COLOR_THEME)) {\n                this.restoreColorTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.DETECT_COLOR_SCHEME) || e.affectsConfiguration(ThemeSettings.DETECT_HC)) {\n                this.handlePreferredSchemeUpdated();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_DARK_THEME) && getPreferredColorScheme() === ColorScheme.DARK) {\n                this.applyPreferredColorTheme(ColorScheme.DARK);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_LIGHT_THEME) && getPreferredColorScheme() === ColorScheme.LIGHT) {\n                this.applyPreferredColorTheme(ColorScheme.LIGHT);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_HC_DARK_THEME) && getPreferredColorScheme() === ColorScheme.HIGH_CONTRAST_DARK) {\n                this.applyPreferredColorTheme(ColorScheme.HIGH_CONTRAST_DARK);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_HC_LIGHT_THEME) && getPreferredColorScheme() === ColorScheme.HIGH_CONTRAST_LIGHT) {\n                this.applyPreferredColorTheme(ColorScheme.HIGH_CONTRAST_LIGHT);\n            }\n            if (e.affectsConfiguration(ThemeSettings.FILE_ICON_THEME)) {\n                this.restoreFileIconTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PRODUCT_ICON_THEME)) {\n                this.restoreProductIconTheme();\n            }\n            if (this.currentColorTheme) {\n                let hasColorChanges = false;\n                if (e.affectsConfiguration(ThemeSettings.COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomColors(this.settings.colorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomTokenColors(this.settings.tokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomSemanticTokenColors(this.settings.semanticTokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (hasColorChanges) {\n                    this.updateDynamicCSSRules(this.currentColorTheme);\n                    this.onColorThemeChange.fire(this.currentColorTheme);\n                }\n            }\n        });\n    }\n    installRegistryListeners() {\n        let prevColorId = undefined;\n        this.colorThemeRegistry.onDidChange(async (event) => {\n            updateColorThemeConfigurationSchemas(event.themes);\n            if (await this.restoreColorTheme()) {\n                if (this.currentColorTheme.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK && !isUndefined(prevColorId) && (await this.colorThemeRegistry.findThemeById(prevColorId))) {\n                    await this.setColorTheme(prevColorId, 'auto');\n                    prevColorId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentColorTheme.settingsId))) {\n                    await this.reloadCurrentColorTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentColorTheme.settingsId))) {\n                prevColorId = this.currentColorTheme.id;\n                const defaultTheme = this.colorThemeRegistry.findThemeBySettingsId(ThemeSettingDefaults.COLOR_THEME_DARK);\n                await this.setColorTheme(defaultTheme, 'auto');\n            }\n        });\n        let prevFileIconId = undefined;\n        this.fileIconThemeRegistry.onDidChange(async (event) => {\n            updateFileIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreFileIconTheme()) {\n                if (this.currentFileIconTheme.id === DEFAULT_FILE_ICON_THEME_ID && !isUndefined(prevFileIconId) && this.fileIconThemeRegistry.findThemeById(prevFileIconId)) {\n                    await this.setFileIconTheme(prevFileIconId, 'auto');\n                    prevFileIconId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentFileIconTheme.settingsId))) {\n                    await this.reloadCurrentFileIconTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentFileIconTheme.settingsId))) {\n                prevFileIconId = this.currentFileIconTheme.id;\n                await this.setFileIconTheme(DEFAULT_FILE_ICON_THEME_ID, 'auto');\n            }\n        });\n        let prevProductIconId = undefined;\n        this.productIconThemeRegistry.onDidChange(async (event) => {\n            updateProductIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreProductIconTheme()) {\n                if (this.currentProductIconTheme.id === DEFAULT_PRODUCT_ICON_THEME_ID && !isUndefined(prevProductIconId) && this.productIconThemeRegistry.findThemeById(prevProductIconId)) {\n                    await this.setProductIconTheme(prevProductIconId, 'auto');\n                    prevProductIconId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentProductIconTheme.settingsId))) {\n                    await this.reloadCurrentProductIconTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentProductIconTheme.settingsId))) {\n                prevProductIconId = this.currentProductIconTheme.id;\n                await this.setProductIconTheme(DEFAULT_PRODUCT_ICON_THEME_ID, 'auto');\n            }\n        });\n        return Promise.all([this.getColorThemes(), this.getFileIconThemes(), this.getProductIconThemes()]).then(([ct, fit, pit]) => {\n            updateColorThemeConfigurationSchemas(ct);\n            updateFileIconThemeConfigurationSchemas(fit);\n            updateProductIconThemeConfigurationSchemas(pit);\n        });\n    }\n    installPreferredSchemeListener() {\n        this.hostColorService.onDidChangeColorScheme(() => this.handlePreferredSchemeUpdated());\n    }\n    async handlePreferredSchemeUpdated() {\n        const scheme = this.getPreferredColorScheme();\n        const prevScheme = this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE);\n        if (scheme !== prevScheme) {\n            this.storageService.store(PERSISTED_OS_COLOR_SCHEME, scheme, PERSISTED_OS_COLOR_SCHEME_SCOPE, 1 );\n            if (scheme) {\n                if (!prevScheme) {\n                    this.themeSettingIdBeforeSchemeSwitch = this.settings.colorTheme;\n                }\n                return this.applyPreferredColorTheme(scheme);\n            }\n            else if (prevScheme && this.themeSettingIdBeforeSchemeSwitch) {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.themeSettingIdBeforeSchemeSwitch, undefined);\n                if (theme) {\n                    this.setColorTheme(theme.id, 'auto');\n                }\n            }\n        }\n        return undefined;\n    }\n    getPreferredColorScheme() {\n        if (this.configurationService.getValue(ThemeSettings.DETECT_HC) && this.hostColorService.highContrast) {\n            return this.hostColorService.dark ? ColorScheme.HIGH_CONTRAST_DARK : ColorScheme.HIGH_CONTRAST_LIGHT;\n        }\n        if (this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            return this.hostColorService.dark ? ColorScheme.DARK : ColorScheme.LIGHT;\n        }\n        return undefined;\n    }\n    async applyPreferredColorTheme(type) {\n        let settingId;\n        switch (type) {\n            case ColorScheme.LIGHT:\n                settingId = ThemeSettings.PREFERRED_LIGHT_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n                settingId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                settingId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n                break;\n            default:\n                settingId = ThemeSettings.PREFERRED_DARK_THEME;\n        }\n        const themeSettingId = this.configurationService.getValue(settingId);\n        if (themeSettingId && typeof themeSettingId === 'string') {\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(themeSettingId, undefined);\n            if (theme) {\n                const configurationTarget = this.settings.findAutoConfigurationTarget(settingId);\n                return this.setColorTheme(theme.id, configurationTarget);\n            }\n        }\n        return null;\n    }\n    hasUpdatedDefaultThemes() {\n        return this.hasDefaultUpdated;\n    }\n    getColorTheme() {\n        return this.currentColorTheme;\n    }\n    async getColorThemes() {\n        return this.colorThemeRegistry.getThemes();\n    }\n    async getMarketplaceColorThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.colorThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    get onDidColorThemeChange() {\n        return this.onColorThemeChange.event;\n    }\n    setColorTheme(themeIdOrTheme, settingsTarget) {\n        return this.colorThemeSequencer.queue(async () => {\n            return this.internalSetColorTheme(themeIdOrTheme, settingsTarget);\n        });\n    }\n    async internalSetColorTheme(themeIdOrTheme, settingsTarget) {\n        if (!themeIdOrTheme) {\n            return null;\n        }\n        const themeId = isString(themeIdOrTheme) ? validateThemeId(themeIdOrTheme) : themeIdOrTheme.id;\n        if (this.currentColorTheme.isLoaded && themeId === this.currentColorTheme.id) {\n            if (settingsTarget !== 'preview') {\n                this.currentColorTheme.toStorage(this.storageService);\n            }\n            return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n        }\n        let themeData = this.colorThemeRegistry.findThemeById(themeId);\n        if (!themeData) {\n            if (themeIdOrTheme instanceof ColorThemeData) {\n                themeData = themeIdOrTheme;\n            }\n            else {\n                return null;\n            }\n        }\n        try {\n            await themeData.ensureLoaded(this.extensionResourceLoaderService);\n            themeData.setCustomizations(this.settings);\n            return this.applyTheme(themeData, settingsTarget);\n        }\n        catch (error) {\n            throw new Error(localizeWithPath('vs/workbench/services/themes/browser/workbenchThemeService', 'error.cannotloadtheme', \"Unable to load {0}: {1}\", themeData.location?.toString(), error.message));\n        }\n    }\n    reloadCurrentColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            try {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.currentColorTheme.settingsId) || this.currentColorTheme;\n                await theme.reload(this.extensionResourceLoaderService);\n                theme.setCustomizations(this.settings);\n                await this.applyTheme(theme, undefined, false);\n            }\n            catch (error) {\n                this.logService.info('Unable to reload {0}: {1}', this.currentColorTheme.location?.toString());\n            }\n        });\n    }\n    async restoreColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            const settingId = this.settings.colorTheme;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentColorTheme.settingsId) {\n                    await this.internalSetColorTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentColorTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService);\n                    theme.setCustomizations(this.settings);\n                    await this.applyTheme(theme, undefined, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    updateDynamicCSSRules(themeData) {\n        const cssRules = ( new Set());\n        const ruleCollector = {\n            addRule: (rule) => {\n                if (!( cssRules.has(rule))) {\n                    cssRules.add(rule);\n                }\n            }\n        };\n        ruleCollector.addRule(`.monaco-workbench { forced-color-adjust: none; }`);\n        themingRegistry.getThemingParticipants().forEach(p => p(themeData, ruleCollector, this.environmentService));\n        const colorVariables = [];\n        for (const item of getColorRegistry().getColors()) {\n            const color = themeData.getColor(item.id, true);\n            if (color) {\n                colorVariables.push(`${asCssVariableName(item.id)}: ${( color.toString())};`);\n            }\n        }\n        ruleCollector.addRule(`.monaco-workbench { ${colorVariables.join('\\n')} }`);\n        _applyRules([...cssRules].join('\\n'), colorThemeRulesClassName);\n    }\n    applyTheme(newTheme, settingsTarget, silent = false) {\n        this.updateDynamicCSSRules(newTheme);\n        if (this.currentColorTheme.id) {\n            this.container.classList.remove(...this.currentColorTheme.classNames);\n        }\n        else {\n            this.container.classList.remove(VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME);\n        }\n        this.container.classList.add(...newTheme.classNames);\n        this.currentColorTheme.clearCaches();\n        this.currentColorTheme = newTheme;\n        if (!this.colorThemingParticipantChangeListener) {\n            this.colorThemingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(_ => this.updateDynamicCSSRules(this.currentColorTheme));\n        }\n        this.colorThemeWatcher.update(newTheme);\n        this.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n        if (silent) {\n            return Promise.resolve(null);\n        }\n        this.onColorThemeChange.fire(this.currentColorTheme);\n        if (newTheme.isLoaded && settingsTarget !== 'preview') {\n            newTheme.toStorage(this.storageService);\n        }\n        return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n    }\n    sendTelemetry(themeId, themeData, themeType) {\n        if (themeData) {\n            const key = themeType + themeData.extensionId;\n            if (!this.themeExtensionsActivated.get(key)) {\n                this.telemetryService.publicLog2('activatePlugin', {\n                    id: themeData.extensionId,\n                    name: themeData.extensionName,\n                    isBuiltin: themeData.extensionIsBuiltin,\n                    publisherDisplayName: themeData.extensionPublisher,\n                    themeId: themeId\n                });\n                this.themeExtensionsActivated.set(key, true);\n            }\n        }\n    }\n    async getFileIconThemes() {\n        return this.fileIconThemeRegistry.getThemes();\n    }\n    getFileIconTheme() {\n        return this.currentFileIconTheme;\n    }\n    get onDidFileIconThemeChange() {\n        return this.onFileIconThemeChange.event;\n    }\n    async setFileIconTheme(iconThemeOrId, settingsTarget) {\n        return this.fileIconThemeSequencer.queue(async () => {\n            return this.internalSetFileIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetFileIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentFileIconTheme.id || !this.currentFileIconTheme.isLoaded) {\n            let newThemeData = this.fileIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof FileIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = FileIconThemeData.noIconTheme;\n            }\n            await newThemeData.ensureLoaded(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(newThemeData);\n        }\n        const themeData = this.currentFileIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setFileIconTheme(this.currentFileIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceFileIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.fileIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            await this.currentFileIconTheme.reload(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(this.currentFileIconTheme);\n        });\n    }\n    async restoreFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.fileIconTheme;\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentFileIconTheme.settingsId) {\n                    await this.internalSetFileIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentFileIconTheme) {\n                    await theme.ensureLoaded(this.fileIconThemeLoader);\n                    this.applyAndSetFileIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetFileIconTheme(iconThemeData, silent = false) {\n        this.currentFileIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, fileIconThemeRulesClassName);\n        if (iconThemeData.id) {\n            this.container.classList.add(fileIconsEnabledClass);\n        }\n        else {\n            this.container.classList.remove(fileIconsEnabledClass);\n        }\n        this.fileIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n        }\n        if (!silent) {\n            this.onFileIconThemeChange.fire(this.currentFileIconTheme);\n        }\n    }\n    async getProductIconThemes() {\n        return this.productIconThemeRegistry.getThemes();\n    }\n    getProductIconTheme() {\n        return this.currentProductIconTheme;\n    }\n    get onDidProductIconThemeChange() {\n        return this.onProductIconThemeChange.event;\n    }\n    async setProductIconTheme(iconThemeOrId, settingsTarget) {\n        return this.productIconThemeSequencer.queue(async () => {\n            return this.internalSetProductIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetProductIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentProductIconTheme.id || !this.currentProductIconTheme.isLoaded) {\n            let newThemeData = this.productIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof ProductIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = ProductIconThemeData.defaultTheme;\n            }\n            await newThemeData.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(newThemeData);\n        }\n        const themeData = this.currentProductIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setProductIconTheme(this.currentProductIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceProductIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.productIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            await this.currentProductIconTheme.reload(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(this.currentProductIconTheme);\n        });\n    }\n    async restoreProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.productIconTheme;\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentProductIconTheme.settingsId) {\n                    await this.internalSetProductIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentProductIconTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n                    this.applyAndSetProductIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetProductIconTheme(iconThemeData, silent = false) {\n        this.currentProductIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, productIconThemeRulesClassName);\n        this.productIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'productIcon');\n        }\n        if (!silent) {\n            this.onProductIconThemeChange.fire(this.currentProductIconTheme);\n        }\n    }\n};\nWorkbenchThemeService = ( __decorate([\n    ( __param(0, IExtensionService)),\n    ( __param(1, IStorageService)),\n    ( __param(2, IConfigurationService)),\n    ( __param(3, ITelemetryService)),\n    ( __param(4, IBrowserWorkbenchEnvironmentService)),\n    ( __param(5, IFileService)),\n    ( __param(6, IExtensionResourceLoaderService)),\n    ( __param(7, IWorkbenchLayoutService)),\n    ( __param(8, ILogService)),\n    ( __param(9, IHostColorSchemeService)),\n    ( __param(10, IUserDataInitializationService)),\n    ( __param(11, ILanguageService))\n], WorkbenchThemeService));\nclass ThemeFileWatcher {\n    constructor(fileService, environmentService, onUpdate) {\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.onUpdate = onUpdate;\n    }\n    update(theme) {\n        if (!isEqual(theme.location, this.watchedLocation)) {\n            this.dispose();\n            if (theme.location && (theme.watch || this.environmentService.isExtensionDevelopment)) {\n                this.watchedLocation = theme.location;\n                this.watcherDisposable = this.fileService.watch(theme.location);\n                this.fileService.onDidFilesChange(e => {\n                    if (this.watchedLocation && e.contains(this.watchedLocation, 0 )) {\n                        this.onUpdate();\n                    }\n                });\n            }\n        }\n    }\n    dispose() {\n        this.watcherDisposable = dispose(this.watcherDisposable);\n        this.fileChangeListener = dispose(this.fileChangeListener);\n        this.watchedLocation = undefined;\n    }\n}\nfunction _applyRules(styleSheetContent, rulesClassName) {\n    const themeStyles = mainWindow.document.head.getElementsByClassName(rulesClassName);\n    if (themeStyles.length === 0) {\n        const elStyle = createStyleSheet();\n        elStyle.className = rulesClassName;\n        elStyle.textContent = styleSheetContent;\n    }\n    else {\n        themeStyles[0].textContent = styleSheetContent;\n    }\n}\nregisterColorThemeSchemas();\nregisterFileIconThemeSchemas();\nregisterProductIconThemeSchemas();\n\nexport { WorkbenchThemeService };\n","var ConfirmResult;\n( (function(ConfirmResult) {\n    ConfirmResult[ConfirmResult[\"SAVE\"] = 0] = \"SAVE\";\n    ConfirmResult[ConfirmResult[\"DONT_SAVE\"] = 1] = \"DONT_SAVE\";\n    ConfirmResult[ConfirmResult[\"CANCEL\"] = 2] = \"CANCEL\";\n})(ConfirmResult || (ConfirmResult = {})));\n\nexport { ConfirmResult };\n","import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { localizeWithPath, localize2WithPath } from 'vscode/vscode/vs/nls';\nimport { KeyChord } from 'vscode/vscode/vs/base/common/keyCodes';\nimport { registerAction2, Action2, MenuId, MenuRegistry } from 'vscode/vscode/vs/platform/actions/common/actions';\nimport { equalsIgnoreCase } from 'vscode/vscode/vs/base/common/strings';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Categories } from 'vscode/vscode/vs/platform/action/common/actionCommonCategories';\nimport { IWorkbenchThemeService, ThemeSettings, ThemeSettingDefaults } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { VIEWLET_ID } from 'vscode/vscode/vs/workbench/contrib/extensions/common/extensions';\nimport { IExtensionGalleryService, IExtensionManagementService } from 'vscode/vscode/vs/platform/extensionManagement/common/extensionManagement';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/colorRegistry';\nimport { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService';\nimport { Color } from 'vscode/vscode/vs/base/common/color';\nimport { ColorScheme, isHighContrast } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { colorThemeSchemaId } from '../../../services/themes/common/colorThemeSchema.js';\nimport { onUnexpectedError, isCancellationError } from 'vscode/vscode/vs/base/common/errors';\nimport { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput';\nimport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData } from '../../../services/themes/browser/productIconThemeData.js';\nimport { IPaneCompositePartService } from 'vscode/vscode/vs/workbench/services/panecomposite/browser/panecomposite';\nimport { ThrottledDelayer } from 'vscode/vscode/vs/base/common/async';\nimport { CancellationTokenSource } from 'vscode/vscode/vs/base/common/cancellation';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log';\nimport { IProgressService } from 'vscode/vscode/vs/platform/progress/common/progress';\nimport { Codicon } from 'vscode/vscode/vs/base/common/codicons';\nimport { registerIcon } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vscode/vscode/vs/base/common/themables';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { IExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { CommandsRegistry, ICommandService } from 'vscode/vscode/vs/platform/commands/common/commands';\nimport { FileIconThemeData } from '../../../services/themes/browser/fileIconThemeData.js';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration';\nimport '../../../../../../../override/vs/platform/dialogs/common/dialogs.js';\nimport { Extensions as Extensions$1 } from 'vscode/vscode/vs/workbench/common/contributions';\nimport { Severity, INotificationService } from 'vscode/vscode/vs/platform/notification/common/notification';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry';\nimport { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\nimport { IDialogService } from 'vscode/vscode/vs/platform/dialogs/common/dialogs';\n\nvar DefaultThemeUpdatedNotificationContribution_1;\nconst manageExtensionIcon = registerIcon('theme-selection-manage-extension', Codicon.gear, ( localizeWithPath(\n    'vs/workbench/contrib/themes/browser/themes.contribution',\n    'manageExtensionIcon',\n    'Icon for the \\'Manage\\' action in the theme selection quick pick.'\n)));\nlet MarketplaceThemesPicker = class MarketplaceThemesPicker {\n    constructor(getMarketplaceColorThemes, marketplaceQuery, extensionGalleryService, extensionManagementService, quickInputService, logService, progressService, paneCompositeService, dialogService) {\n        this.getMarketplaceColorThemes = getMarketplaceColorThemes;\n        this.marketplaceQuery = marketplaceQuery;\n        this.extensionGalleryService = extensionGalleryService;\n        this.extensionManagementService = extensionManagementService;\n        this.quickInputService = quickInputService;\n        this.logService = logService;\n        this.progressService = progressService;\n        this.paneCompositeService = paneCompositeService;\n        this.dialogService = dialogService;\n        this._marketplaceExtensions = ( new Set());\n        this._marketplaceThemes = [];\n        this._searchOngoing = false;\n        this._searchError = undefined;\n        this._onDidChange = ( new Emitter());\n        this._queryDelayer = ( new ThrottledDelayer(200));\n        this._installedExtensions = extensionManagementService.getInstalled().then(installed => {\n            const result = ( new Set());\n            for (const ext of installed) {\n                result.add(ext.identifier.id);\n            }\n            return result;\n        });\n    }\n    get themes() {\n        return this._marketplaceThemes;\n    }\n    get onDidChange() {\n        return this._onDidChange.event;\n    }\n    trigger(value) {\n        if (this._tokenSource) {\n            this._tokenSource.cancel();\n            this._tokenSource = undefined;\n        }\n        this._queryDelayer.trigger(() => {\n            this._tokenSource = ( new CancellationTokenSource());\n            return this.doSearch(value, this._tokenSource.token);\n        });\n    }\n    async doSearch(value, token) {\n        this._searchOngoing = true;\n        this._onDidChange.fire();\n        try {\n            const installedExtensions = await this._installedExtensions;\n            const options = { text: `${this.marketplaceQuery} ${value}`, pageSize: 20 };\n            const pager = await this.extensionGalleryService.query(options, token);\n            for (let i = 0; i < pager.total && i < 1; i++) {\n                if (token.isCancellationRequested) {\n                    break;\n                }\n                const nThemes = this._marketplaceThemes.length;\n                const gallery = i === 0 ? pager.firstPage : await pager.getPage(i, token);\n                const promises = [];\n                const promisesGalleries = [];\n                for (let i = 0; i < gallery.length; i++) {\n                    if (token.isCancellationRequested) {\n                        break;\n                    }\n                    const ext = gallery[i];\n                    if (!( installedExtensions.has(ext.identifier.id)) && !( this._marketplaceExtensions.has(ext.identifier.id))) {\n                        this._marketplaceExtensions.add(ext.identifier.id);\n                        promises.push(this.getMarketplaceColorThemes(ext.publisher, ext.name, ext.version));\n                        promisesGalleries.push(ext);\n                    }\n                }\n                const allThemes = await Promise.all(promises);\n                for (let i = 0; i < allThemes.length; i++) {\n                    const ext = promisesGalleries[i];\n                    for (const theme of allThemes[i]) {\n                        this._marketplaceThemes.push({ id: theme.id, theme: theme, label: theme.label, description: `${ext.displayName} · ${ext.publisherDisplayName}`, galleryExtension: ext, buttons: [configureButton] });\n                    }\n                }\n                if (nThemes !== this._marketplaceThemes.length) {\n                    this._marketplaceThemes.sort((t1, t2) => t1.label.localeCompare(t2.label));\n                    this._onDidChange.fire();\n                }\n            }\n        }\n        catch (e) {\n            if (!isCancellationError(e)) {\n                this.logService.error(`Error while searching for themes:`, e);\n                this._searchError = 'message' in e ? e.message : String(e);\n            }\n        }\n        finally {\n            this._searchOngoing = false;\n            this._onDidChange.fire();\n        }\n    }\n    openQuickPick(value, currentTheme, selectTheme) {\n        let result = undefined;\n        return ( new Promise((s, _) => {\n            const quickpick = this.quickInputService.createQuickPick();\n            quickpick.items = [];\n            quickpick.sortByLabel = false;\n            quickpick.matchOnDescription = true;\n            quickpick.buttons = [this.quickInputService.backButton];\n            quickpick.title = 'Marketplace Themes';\n            quickpick.placeholder = ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'themes.selectMarketplaceTheme',\n                \"Type to Search More. Select to Install. Up/Down Keys to Preview\"\n            ));\n            quickpick.canSelectMany = false;\n            quickpick.onDidChangeValue(() => this.trigger(quickpick.value));\n            quickpick.onDidAccept(async (_) => {\n                const themeItem = quickpick.selectedItems[0];\n                if (themeItem?.galleryExtension) {\n                    result = 'selected';\n                    quickpick.hide();\n                    const success = await this.installExtension(themeItem.galleryExtension);\n                    if (success) {\n                        selectTheme(themeItem.theme, true);\n                    }\n                    else {\n                        selectTheme(currentTheme, true);\n                    }\n                }\n            });\n            quickpick.onDidTriggerItemButton(e => {\n                if (isItem(e.item)) {\n                    const extensionId = e.item.theme?.extensionData?.extensionId;\n                    if (extensionId) {\n                        openExtensionViewlet(this.paneCompositeService, `@id:${extensionId}`);\n                    }\n                    else {\n                        openExtensionViewlet(this.paneCompositeService, `${this.marketplaceQuery} ${quickpick.value}`);\n                    }\n                }\n            });\n            quickpick.onDidChangeActive(themes => {\n                if (result === undefined) {\n                    selectTheme(themes[0]?.theme, false);\n                }\n            });\n            quickpick.onDidHide(() => {\n                if (result === undefined) {\n                    selectTheme(currentTheme, true);\n                    result = 'cancelled';\n                }\n                quickpick.dispose();\n                s(result);\n            });\n            quickpick.onDidTriggerButton(e => {\n                if (e === this.quickInputService.backButton) {\n                    result = 'back';\n                    quickpick.hide();\n                }\n            });\n            this.onDidChange(() => {\n                let items = this.themes;\n                if (this._searchOngoing) {\n                    items = items.concat({ label: '$(sync~spin) Searching for themes...', id: undefined, alwaysShow: true });\n                }\n                else if (items.length === 0 && this._searchError) {\n                    items = [{ label: `$(error) ${( localizeWithPath(\n                        'vs/workbench/contrib/themes/browser/themes.contribution',\n                        'search.error',\n                        'Error while searching for themes: {0}',\n                        this._searchError\n                    ))}`, id: undefined, alwaysShow: true }];\n                }\n                const activeItemId = quickpick.activeItems[0]?.id;\n                const newActiveItem = activeItemId ? items.find(i => isItem(i) && i.id === activeItemId) : undefined;\n                quickpick.items = items;\n                if (newActiveItem) {\n                    quickpick.activeItems = [newActiveItem];\n                }\n            });\n            this.trigger(value);\n            quickpick.show();\n        }));\n    }\n    async installExtension(galleryExtension) {\n        openExtensionViewlet(this.paneCompositeService, `@id:${galleryExtension.identifier.id}`);\n        const result = await this.dialogService.confirm({\n            message: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'installExtension.confirm',\n                \"This will install extension '{0}' published by '{1}'. Do you want to continue?\",\n                galleryExtension.displayName,\n                galleryExtension.publisherDisplayName\n            )),\n            primaryButton: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'installExtension.button.ok',\n                \"OK\"\n            ))\n        });\n        if (!result.confirmed) {\n            return false;\n        }\n        try {\n            await this.progressService.withProgress({\n                location: 15 ,\n                title: ( localizeWithPath(\n                    'vs/workbench/contrib/themes/browser/themes.contribution',\n                    'installing extensions',\n                    \"Installing Extension {0}...\",\n                    galleryExtension.displayName\n                ))\n            }, async () => {\n                await this.extensionManagementService.installFromGallery(galleryExtension, {\n                    isMachineScoped: false,\n                });\n            });\n            return true;\n        }\n        catch (e) {\n            this.logService.error(`Problem installing extension ${galleryExtension.identifier.id}`, e);\n            return false;\n        }\n    }\n    dispose() {\n        if (this._tokenSource) {\n            this._tokenSource.cancel();\n            this._tokenSource = undefined;\n        }\n        this._queryDelayer.dispose();\n        this._marketplaceExtensions.clear();\n        this._marketplaceThemes.length = 0;\n    }\n};\nMarketplaceThemesPicker = ( __decorate([\n    ( __param(2, IExtensionGalleryService)),\n    ( __param(3, IExtensionManagementService)),\n    ( __param(4, IQuickInputService)),\n    ( __param(5, ILogService)),\n    ( __param(6, IProgressService)),\n    ( __param(7, IPaneCompositePartService)),\n    ( __param(8, IDialogService))\n], MarketplaceThemesPicker));\nlet InstalledThemesPicker = class InstalledThemesPicker {\n    constructor(installMessage, browseMessage, placeholderMessage, marketplaceTag, setTheme, getMarketplaceColorThemes, quickInputService, extensionGalleryService, paneCompositeService, extensionResourceLoaderService, instantiationService) {\n        this.installMessage = installMessage;\n        this.browseMessage = browseMessage;\n        this.placeholderMessage = placeholderMessage;\n        this.marketplaceTag = marketplaceTag;\n        this.setTheme = setTheme;\n        this.getMarketplaceColorThemes = getMarketplaceColorThemes;\n        this.quickInputService = quickInputService;\n        this.extensionGalleryService = extensionGalleryService;\n        this.paneCompositeService = paneCompositeService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.instantiationService = instantiationService;\n    }\n    async openQuickPick(picks, currentTheme) {\n        let marketplaceThemePicker;\n        if (this.extensionGalleryService.isEnabled()) {\n            if (this.extensionResourceLoaderService.supportsExtensionGalleryResources && this.browseMessage) {\n                marketplaceThemePicker = this.instantiationService.createInstance(MarketplaceThemesPicker, this.getMarketplaceColorThemes.bind(this), this.marketplaceTag);\n                picks = [...configurationEntries(this.browseMessage), ...picks];\n            }\n            else {\n                picks = [...picks, ...configurationEntries(this.installMessage)];\n            }\n        }\n        let selectThemeTimeout;\n        const selectTheme = (theme, applyTheme) => {\n            if (selectThemeTimeout) {\n                clearTimeout(selectThemeTimeout);\n            }\n            selectThemeTimeout = mainWindow.setTimeout(() => {\n                selectThemeTimeout = undefined;\n                const newTheme = (theme ?? currentTheme);\n                this.setTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined, err => {\n                    onUnexpectedError(err);\n                    this.setTheme(currentTheme, undefined);\n                });\n            }, applyTheme ? 0 : 200);\n        };\n        const pickInstalledThemes = (activeItemId) => {\n            return ( new Promise((s, _) => {\n                let isCompleted = false;\n                const autoFocusIndex = picks.findIndex(p => isItem(p) && p.id === activeItemId);\n                const quickpick = this.quickInputService.createQuickPick();\n                quickpick.items = picks;\n                quickpick.placeholder = this.placeholderMessage;\n                quickpick.activeItems = [picks[autoFocusIndex]];\n                quickpick.canSelectMany = false;\n                quickpick.matchOnDescription = true;\n                quickpick.onDidAccept(async (_) => {\n                    isCompleted = true;\n                    const theme = quickpick.selectedItems[0];\n                    if (!theme || typeof theme.id === 'undefined') {\n                        if (marketplaceThemePicker) {\n                            const res = await marketplaceThemePicker.openQuickPick(quickpick.value, currentTheme, selectTheme);\n                            if (res === 'back') {\n                                await pickInstalledThemes(undefined);\n                            }\n                        }\n                        else {\n                            openExtensionViewlet(this.paneCompositeService, `${this.marketplaceTag} ${quickpick.value}`);\n                        }\n                    }\n                    else {\n                        selectTheme(theme.theme, true);\n                    }\n                    quickpick.hide();\n                    s();\n                });\n                quickpick.onDidChangeActive(themes => selectTheme(themes[0]?.theme, false));\n                quickpick.onDidHide(() => {\n                    if (!isCompleted) {\n                        selectTheme(currentTheme, true);\n                        s();\n                    }\n                    quickpick.dispose();\n                });\n                quickpick.onDidTriggerItemButton(e => {\n                    if (isItem(e.item)) {\n                        const extensionId = e.item.theme?.extensionData?.extensionId;\n                        if (extensionId) {\n                            openExtensionViewlet(this.paneCompositeService, `@id:${extensionId}`);\n                        }\n                        else {\n                            openExtensionViewlet(this.paneCompositeService, `${this.marketplaceTag} ${quickpick.value}`);\n                        }\n                    }\n                });\n                quickpick.show();\n            }));\n        };\n        await pickInstalledThemes(currentTheme.id);\n        marketplaceThemePicker?.dispose();\n    }\n};\nInstalledThemesPicker = ( __decorate([\n    ( __param(6, IQuickInputService)),\n    ( __param(7, IExtensionGalleryService)),\n    ( __param(8, IPaneCompositePartService)),\n    ( __param(9, IExtensionResourceLoaderService)),\n    ( __param(10, IInstantiationService))\n], InstalledThemesPicker));\nconst SelectColorThemeCommandId = 'workbench.action.selectTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectColorThemeCommandId,\n            title: ( localize2WithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'selectTheme.label',\n                'Color Theme'\n            )),\n            category: Categories.Preferences,\n            f1: true,\n            keybinding: {\n                weight: 200 ,\n                primary: KeyChord(2048  | 41 , 2048  | 50 )\n            }\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const installMessage = ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'installColorThemes',\n            \"Install Additional Color Themes...\"\n        ));\n        const browseMessage = '$(plus) ' + ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'browseColorThemes',\n            \"Browse Additional Color Themes...\"\n        ));\n        const placeholderMessage = ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'themes.selectTheme',\n            \"Select Color Theme (Up/Down Keys to Preview)\"\n        ));\n        const marketplaceTag = 'category:themes';\n        const setTheme = (theme, settingsTarget) => themeService.setColorTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceColorThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, installMessage, browseMessage, placeholderMessage, marketplaceTag, setTheme, getMarketplaceColorThemes);\n        const themes = await themeService.getColorThemes();\n        const currentTheme = themeService.getColorTheme();\n        const picks = [\n            ...toEntries(themes.filter(t => t.type === ColorScheme.LIGHT), ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'themes.category.light',\n                \"light themes\"\n            ))),\n            ...toEntries(themes.filter(t => t.type === ColorScheme.DARK), ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'themes.category.dark',\n                \"dark themes\"\n            ))),\n            ...toEntries(themes.filter(t => isHighContrast(t.type)), ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'themes.category.hc',\n                \"high contrast themes\"\n            ))),\n        ];\n        await picker.openQuickPick(picks, currentTheme);\n    }\n});\nconst SelectFileIconThemeCommandId = 'workbench.action.selectIconTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectFileIconThemeCommandId,\n            title: ( localize2WithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'selectIconTheme.label',\n                'File Icon Theme'\n            )),\n            category: Categories.Preferences,\n            f1: true\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const installMessage = ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'installIconThemes',\n            \"Install Additional File Icon Themes...\"\n        ));\n        const placeholderMessage = ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'themes.selectIconTheme',\n            \"Select File Icon Theme (Up/Down Keys to Preview)\"\n        ));\n        const marketplaceTag = 'tag:icon-theme';\n        const setTheme = (theme, settingsTarget) => themeService.setFileIconTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceFileIconThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, installMessage, undefined, placeholderMessage, marketplaceTag, setTheme, getMarketplaceColorThemes);\n        const picks = [\n            { type: 'separator', label: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'fileIconThemeCategory',\n                'file icon themes'\n            )) },\n            { id: '', theme: FileIconThemeData.noIconTheme, label: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'noIconThemeLabel',\n                'None'\n            )), description: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'noIconThemeDesc',\n                'Disable File Icons'\n            )) },\n            ...toEntries(await themeService.getFileIconThemes()),\n        ];\n        await picker.openQuickPick(picks, themeService.getFileIconTheme());\n    }\n});\nconst SelectProductIconThemeCommandId = 'workbench.action.selectProductIconTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectProductIconThemeCommandId,\n            title: ( localize2WithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'selectProductIconTheme.label',\n                'Product Icon Theme'\n            )),\n            category: Categories.Preferences,\n            f1: true\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const installMessage = ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'installProductIconThemes',\n            \"Install Additional Product Icon Themes...\"\n        ));\n        const browseMessage = '$(plus) ' + ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'browseProductIconThemes',\n            \"Browse Additional Product Icon Themes...\"\n        ));\n        const placeholderMessage = ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'themes.selectProductIconTheme',\n            \"Select Product Icon Theme (Up/Down Keys to Preview)\"\n        ));\n        const marketplaceTag = 'tag:product-icon-theme';\n        const setTheme = (theme, settingsTarget) => themeService.setProductIconTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceProductIconThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, installMessage, browseMessage, placeholderMessage, marketplaceTag, setTheme, getMarketplaceColorThemes);\n        const picks = [\n            { type: 'separator', label: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'productIconThemeCategory',\n                'product icon themes'\n            )) },\n            { id: DEFAULT_PRODUCT_ICON_THEME_ID, theme: ProductIconThemeData.defaultTheme, label: ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'defaultProductIconThemeLabel',\n                'Default'\n            )) },\n            ...toEntries(await themeService.getProductIconThemes()),\n        ];\n        await picker.openQuickPick(picks, themeService.getProductIconTheme());\n    }\n});\nCommandsRegistry.registerCommand('workbench.action.previewColorTheme', async function (accessor, extension, themeSettingsId) {\n    const themeService = accessor.get(IWorkbenchThemeService);\n    let themes = findBuiltInThemes(await themeService.getColorThemes(), extension);\n    if (themes.length === 0) {\n        themes = await themeService.getMarketplaceColorThemes(extension.publisher, extension.name, extension.version);\n    }\n    for (const theme of themes) {\n        if (!themeSettingsId || theme.settingsId === themeSettingsId) {\n            await themeService.setColorTheme(theme, 'preview');\n            return theme.settingsId;\n        }\n    }\n    return undefined;\n});\nfunction findBuiltInThemes(themes, extension) {\n    return themes.filter(({ extensionData }) => extensionData && extensionData.extensionIsBuiltin && equalsIgnoreCase(extensionData.extensionPublisher, extension.publisher) && equalsIgnoreCase(extensionData.extensionName, extension.name));\n}\nfunction configurationEntries(label) {\n    return [\n        {\n            type: 'separator'\n        },\n        {\n            id: undefined,\n            label: label,\n            alwaysShow: true,\n            buttons: [configureButton]\n        }\n    ];\n}\nfunction openExtensionViewlet(paneCompositeService, query) {\n    return paneCompositeService.openPaneComposite(VIEWLET_ID, 0 , true).then(viewlet => {\n        if (viewlet) {\n            (viewlet?.getViewPaneContainer()).search(query);\n            viewlet.focus();\n        }\n    });\n}\nfunction isItem(i) {\n    return i['type'] !== 'separator';\n}\nfunction toEntry(theme) {\n    const settingId = theme.settingsId ?? undefined;\n    const item = {\n        id: theme.id,\n        theme: theme,\n        label: theme.label,\n        description: theme.description || (theme.label === settingId ? undefined : settingId),\n    };\n    if (theme.extensionData) {\n        item.buttons = [configureButton];\n    }\n    return item;\n}\nfunction toEntries(themes, label) {\n    const sorter = (t1, t2) => t1.label.localeCompare(t2.label);\n    const entries = ( themes.map(toEntry)).sort(sorter);\n    if (entries.length > 0 && label) {\n        entries.unshift({ type: 'separator', label });\n    }\n    return entries;\n}\nconst configureButton = {\n    iconClass: ThemeIcon.asClassName(manageExtensionIcon),\n    tooltip: ( localizeWithPath(\n        'vs/workbench/contrib/themes/browser/themes.contribution',\n        'manage extension',\n        \"Manage Extension\"\n    )),\n};\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: 'workbench.action.generateColorTheme',\n            title: ( localize2WithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'generateColorTheme.label',\n                'Generate Color Theme From Current Settings'\n            )),\n            category: Categories.Developer,\n            f1: true\n        });\n    }\n    run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const theme = themeService.getColorTheme();\n        const colors = ( Registry.as(Extensions.ColorContribution)).getColors();\n        const colorIds = ( colors.map(c => c.id)).sort();\n        const resultingColors = {};\n        const inherited = [];\n        for (const colorId of colorIds) {\n            const color = theme.getColor(colorId, false);\n            if (color) {\n                resultingColors[colorId] = Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                inherited.push(colorId);\n            }\n        }\n        const nullDefaults = [];\n        for (const id of inherited) {\n            const color = theme.getColor(id);\n            if (color) {\n                resultingColors['__' + id] = Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                nullDefaults.push(id);\n            }\n        }\n        for (const id of nullDefaults) {\n            resultingColors['__' + id] = null;\n        }\n        let contents = JSON.stringify({\n            '$schema': colorThemeSchemaId,\n            type: theme.type,\n            colors: resultingColors,\n            tokenColors: theme.tokenColors.filter(t => !!t.scope)\n        }, null, '\\t');\n        contents = contents.replace(/\\\"__/g, '//\"');\n        const editorService = accessor.get(IEditorService);\n        return editorService.openEditor({ resource: undefined, contents, languageId: 'jsonc', options: { pinned: true } });\n    }\n});\nconst toggleLightDarkThemesCommandId = 'workbench.action.toggleLightDarkThemes';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: toggleLightDarkThemesCommandId,\n            title: ( localize2WithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'toggleLightDarkThemes.label',\n                'Toggle between Light/Dark Themes'\n            )),\n            category: Categories.Preferences,\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const configurationService = accessor.get(IConfigurationService);\n        const currentTheme = themeService.getColorTheme();\n        let newSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n        switch (currentTheme.type) {\n            case ColorScheme.LIGHT:\n                newSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n                break;\n            case ColorScheme.DARK:\n                newSettingsId = ThemeSettings.PREFERRED_LIGHT_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                newSettingsId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n                newSettingsId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n                break;\n        }\n        const themeSettingId = configurationService.getValue(newSettingsId);\n        if (themeSettingId && typeof themeSettingId === 'string') {\n            const theme = (await themeService.getColorThemes()).find(t => t.settingsId === themeSettingId);\n            if (theme) {\n                themeService.setColorTheme(theme.id, 'auto');\n            }\n        }\n    }\n});\nconst browseColorThemesInMarketplaceCommandId = 'workbench.action.browseColorThemesInMarketplace';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: browseColorThemesInMarketplaceCommandId,\n            title: ( localize2WithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                'browseColorThemeInMarketPlace.label',\n                'Browse Color Themes in Marketplace'\n            )),\n            category: Categories.Preferences,\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const marketplaceTag = 'category:themes';\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const extensionGalleryService = accessor.get(IExtensionGalleryService);\n        const extensionResourceLoaderService = accessor.get(IExtensionResourceLoaderService);\n        const instantiationService = accessor.get(IInstantiationService);\n        if (!extensionGalleryService.isEnabled() || !extensionResourceLoaderService.supportsExtensionGalleryResources) {\n            return;\n        }\n        const currentTheme = themeService.getColorTheme();\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceColorThemes(publisher, name, version);\n        let selectThemeTimeout;\n        const selectTheme = (theme, applyTheme) => {\n            if (selectThemeTimeout) {\n                clearTimeout(selectThemeTimeout);\n            }\n            selectThemeTimeout = mainWindow.setTimeout(() => {\n                selectThemeTimeout = undefined;\n                const newTheme = (theme ?? currentTheme);\n                themeService.setColorTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined, err => {\n                    onUnexpectedError(err);\n                    themeService.setColorTheme(currentTheme, undefined);\n                });\n            }, applyTheme ? 0 : 200);\n        };\n        const marketplaceThemePicker = instantiationService.createInstance(MarketplaceThemesPicker, getMarketplaceColorThemes, marketplaceTag);\n        await marketplaceThemePicker.openQuickPick('', themeService.getColorTheme(), selectTheme).then(undefined, onUnexpectedError);\n    }\n});\nconst ThemesSubMenu = ( new MenuId('ThemesSubMenu'));\nMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n    title: ( localizeWithPath(\n        'vs/workbench/contrib/themes/browser/themes.contribution',\n        'themes',\n        \"Themes\"\n    )),\n    submenu: ThemesSubMenu,\n    group: '2_configuration',\n    order: 7\n});\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n    title: ( localizeWithPath(\n        'vs/workbench/contrib/themes/browser/themes.contribution',\n        { key: 'miSelectTheme', comment: ['&& denotes a mnemonic'] },\n        \"&&Theme\"\n    )),\n    submenu: ThemesSubMenu,\n    group: '2_configuration',\n    order: 7\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectColorThemeCommandId,\n        title: ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'selectTheme.label',\n            'Color Theme'\n        ))\n    },\n    order: 1\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectFileIconThemeCommandId,\n        title: ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'themes.selectIconTheme.label',\n            \"File Icon Theme\"\n        ))\n    },\n    order: 2\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectProductIconThemeCommandId,\n        title: ( localizeWithPath(\n            'vs/workbench/contrib/themes/browser/themes.contribution',\n            'themes.selectProductIconTheme.label',\n            \"Product Icon Theme\"\n        ))\n    },\n    order: 3\n});\nlet DefaultThemeUpdatedNotificationContribution = class DefaultThemeUpdatedNotificationContribution {\n    static { DefaultThemeUpdatedNotificationContribution_1 = this; }\n    static { this.STORAGE_KEY = 'themeUpdatedNotificationShown'; }\n    constructor(_notificationService, _workbenchThemeService, _storageService, _commandService, _telemetryService, _hostService) {\n        this._notificationService = _notificationService;\n        this._workbenchThemeService = _workbenchThemeService;\n        this._storageService = _storageService;\n        this._commandService = _commandService;\n        this._telemetryService = _telemetryService;\n        this._hostService = _hostService;\n        if (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, -1 )) {\n            return;\n        }\n        setTimeout(async () => {\n            if (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, -1 )) {\n                return;\n            }\n            if (await this._hostService.hadLastFocus()) {\n                this._storageService.store(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, true, -1 , 0 );\n                if (this._workbenchThemeService.hasUpdatedDefaultThemes()) {\n                    this._showYouGotMigratedNotification();\n                }\n                else {\n                    const currentTheme = this._workbenchThemeService.getColorTheme().settingsId;\n                    if (currentTheme === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD || currentTheme === ThemeSettingDefaults.COLOR_THEME_DARK_OLD) {\n                        this._tryNewThemeNotification();\n                    }\n                }\n            }\n        }, 3000);\n    }\n    async _showYouGotMigratedNotification() {\n        const usingLight = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT;\n        const newThemeSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n        const newTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n        if (newTheme) {\n            const choices = [\n                {\n                    label: ( localizeWithPath(\n                        'vs/workbench/contrib/themes/browser/themes.contribution',\n                        'button.keep',\n                        \"Keep New Theme\"\n                    )),\n                    run: () => {\n                        this._writeTelemetry('keepNew');\n                    }\n                },\n                {\n                    label: ( localizeWithPath(\n                        'vs/workbench/contrib/themes/browser/themes.contribution',\n                        'button.browse',\n                        \"Browse Themes\"\n                    )),\n                    run: () => {\n                        this._writeTelemetry('browse');\n                        this._commandService.executeCommand(SelectColorThemeCommandId);\n                    }\n                },\n                {\n                    label: ( localizeWithPath(\n                        'vs/workbench/contrib/themes/browser/themes.contribution',\n                        'button.revert',\n                        \"Revert\"\n                    )),\n                    run: async () => {\n                        this._writeTelemetry('keepOld');\n                        const oldSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD : ThemeSettingDefaults.COLOR_THEME_DARK_OLD;\n                        const oldTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === oldSettingsId);\n                        if (oldTheme) {\n                            this._workbenchThemeService.setColorTheme(oldTheme, 'auto');\n                        }\n                    }\n                }\n            ];\n            await this._notificationService.prompt(Severity.Info, ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                { key: 'themeUpdatedNotification', comment: ['{0} is the name of the new default theme'] },\n                \"Visual Studio Code now ships with a new default theme '{0}'. If you prefer, you can switch back to the old theme or try one of the many other color themes available.\",\n                newTheme.label\n            )), choices, {\n                onCancel: () => this._writeTelemetry('cancel')\n            });\n        }\n    }\n    async _tryNewThemeNotification() {\n        const newThemeSettingsId = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n        const theme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n        if (theme) {\n            const choices = [{\n                    label: ( localizeWithPath(\n                        'vs/workbench/contrib/themes/browser/themes.contribution',\n                        'button.tryTheme',\n                        \"Try New Theme\"\n                    )),\n                    run: () => {\n                        this._writeTelemetry('tryNew');\n                        this._workbenchThemeService.setColorTheme(theme, 'auto');\n                    }\n                },\n                {\n                    label: ( localizeWithPath(\n                        'vs/workbench/contrib/themes/browser/themes.contribution',\n                        'button.cancel',\n                        \"Cancel\"\n                    )),\n                    run: () => {\n                        this._writeTelemetry('cancel');\n                    }\n                }];\n            await this._notificationService.prompt(Severity.Info, ( localizeWithPath(\n                'vs/workbench/contrib/themes/browser/themes.contribution',\n                { key: 'newThemeNotification', comment: ['{0} is the name of the new default theme'] },\n                \"Visual Studio Code now ships with a new default theme '{0}'. Do you want to give it a try?\",\n                theme.label\n            )), choices, { onCancel: () => this._writeTelemetry('cancel') });\n        }\n    }\n    _writeTelemetry(outcome) {\n        this._telemetryService.publicLog2('themeUpdatedNotication', {\n            web: isWeb,\n            reaction: outcome\n        });\n    }\n};\nDefaultThemeUpdatedNotificationContribution = DefaultThemeUpdatedNotificationContribution_1 = ( __decorate([\n    ( __param(0, INotificationService)),\n    ( __param(1, IWorkbenchThemeService)),\n    ( __param(2, IStorageService)),\n    ( __param(3, ICommandService)),\n    ( __param(4, ITelemetryService)),\n    ( __param(5, IHostService))\n], DefaultThemeUpdatedNotificationContribution));\nconst workbenchRegistry = ( Registry.as(Extensions$1.Workbench));\nworkbenchRegistry.registerWorkbenchContribution(DefaultThemeUpdatedNotificationContribution, 4 );\n\nexport { manageExtensionIcon };\n","import { WorkbenchThemeService } from './vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js';\nimport { IThemeService } from 'vscode/vscode/vs/platform/theme/common/themeService';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\nimport getServiceOverride$1 from '@codingame/monaco-vscode-files-service-override';\nimport './vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.js';\n\nclass StandaloneWorkbenchThemeService extends WorkbenchThemeService {\n    registerEditorContainer() {\n        return {\n            dispose() { }\n        };\n    }\n    setTheme(themeName) {\n        void this.getColorThemes().then(themes => {\n            setTimeout(() => {\n                void this.setColorTheme(themes.find(theme => theme.settingsId === themeName) ?? themeName, 8 );\n            });\n        });\n    }\n}\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( IThemeService.toString())]: new SyncDescriptor(StandaloneWorkbenchThemeService, [], false)\n    };\n}\n\nexport { getServiceOverride as default };\n"],"names":["__decorate","decorators","target","key","desc","c","r","d","i","__param","paramIndex","decorator","settingToColorIdMapping","addSettingMapping","settingId","colorId","colorIds","convertSettings","oldSettings","result","rule","settings","settingKey","mappings","colorHex","color","Color","editorBackground","editorForeground","editorSelectionBackground","editorInactiveSelection","editorSelectionHighlight","editorFindMatchHighlight","editorFindMatch","editorHoverHighlight","editorFindRangeHighlight","editorLineHighlight","editorRangeHighlight","editorCursorForeground","editorWhitespaces","editorIndentGuide1","editorActiveIndentGuide1","ansiColorMap","parse","content","_parse","filename","locationKeyName","len","pos","line","char","advancePosBy","by","advancePosTo","to","skipWhitespace","chCode","advanceIfStartsWith","str","advanceUntil","nextOccurence","captureUntil","state","cur","stateStack","objStack","curKey","pushState","newState","newCur","popState","fail","msg","dictState","newDict","newArr","arrState","enterDict","leaveDict","enterArray","leaveArray","acceptKey","val","acceptString","acceptReal","acceptInteger","acceptDate","acceptData","acceptBool","escapeVal","_","m0","parseOpenTag","isClosed","parseTagValue","tag","peekChCode","createMatchers","selector","matchesName","results","tokenizer","newTokenizer","token","priority","matcher","parseConjunction","parseOperand","expressionToNegate","matcherInput","expressionInParents","parseInnerExpression","isIdentifier","identifiers","matchers","min","max","input","regex","match","res","colorRegistry","Registry","Extensions","tokenClassificationRegistry","getTokenClassificationRegistry","tokenGroupToScopesMap","_ColorThemeData","id","label","settingsId","addRule","hasDefaultTokens","normalizeColor","foreground","background","defaultThemeColors","useDefault","isUndefined","type","modifiers","language","definitions","score","_processStyle","matchScore","style","definition","property","info","_processSemanticTokenRule","hasUndefinedStyleProperty","k","tokenStyleValue","TokenStyle","parseClassifierString","index","TokenColorIndex","defaultColor","typeWithLanguage","defaultLanguage","scopes","getScopeMatcher","scope","findTokenStyleForScopeInScopes","scopeMatchers","themingRules","themingRule","foregroundScore","foregroundThemingRule","fontStyleScore","isString","fontStyle","fontStyleThemingRule","colors","themeSpecificColors","isObject","colorVal","customTokenColors","themeSpecificTokenColors","semanticTokenColors","THEME_SCOPE_OPEN_PAREN","THEME_SCOPE_CLOSE_PAREN","themeId","themeIdFirstChar","themeIdLastChar","themeIdPrefix","themeIdInfix","themeIdSuffix","THEME_SCOPE_WILDCARD","scopedColors","themeScopeList","themeScopeRegex","themeScope","scopedThemeSpecificColors","subkey","originalColors","overrideColors","tokenStylingRuleSection","readSemanticTokenRule","tokenGroup","group","value","extensionResourceLoaderService","_loadColorTheme","storageService","colorMapData","tc","SemanticTokenRule","ExtensionData","VS_LIGHT_THEME","ColorScheme","VS_HC_THEME","VS_HC_LIGHT_THEME","themeType","colorMap","getThemeTypeSelector","themeData","data","theme","rulesData","colorThemeLocation","extensionData","baseTheme","themeSelector","toCSSSelector","basename","ColorThemeData","extensionId","path","themeLocation","extname","errors","contentValue","localizeWithPath","e","getParseErrorMessage","getNodeType","joinPath","dirname","tokenColors","_loadSyntaxTokens","parse$1","error","noMatch","_scope","nameMatcher","identifers","findInIdents","s","lastIndent","scopesAreMatching","lastScopeIndex","lastIdentifierIndex","thisScopeName","scopeName","ruleScope","rs","selectorString","isSemanticTokenColorizationSetting","isBoolean","upper","hexUpper","charCode","fontIdRegex","fontStyleRegex","fontWeightRegex","fontSizeRegex","fontFormatRegex","schemaId","schema","iconsSchemaId","registerProductIconThemeSchemas","registerFileIconThemeSchemas","_FileIconThemeData","themeLoader","iconTheme","iconThemeLocation","FileIconThemeData","FileIconThemeLoader","fileService","languageService","iconThemeDocument","location","iconThemeDocumentLocation","hasSpecificFileIcons","selectorByDefinitionId","coveredLanguages","iconThemeDocumentLocationDirname","resolvePath","collectSelectors","associations","baseThemeClassName","addSelector","defId","list","qualifier","expanded","rootFolder","rootFolderExpanded","folderNames","selectors","name","handleParentFolder","escapeCSS","folderNamesExpanded","rootFolderNames","rootFolderNamesExpanded","languageIds","languageId","fileExtensions","segments","fileNames","fileName","showLanguageModeIcons","cssRules","fonts","fontSizes","defaultFontSize","font","src","l","asCSSUrl","body","fontSize","icon","lastIndexOfSlash","parentFolder","mainWindow","textMateScopes","textmateColorsSchemaId","textmateColorGroupSchemaId","textmateColorSchema","colorThemeSchemaId","colorThemeSchema","workbenchColorsSchemaId","tokenStylingSchemaId","registerColorThemeSchemas","schemaRegistry","registerColorThemeExtensionPoint","ExtensionsRegistry","VS_DARK_THEME","registerFileIconThemeExtensionPoint","registerProductIconThemeExtensionPoint","ThemeDataRenderer","Disposable","manifest","_a","_b","_c","markdown","MarkdownString","SyncDescriptor","ThemeRegistry","themesExtPoint","create","idRequired","builtInTheme","Emitter","extensions","delta","previousIds","added","ext","removed","extensionLocation","themeContributions","resultingThemes","log","isEqualOrParent","allThemes","t","defaultSettingsId","defaultTheme","extLocation","themes","configurationRegistry","colorThemeSettingEnum","colorThemeSettingEnumItemLabels","colorThemeSettingEnumDescriptions","formatSettingAsLink","colorThemeSettingSchema","isWeb","ThemeSettingDefaults","preferredDarkThemeSettingSchema","ThemeSettings","preferredLightThemeSettingSchema","preferredHCDarkThemeSettingSchema","preferredHCLightThemeSettingSchema","detectColorSchemeSettingSchema","colorCustomizationsSchema","fileIconThemeSettingSchema","productIconThemeSettingSchema","detectHCSchemeSettingSchema","themeSettingsConfiguration","themeSettingsWindowConfiguration","tokenGroupSettings","description","themeSpecificSettingKey","tokenColorSchema","tokenColorCustomizationSchema","semanticTokenColorSchema","semanticTokenColorCustomizationSchema","tokenColorCustomizationConfiguration","updateColorThemeConfigurationSchemas","a","b","themeSpecificWorkbenchColors","themeSpecificSemanticTokenColors","workbenchColors","updateFileIconThemeConfigurationSchemas","updateProductIconThemeConfigurationSchemas","ThemeConfiguration","configurationService","settingsTarget","DEFAULT_PRODUCT_ICON_THEME_ID","_ProductIconThemeData","iconContribution","_resolveIconDefinition","logService","warnings","_loadProductIconThemeDocument","iconDefinitions","iconFontDefinitions","restoredIconDefinitions","entry","fontCharacter","fontId","iconFontDefinition","IconFontDefinition","ProductIconThemeData","parseErrors","sanitizedFonts","fontWeight","sanitizedSrc","iconFontLocation","primaryFontId","iconId","fontDefinition","iconRegistry","getIconRegistry","defaults","ThemeIcon","ic","PERSISTED_OS_COLOR_SCHEME","PERSISTED_OS_COLOR_SCHEME_SCOPE","defaultThemeExtensionId","DEFAULT_FILE_ICON_THEME_ID","fileIconsEnabledClass","colorThemeRulesClassName","fileIconThemeRulesClassName","productIconThemeRulesClassName","themingRegistry","validateThemeId","colorThemesExtPoint","fileIconThemesExtPoint","productIconThemesExtPoint","WorkbenchThemeService","extensionService","telemetryService","environmentService","layoutService","hostColorService","userDataInitializationService","ThemeFileWatcher","Sequencer","colorThemeSetting","preferredColorScheme","defaultColorMap","COLOR_THEME_LIGHT_INITIAL_COLORS","COLOR_THEME_DARK_INITIAL_COLORS","initialColorTheme","fileIconData","productIconData","onUnexpectedError","codiconStyleSheet","createStyleSheet","iconsStyleSheet","getIconsStyleSheet","updateAll","delayer","RunOnceScheduler","extDevLocs","extDevLoc","initializeColorTheme","devThemes","matchedColorTheme","prevScheme","fallbackTheme","initializeFileIconTheme","initializeProductIconTheme","lazyPreferredColorScheme","getPreferredColorScheme","hasColorChanges","prevColorId","event","prevFileIconId","prevProductIconId","ct","fit","pit","scheme","themeSettingId","configurationTarget","publisher","version","manifestContent","themeIdOrTheme","ruleCollector","p","colorVariables","item","getColorRegistry","asCssVariableName","_applyRules","newTheme","silent","iconThemeOrId","newThemeData","getRemoteAuthority","iconThemeData","IExtensionService","IStorageService","IConfigurationService","ITelemetryService","IBrowserWorkbenchEnvironmentService","IFileService","IExtensionResourceLoaderService","IWorkbenchLayoutService","ILogService","IHostColorSchemeService","IUserDataInitializationService","ILanguageService","onUpdate","isEqual","dispose","styleSheetContent","rulesClassName","themeStyles","elStyle","ConfirmResult","DefaultThemeUpdatedNotificationContribution_1","manageExtensionIcon","registerIcon","Codicon","MarketplaceThemesPicker","getMarketplaceColorThemes","marketplaceQuery","extensionGalleryService","extensionManagementService","quickInputService","progressService","paneCompositeService","dialogService","ThrottledDelayer","installed","CancellationTokenSource","installedExtensions","options","pager","nThemes","gallery","promises","promisesGalleries","configureButton","t1","t2","isCancellationError","currentTheme","selectTheme","quickpick","themeItem","success","isItem","openExtensionViewlet","items","activeItemId","newActiveItem","galleryExtension","IExtensionGalleryService","IExtensionManagementService","IQuickInputService","IProgressService","IPaneCompositePartService","IDialogService","InstalledThemesPicker","installMessage","browseMessage","placeholderMessage","marketplaceTag","setTheme","instantiationService","picks","marketplaceThemePicker","configurationEntries","selectThemeTimeout","applyTheme","err","pickInstalledThemes","isCompleted","autoFocusIndex","IInstantiationService","SelectColorThemeCommandId","registerAction2","Action2","localize2WithPath","Categories","KeyChord","accessor","themeService","IWorkbenchThemeService","picker","toEntries","isHighContrast","SelectFileIconThemeCommandId","SelectProductIconThemeCommandId","CommandsRegistry","extension","themeSettingsId","findBuiltInThemes","equalsIgnoreCase","query","VIEWLET_ID","viewlet","toEntry","sorter","entries","resultingColors","inherited","nullDefaults","contents","IEditorService","toggleLightDarkThemesCommandId","newSettingsId","browseColorThemesInMarketplaceCommandId","ThemesSubMenu","MenuId","MenuRegistry","DefaultThemeUpdatedNotificationContribution","_notificationService","_workbenchThemeService","_storageService","_commandService","_telemetryService","_hostService","usingLight","newThemeSettingsId","choices","oldSettingsId","oldTheme","Severity","outcome","INotificationService","ICommandService","IHostService","workbenchRegistry","Extensions$1","StandaloneWorkbenchThemeService","themeName","getServiceOverride","getServiceOverride$1","IThemeService"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}