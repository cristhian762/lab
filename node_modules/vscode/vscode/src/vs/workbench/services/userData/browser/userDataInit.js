import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { Extensions } from '../../../common/contributions.js';
import { Registry } from '../../../../platform/registry/common/platform.js';
import { isWeb } from '../../../../base/common/platform.js';
import { IExtensionService } from '../../extensions/common/extensions.js';
import { mark } from '../../../../base/common/performance.js';
const IUserDataInitializationService = ( createDecorator('IUserDataInitializationService'));
class UserDataInitializationService {
    constructor(initializers = []) {
        this.initializers = initializers;
    }
    async whenInitializationFinished() {
        if (await this.requiresInitialization()) {
            await Promise.all(( this.initializers.map(initializer => initializer.whenInitializationFinished())));
        }
    }
    async requiresInitialization() {
        return ( (await Promise.all(( this.initializers.map(initializer => initializer.requiresInitialization())))).some(result => result));
    }
    async initializeRequiredResources() {
        if (await this.requiresInitialization()) {
            await Promise.all(( this.initializers.map(initializer => initializer.initializeRequiredResources())));
        }
    }
    async initializeOtherResources(instantiationService) {
        if (await this.requiresInitialization()) {
            await Promise.all(( this.initializers.map(initializer => initializer.initializeOtherResources(instantiationService))));
        }
    }
    async initializeInstalledExtensions(instantiationService) {
        if (await this.requiresInitialization()) {
            await Promise.all(( this.initializers.map(
                initializer => initializer.initializeInstalledExtensions(instantiationService)
            )));
        }
    }
}
let InitializeOtherResourcesContribution = class InitializeOtherResourcesContribution {
    constructor(userDataInitializeService, instantiationService, extensionService) {
        extensionService.whenInstalledExtensionsRegistered().then(() => this.initializeOtherResource(userDataInitializeService, instantiationService));
    }
    async initializeOtherResource(userDataInitializeService, instantiationService) {
        if (await userDataInitializeService.requiresInitialization()) {
            mark('code/willInitOtherUserData');
            await userDataInitializeService.initializeOtherResources(instantiationService);
            mark('code/didInitOtherUserData');
        }
    }
};
InitializeOtherResourcesContribution = ( __decorate([
    ( __param(0, IUserDataInitializationService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IExtensionService))
], InitializeOtherResourcesContribution));
if (isWeb) {
    const workbenchRegistry = ( Registry.as(Extensions.Workbench));
    workbenchRegistry.registerWorkbenchContribution(InitializeOtherResourcesContribution, 3 );
}
export { IUserDataInitializationService, UserDataInitializationService };
