import { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';
import { RawContextKey, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';
import { localize2WithPath, localizeWithPath } from '../../../../nls.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
import { Categories } from '../../../../platform/action/common/actionCommonCategories.js';
const IUserDataSyncWorkbenchService = ( createDecorator('IUserDataSyncWorkbenchService'));
function getSyncAreaLabel(source) {
    switch (source) {
        case "settings" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'settings',
            "Settings"
        ));
        case "keybindings" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'keybindings',
            "Keyboard Shortcuts"
        ));
        case "snippets" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'snippets',
            "User Snippets"
        ));
        case "tasks" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'tasks',
            "User Tasks"
        ));
        case "extensions" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'extensions',
            "Extensions"
        ));
        case "globalState" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'ui state label',
            "UI State"
        ));
        case "profiles" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'profiles',
            "Profiles"
        ));
        case "workspaceState" : return ( localizeWithPath(
            'vs/workbench/services/userDataSync/common/userDataSync',
            'workspace state label',
            "Workspace State"
        ));
    }
}
const SYNC_TITLE = ( localize2WithPath(
    'vs/workbench/services/userDataSync/common/userDataSync',
    'sync category',
    "Settings Sync"
));
const SYNC_VIEW_ICON = registerIcon('settings-sync-view-icon', Codicon.sync, ( localizeWithPath(
    'vs/workbench/services/userDataSync/common/userDataSync',
    'syncViewIcon',
    'View icon of the Settings Sync view.'
)));
const CONTEXT_SYNC_STATE = ( new RawContextKey('syncStatus', "uninitialized" ));
const CONTEXT_SYNC_ENABLEMENT = ( new RawContextKey('syncEnabled', false));
const CONTEXT_ACCOUNT_STATE = ( new RawContextKey('userDataSyncAccountStatus', "unavailable" ));
const CONTEXT_ENABLE_ACTIVITY_VIEWS = ( new RawContextKey(`enableSyncActivityViews`, false));
const CONTEXT_ENABLE_SYNC_CONFLICTS_VIEW = ( new RawContextKey(`enableSyncConflictsView`, false));
const CONTEXT_HAS_CONFLICTS = ( new RawContextKey('hasConflicts', false));
const CONFIGURE_SYNC_COMMAND_ID = 'workbench.userDataSync.actions.configure';
const SHOW_SYNC_LOG_COMMAND_ID = 'workbench.userDataSync.actions.showLog';
const SYNC_VIEW_CONTAINER_ID = 'workbench.view.sync';
const SYNC_CONFLICTS_VIEW_ID = 'workbench.views.sync.conflicts';
const DOWNLOAD_ACTIVITY_ACTION_DESCRIPTOR = {
    id: 'workbench.userDataSync.actions.downloadSyncActivity',
    title: ( localize2WithPath(
        'vs/workbench/services/userDataSync/common/userDataSync',
        'download sync activity title',
        "Download Settings Sync Activity"
    )),
    category: Categories.Developer,
    f1: true,
    precondition: ( ContextKeyExpr.and(( CONTEXT_ACCOUNT_STATE.isEqualTo("available" )), ( CONTEXT_SYNC_STATE.notEqualsTo("uninitialized" ))))
};
export { CONFIGURE_SYNC_COMMAND_ID, CONTEXT_ACCOUNT_STATE, CONTEXT_ENABLE_ACTIVITY_VIEWS, CONTEXT_ENABLE_SYNC_CONFLICTS_VIEW, CONTEXT_HAS_CONFLICTS, CONTEXT_SYNC_ENABLEMENT, CONTEXT_SYNC_STATE, DOWNLOAD_ACTIVITY_ACTION_DESCRIPTOR, IUserDataSyncWorkbenchService, SHOW_SYNC_LOG_COMMAND_ID, SYNC_CONFLICTS_VIEW_ID, SYNC_TITLE, SYNC_VIEW_CONTAINER_ID, SYNC_VIEW_ICON, getSyncAreaLabel };
