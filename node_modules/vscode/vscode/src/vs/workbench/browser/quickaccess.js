import { localizeWithPath } from '../../nls.js';
import { ContextKeyExpr, RawContextKey } from '../../platform/contextkey/common/contextkey.js';
import { IKeybindingService } from '../../platform/keybinding/common/keybinding.js';
import { IQuickInputService } from '../../platform/quickinput/common/quickInput.js';
import { getIEditor } from '../../editor/browser/editorBrowser.js';
const inQuickPickContextKeyValue = 'inQuickOpen';
const InQuickPickContextKey = ( new RawContextKey(inQuickPickContextKeyValue, false, ( localizeWithPath(
    'vs/workbench/browser/quickaccess',
    'inQuickOpen',
    "Whether keyboard focus is inside the quick open control"
))));
const inQuickPickContext = ( ContextKeyExpr.has(inQuickPickContextKeyValue));
const defaultQuickAccessContextKeyValue = 'inFilesPicker';
const defaultQuickAccessContext = ( ContextKeyExpr.and(inQuickPickContext, ( ContextKeyExpr.has(defaultQuickAccessContextKeyValue))));
function getQuickNavigateHandler(id, next) {
    return accessor => {
        const keybindingService = accessor.get(IKeybindingService);
        const quickInputService = accessor.get(IQuickInputService);
        const keys = keybindingService.lookupKeybindings(id);
        const quickNavigate = { keybindings: keys };
        quickInputService.navigate(!!next, quickNavigate);
    };
}
class EditorViewState {
    constructor(editorService) {
        this.editorService = editorService;
        this._editorViewState = undefined;
    }
    set() {
        if (this._editorViewState) {
            return;
        }
        const activeEditorPane = this.editorService.activeEditorPane;
        if (activeEditorPane) {
            this._editorViewState = {
                group: activeEditorPane.group,
                editor: activeEditorPane.input,
                state: getIEditor(activeEditorPane.getControl())?.saveViewState() ?? undefined,
            };
        }
    }
    async restore(shouldCloseCurrEditor = false) {
        if (this._editorViewState) {
            const options = {
                viewState: this._editorViewState.state,
                preserveFocus: true
            };
            if (shouldCloseCurrEditor) {
                const activeEditorPane = this.editorService.activeEditorPane;
                const currEditor = activeEditorPane?.input;
                if (currEditor && currEditor !== this._editorViewState.editor && activeEditorPane?.group.isPinned(currEditor) !== true) {
                    await activeEditorPane.group.closeEditor(currEditor);
                }
            }
            await this._editorViewState.group.openEditor(this._editorViewState.editor, options);
        }
    }
    reset() {
        this._editorViewState = undefined;
    }
}
export { EditorViewState, InQuickPickContextKey, defaultQuickAccessContext, defaultQuickAccessContextKeyValue, getQuickNavigateHandler, inQuickPickContext, inQuickPickContextKeyValue };
