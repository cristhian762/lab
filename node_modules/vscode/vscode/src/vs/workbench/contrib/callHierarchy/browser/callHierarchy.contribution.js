import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { localizeWithPath, localize2WithPath } from '../../../../nls.js';
import { CallHierarchyProviderRegistry, CallHierarchyModel } from '../common/callHierarchy.js';
import { CancellationTokenSource } from '../../../../base/common/cancellation.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { CallHierarchyTreePeekWidget } from './callHierarchyPeek.js';
import { Event } from '../../../../base/common/event.js';
import { registerEditorContribution, EditorAction2 } from '../../../../editor/browser/editorExtensions.js';
import { RawContextKey, IContextKeyService, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';
import { DisposableStore } from '../../../../base/common/lifecycle.js';
import { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';
import { PeekContext } from '../../../../editor/contrib/peekView/browser/peekView.js';
import { IStorageService } from '../../../../platform/storage/common/storage.js';
import { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';
import { Range } from '../../../../editor/common/core/range.js';
import { registerAction2, MenuId } from '../../../../platform/actions/common/actions.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
import { isCancellationError } from '../../../../base/common/errors.js';
var CallHierarchyController_1;
const _ctxHasCallHierarchyProvider = ( new RawContextKey('editorHasCallHierarchyProvider', false, ( localizeWithPath(
    'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
    'editorHasCallHierarchyProvider',
    'Whether a call hierarchy provider is available'
))));
const _ctxCallHierarchyVisible = ( new RawContextKey('callHierarchyVisible', false, ( localizeWithPath(
    'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
    'callHierarchyVisible',
    'Whether call hierarchy peek is currently showing'
))));
const _ctxCallHierarchyDirection = ( new RawContextKey(
    'callHierarchyDirection',
    undefined,
    { type: 'string', description: ( localizeWithPath(
        'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
        'callHierarchyDirection',
        'Whether call hierarchy shows incoming or outgoing calls'
    )) }
));
function sanitizedDirection(candidate) {
    return candidate === "outgoingCalls"  || candidate === "incomingCalls"
        ? candidate
        : "incomingCalls" ;
}
let CallHierarchyController = class CallHierarchyController {
    static { CallHierarchyController_1 = this; }
    static { this.Id = 'callHierarchy'; }
    static get(editor) {
        return editor.getContribution(CallHierarchyController_1.Id);
    }
    static { this._StorageDirection = 'callHierarchy/defaultDirection'; }
    constructor(_editor, _contextKeyService, _storageService, _editorService, _instantiationService) {
        this._editor = _editor;
        this._contextKeyService = _contextKeyService;
        this._storageService = _storageService;
        this._editorService = _editorService;
        this._instantiationService = _instantiationService;
        this._dispoables = ( new DisposableStore());
        this._sessionDisposables = ( new DisposableStore());
        this._ctxIsVisible = _ctxCallHierarchyVisible.bindTo(this._contextKeyService);
        this._ctxHasProvider = _ctxHasCallHierarchyProvider.bindTo(this._contextKeyService);
        this._ctxDirection = _ctxCallHierarchyDirection.bindTo(this._contextKeyService);
        this._dispoables.add(Event.any(_editor.onDidChangeModel, _editor.onDidChangeModelLanguage, CallHierarchyProviderRegistry.onDidChange)(() => {
            this._ctxHasProvider.set(_editor.hasModel() && ( CallHierarchyProviderRegistry.has(_editor.getModel())));
        }));
        this._dispoables.add(this._sessionDisposables);
    }
    dispose() {
        this._ctxHasProvider.reset();
        this._ctxIsVisible.reset();
        this._dispoables.dispose();
    }
    async startCallHierarchyFromEditor() {
        this._sessionDisposables.clear();
        if (!this._editor.hasModel()) {
            return;
        }
        const document = this._editor.getModel();
        const position = this._editor.getPosition();
        if (!( CallHierarchyProviderRegistry.has(document))) {
            return;
        }
        const cts = ( new CancellationTokenSource());
        const model = CallHierarchyModel.create(document, position, cts.token);
        const direction = sanitizedDirection(this._storageService.get(CallHierarchyController_1._StorageDirection, 0 , "incomingCalls" ));
        this._showCallHierarchyWidget(position, direction, model, cts);
    }
    async startCallHierarchyFromCallHierarchy() {
        if (!this._widget) {
            return;
        }
        const model = this._widget.getModel();
        const call = this._widget.getFocused();
        if (!call || !model) {
            return;
        }
        const newEditor = await this._editorService.openCodeEditor({ resource: call.item.uri }, this._editor);
        if (!newEditor) {
            return;
        }
        const newModel = model.fork(call.item);
        this._sessionDisposables.clear();
        CallHierarchyController_1.get(newEditor)?._showCallHierarchyWidget(Range.lift(newModel.root.selectionRange).getStartPosition(), this._widget.direction, Promise.resolve(newModel), ( new CancellationTokenSource()));
    }
    _showCallHierarchyWidget(position, direction, model, cts) {
        this._ctxIsVisible.set(true);
        this._ctxDirection.set(direction);
        Event.any(this._editor.onDidChangeModel, this._editor.onDidChangeModelLanguage)(this.endCallHierarchy, this, this._sessionDisposables);
        this._widget = this._instantiationService.createInstance(CallHierarchyTreePeekWidget, this._editor, position, direction);
        this._widget.showLoading();
        this._sessionDisposables.add(this._widget.onDidClose(() => {
            this.endCallHierarchy();
            this._storageService.store(CallHierarchyController_1._StorageDirection, this._widget.direction, 0 , 0 );
        }));
        this._sessionDisposables.add({ dispose() { cts.dispose(true); } });
        this._sessionDisposables.add(this._widget);
        model.then(model => {
            if (cts.token.isCancellationRequested) {
                return;
            }
            if (model) {
                this._sessionDisposables.add(model);
                this._widget.showModel(model);
            }
            else {
                this._widget.showMessage(( localizeWithPath(
                    'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                    'no.item',
                    "No results"
                )));
            }
        }).catch(err => {
            if (isCancellationError(err)) {
                this.endCallHierarchy();
                return;
            }
            this._widget.showMessage(( localizeWithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'error',
                "Failed to show call hierarchy"
            )));
        });
    }
    showOutgoingCalls() {
        this._widget?.updateDirection("outgoingCalls" );
        this._ctxDirection.set("outgoingCalls" );
    }
    showIncomingCalls() {
        this._widget?.updateDirection("incomingCalls" );
        this._ctxDirection.set("incomingCalls" );
    }
    endCallHierarchy() {
        this._sessionDisposables.clear();
        this._ctxIsVisible.set(false);
        this._editor.focus();
    }
};
CallHierarchyController = CallHierarchyController_1 = ( __decorate([
    ( __param(1, IContextKeyService)),
    ( __param(2, IStorageService)),
    ( __param(3, ICodeEditorService)),
    ( __param(4, IInstantiationService))
], CallHierarchyController));
registerEditorContribution(CallHierarchyController.Id, CallHierarchyController, 0 );
registerAction2(class PeekCallHierarchyAction extends EditorAction2 {
    constructor() {
        super({
            id: 'editor.showCallHierarchy',
            title: ( localize2WithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'title',
                'Peek Call Hierarchy'
            )),
            menu: {
                id: MenuId.EditorContextPeek,
                group: 'navigation',
                order: 1000,
                when: ( ContextKeyExpr.and(_ctxHasCallHierarchyProvider, PeekContext.notInPeekEditor, ( EditorContextKeys.isInEmbeddedEditor.toNegated()))),
            },
            keybinding: {
                when: EditorContextKeys.editorTextFocus,
                weight: 200 ,
                primary: 1024  + 512  + 38
            },
            precondition: ( ContextKeyExpr.and(_ctxHasCallHierarchyProvider, PeekContext.notInPeekEditor)),
            f1: true
        });
    }
    async runEditorCommand(_accessor, editor) {
        return CallHierarchyController.get(editor)?.startCallHierarchyFromEditor();
    }
});
registerAction2(class extends EditorAction2 {
    constructor() {
        super({
            id: 'editor.showIncomingCalls',
            title: ( localize2WithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'title.incoming',
                'Show Incoming Calls'
            )),
            icon: registerIcon('callhierarchy-incoming', Codicon.callIncoming, ( localizeWithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'showIncomingCallsIcons',
                'Icon for incoming calls in the call hierarchy view.'
            ))),
            precondition: ( ContextKeyExpr.and(_ctxCallHierarchyVisible, ( _ctxCallHierarchyDirection.isEqualTo("outgoingCalls" )))),
            keybinding: {
                weight: 200 ,
                primary: 1024  + 512  + 38 ,
            },
            menu: {
                id: CallHierarchyTreePeekWidget.TitleMenu,
                when: ( _ctxCallHierarchyDirection.isEqualTo("outgoingCalls" )),
                order: 1,
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        return CallHierarchyController.get(editor)?.showIncomingCalls();
    }
});
registerAction2(class extends EditorAction2 {
    constructor() {
        super({
            id: 'editor.showOutgoingCalls',
            title: ( localize2WithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'title.outgoing',
                'Show Outgoing Calls'
            )),
            icon: registerIcon('callhierarchy-outgoing', Codicon.callOutgoing, ( localizeWithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'showOutgoingCallsIcon',
                'Icon for outgoing calls in the call hierarchy view.'
            ))),
            precondition: ( ContextKeyExpr.and(_ctxCallHierarchyVisible, ( _ctxCallHierarchyDirection.isEqualTo("incomingCalls" )))),
            keybinding: {
                weight: 200 ,
                primary: 1024  + 512  + 38 ,
            },
            menu: {
                id: CallHierarchyTreePeekWidget.TitleMenu,
                when: ( _ctxCallHierarchyDirection.isEqualTo("incomingCalls" )),
                order: 1
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        return CallHierarchyController.get(editor)?.showOutgoingCalls();
    }
});
registerAction2(class extends EditorAction2 {
    constructor() {
        super({
            id: 'editor.refocusCallHierarchy',
            title: ( localize2WithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'title.refocus',
                'Refocus Call Hierarchy'
            )),
            precondition: _ctxCallHierarchyVisible,
            keybinding: {
                weight: 200 ,
                primary: 1024  + 3
            }
        });
    }
    async runEditorCommand(_accessor, editor) {
        return CallHierarchyController.get(editor)?.startCallHierarchyFromCallHierarchy();
    }
});
registerAction2(class extends EditorAction2 {
    constructor() {
        super({
            id: 'editor.closeCallHierarchy',
            title: ( localizeWithPath(
                'vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution',
                'close',
                'Close'
            )),
            icon: Codicon.close,
            precondition: _ctxCallHierarchyVisible,
            keybinding: {
                weight: 200  + 10,
                primary: 9 ,
                when: ContextKeyExpr.not('config.editor.stablePeek')
            },
            menu: {
                id: CallHierarchyTreePeekWidget.TitleMenu,
                order: 1000
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        return CallHierarchyController.get(editor)?.endCallHierarchy();
    }
});
