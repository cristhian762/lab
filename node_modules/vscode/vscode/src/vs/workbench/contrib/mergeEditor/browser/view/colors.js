import { localizeWithPath } from '../../../../../nls.js';
import { registerColor, transparent, mergeCurrentHeaderBackground, mergeIncomingHeaderBackground } from '../../../../../platform/theme/common/colorRegistry.js';
registerColor('mergeEditor.change.background', { dark: '#9bb95533', light: '#9bb95533', hcDark: '#9bb95533', hcLight: '#9bb95533', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.change.background',
 'The background color for changes.'
)));
registerColor('mergeEditor.change.word.background', { dark: '#9ccc2c33', light: '#9ccc2c66', hcDark: '#9ccc2c33', hcLight: '#9ccc2c66', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.change.word.background',
 'The background color for word changes.'
)));
registerColor('mergeEditor.changeBase.background', { dark: '#4B1818FF', light: '#FFCCCCFF', hcDark: '#4B1818FF', hcLight: '#FFCCCCFF', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.changeBase.background',
 'The background color for changes in base.'
)));
registerColor('mergeEditor.changeBase.word.background', { dark: '#6F1313FF', light: '#FFA3A3FF', hcDark: '#6F1313FF', hcLight: '#FFA3A3FF', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.changeBase.word.background',
 'The background color for word changes in base.'
)));
registerColor('mergeEditor.conflict.unhandledUnfocused.border', { dark: '#ffa6007a', light: '#ffa600FF', hcDark: '#ffa6007a', hcLight: '#ffa6007a', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.unhandledUnfocused.border',
 'The border color of unhandled unfocused conflicts.'
)));
registerColor('mergeEditor.conflict.unhandledFocused.border', { dark: '#ffa600', light: '#ffa600', hcDark: '#ffa600', hcLight: '#ffa600', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.unhandledFocused.border',
 'The border color of unhandled focused conflicts.'
)));
registerColor('mergeEditor.conflict.handledUnfocused.border', { dark: '#86868649', light: '#86868649', hcDark: '#86868649', hcLight: '#86868649', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.handledUnfocused.border',
 'The border color of handled unfocused conflicts.'
)));
registerColor('mergeEditor.conflict.handledFocused.border', { dark: '#c1c1c1cc', light: '#c1c1c1cc', hcDark: '#c1c1c1cc', hcLight: '#c1c1c1cc', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.handledFocused.border',
 'The border color of handled focused conflicts.'
)));
const handledConflictMinimapOverViewRulerColor = registerColor('mergeEditor.conflict.handled.minimapOverViewRuler', { dark: '#adaca8ee', light: '#adaca8ee', hcDark: '#adaca8ee', hcLight: '#adaca8ee', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.handled.minimapOverViewRuler',
 'The foreground color for changes in input 1.'
)));
const unhandledConflictMinimapOverViewRulerColor = registerColor('mergeEditor.conflict.unhandled.minimapOverViewRuler', { dark: '#fcba03FF', light: '#fcba03FF', hcDark: '#fcba03FF', hcLight: '#fcba03FF', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.unhandled.minimapOverViewRuler',
 'The foreground color for changes in input 1.'
)));
registerColor('mergeEditor.conflictingLines.background', { dark: '#ffea0047', light: '#ffea0047', hcDark: '#ffea0047', hcLight: '#ffea0047', }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflictingLines.background',
 'The background of the "Conflicting Lines" text.'
)));
const contentTransparency = 0.4;
registerColor('mergeEditor.conflict.input1.background', { dark: ( transparent(mergeCurrentHeaderBackground, contentTransparency)), light: ( transparent(mergeCurrentHeaderBackground, contentTransparency)), hcDark: ( transparent(mergeCurrentHeaderBackground, contentTransparency)), hcLight: ( transparent(mergeCurrentHeaderBackground, contentTransparency)) }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.input1.background',
 'The background color of decorations in input 1.'
)));
registerColor('mergeEditor.conflict.input2.background', { dark: ( transparent(mergeIncomingHeaderBackground, contentTransparency)), light: ( transparent(mergeIncomingHeaderBackground, contentTransparency)), hcDark: ( transparent(mergeIncomingHeaderBackground, contentTransparency)), hcLight: ( transparent(mergeIncomingHeaderBackground, contentTransparency)) }, ( localizeWithPath(
 'vs/workbench/contrib/mergeEditor/browser/view/colors',
 'mergeEditor.conflict.input2.background',
 'The background color of decorations in input 2.'
)));
export { handledConflictMinimapOverViewRulerColor, unhandledConflictMinimapOverViewRulerColor };
