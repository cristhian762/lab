import { HistoryNavigator2 } from '../../../../base/common/history.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { ResourceMap } from '../../../../base/common/map.js';
import { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';
const IInteractiveHistoryService = ( createDecorator('IInteractiveHistoryService'));
class InteractiveHistoryService extends Disposable {
    constructor() {
        super();
        this._history = ( new ResourceMap());
    }
    addToHistory(uri, value) {
        if (!( this._history.has(uri))) {
            this._history.set(uri, ( new HistoryNavigator2([value], 50)));
            return;
        }
        const history = this._history.get(uri);
        history.resetCursor();
        if (history?.current() !== value) {
            history?.add(value);
        }
    }
    getPreviousValue(uri) {
        const history = this._history.get(uri);
        return history?.previous() ?? null;
    }
    getNextValue(uri) {
        const history = this._history.get(uri);
        return history?.next() ?? null;
    }
    replaceLast(uri, value) {
        if (!( this._history.has(uri))) {
            this._history.set(uri, ( new HistoryNavigator2([value], 50)));
            return;
        }
        else {
            const history = this._history.get(uri);
            if (history?.current() !== value) {
                history?.replaceLast(value);
            }
        }
    }
    clearHistory(uri) {
        this._history.delete(uri);
    }
    has(uri) {
        return ( this._history.has(uri)) ? true : false;
    }
}
export { IInteractiveHistoryService, InteractiveHistoryService };
