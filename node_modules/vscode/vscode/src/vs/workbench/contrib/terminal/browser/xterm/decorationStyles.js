import { __decorate, __param } from '../../../../../../../../external/tslib/tslib.es6.js';
import { addDisposableListener, EventType } from '../../../../../base/browser/dom.js';
import { Delayer } from '../../../../../base/common/async.js';
import { fromNow, getDurationString } from '../../../../../base/common/date.js';
import { MarkdownString } from '../../../../../base/common/htmlContent.js';
import { Disposable, combinedDisposable } from '../../../../../base/common/lifecycle.js';
import { localizeWithPath } from '../../../../../nls.js';
import { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';
import { IContextMenuService } from '../../../../../platform/contextview/browser/contextView.js';
import { IHoverService } from '../../../../../platform/hover/browser/hover.js';
let TerminalDecorationHoverManager = class TerminalDecorationHoverManager extends Disposable {
    constructor(_hoverService, configurationService, contextMenuService) {
        super();
        this._hoverService = _hoverService;
        this._contextMenuVisible = false;
        this._register(contextMenuService.onDidShowContextMenu(() => this._contextMenuVisible = true));
        this._register(contextMenuService.onDidHideContextMenu(() => this._contextMenuVisible = false));
        this._hoverDelayer = this._register(( new Delayer(configurationService.getValue('workbench.hover.delay'))));
    }
    hideHover() {
        this._hoverDelayer.cancel();
        this._hoverService.hideHover();
    }
    createHover(element, command, hoverMessage) {
        return combinedDisposable(addDisposableListener(element, EventType.MOUSE_ENTER, () => {
            if (this._contextMenuVisible) {
                return;
            }
            this._hoverDelayer.trigger(() => {
                let hoverContent = `${( localizeWithPath(
                    'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                    'terminalPromptContextMenu',
                    "Show Command Actions"
                ))}`;
                hoverContent += '\n\n---\n\n';
                if (!command) {
                    if (hoverMessage) {
                        hoverContent = hoverMessage;
                    }
                    else {
                        return;
                    }
                }
                else if (command.markProperties || hoverMessage) {
                    if (command.markProperties?.hoverMessage || hoverMessage) {
                        hoverContent = command.markProperties?.hoverMessage || hoverMessage || '';
                    }
                    else {
                        return;
                    }
                }
                else {
                    if (command.duration) {
                        const durationText = getDurationString(command.duration);
                        if (command.exitCode) {
                            if (command.exitCode === -1) {
                                hoverContent += ( localizeWithPath(
                                    'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                                    'terminalPromptCommandFailed.duration',
                                    'Command executed {0}, took {1} and failed',
                                    fromNow(command.timestamp, true),
                                    durationText
                                ));
                            }
                            else {
                                hoverContent += ( localizeWithPath(
                                    'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                                    'terminalPromptCommandFailedWithExitCode.duration',
                                    'Command executed {0}, took {1} and failed (Exit Code {2})',
                                    fromNow(command.timestamp, true),
                                    durationText,
                                    command.exitCode
                                ));
                            }
                        }
                        else {
                            hoverContent += ( localizeWithPath(
                                'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                                'terminalPromptCommandSuccess.duration',
                                'Command executed {0} and took {1}',
                                fromNow(command.timestamp, true),
                                durationText
                            ));
                        }
                    }
                    else {
                        if (command.exitCode) {
                            if (command.exitCode === -1) {
                                hoverContent += ( localizeWithPath(
                                    'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                                    'terminalPromptCommandFailed',
                                    'Command executed {0} and failed',
                                    fromNow(command.timestamp, true)
                                ));
                            }
                            else {
                                hoverContent += ( localizeWithPath(
                                    'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                                    'terminalPromptCommandFailedWithExitCode',
                                    'Command executed {0} and failed (Exit Code {1})',
                                    fromNow(command.timestamp, true),
                                    command.exitCode
                                ));
                            }
                        }
                        else {
                            hoverContent += ( localizeWithPath(
                                'vs/workbench/contrib/terminal/browser/xterm/decorationStyles',
                                'terminalPromptCommandSuccess',
                                'Command executed {0}',
                                fromNow(command.timestamp, true)
                            ));
                        }
                    }
                }
                this._hoverService.showHover({ content: ( new MarkdownString(hoverContent)), target: element });
            });
        }), addDisposableListener(element, EventType.MOUSE_LEAVE, () => this.hideHover()), addDisposableListener(element, EventType.MOUSE_OUT, () => this.hideHover()));
    }
};
TerminalDecorationHoverManager = ( __decorate([
    ( __param(0, IHoverService)),
    ( __param(1, IConfigurationService)),
    ( __param(2, IContextMenuService))
], TerminalDecorationHoverManager));
function updateLayout(configurationService, element) {
    if (!element) {
        return;
    }
    const fontSize = configurationService.inspect("terminal.integrated.fontSize" ).value;
    const defaultFontSize = configurationService.inspect("terminal.integrated.fontSize" ).defaultValue;
    const lineHeight = configurationService.inspect("terminal.integrated.lineHeight" ).value;
    if (typeof fontSize === 'number' && typeof defaultFontSize === 'number' && typeof lineHeight === 'number') {
        const scalar = (fontSize / defaultFontSize) <= 1 ? (fontSize / defaultFontSize) : 1;
        element.style.width = `${scalar * 16 }px`;
        element.style.height = `${scalar * 16  * lineHeight}px`;
        element.style.fontSize = `${scalar * 16 }px`;
        element.style.marginLeft = `${scalar * -17 }px`;
    }
}
export { TerminalDecorationHoverManager, updateLayout };
