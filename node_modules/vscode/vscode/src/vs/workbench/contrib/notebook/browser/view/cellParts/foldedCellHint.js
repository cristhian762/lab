import { hide, reset, show, $, addDisposableListener, EventType } from '../../../../../../base/browser/dom.js';
import { Codicon } from '../../../../../../base/common/codicons.js';
import { ThemeIcon } from '../../../../../../base/common/themables.js';
import { localizeWithPath } from '../../../../../../nls.js';
import { FoldingController } from '../../controller/foldingController.js';
import { CellEditState } from '../../notebookBrowser.js';
import { CellContentPart } from '../cellPart.js';
class FoldedCellHint extends CellContentPart {
    constructor(_notebookEditor, _container) {
        super();
        this._notebookEditor = _notebookEditor;
        this._container = _container;
    }
    didRenderCell(element) {
        this.update(element);
    }
    update(element) {
        if (!this._notebookEditor.hasModel()) {
            return;
        }
        if (element.isInputCollapsed || element.getEditState() === CellEditState.Editing) {
            hide(this._container);
        }
        else if (element.foldingState === 2 ) {
            const idx = this._notebookEditor.getViewModel().getCellIndex(element);
            const length = this._notebookEditor.getViewModel().getFoldedLength(idx);
            reset(this._container, this.getHiddenCellsLabel(length), this.getHiddenCellHintButton(element));
            show(this._container);
            const foldHintTop = element.layoutInfo.previewHeight;
            this._container.style.top = `${foldHintTop}px`;
        }
        else {
            hide(this._container);
        }
    }
    getHiddenCellsLabel(num) {
        const label = num === 1 ?
            ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint',
                'hiddenCellsLabel',
                "1 cell hidden"
            )) :
            ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint',
                'hiddenCellsLabelPlural',
                "{0} cells hidden",
                num
            ));
        return $('span.notebook-folded-hint-label', undefined, label);
    }
    getHiddenCellHintButton(element) {
        const expandIcon = $('span.cell-expand-part-button');
        expandIcon.classList.add(...ThemeIcon.asClassNameArray(Codicon.more));
        this._register(addDisposableListener(expandIcon, EventType.CLICK, () => {
            const controller = this._notebookEditor.getContribution(FoldingController.id);
            const idx = this._notebookEditor.getCellIndex(element);
            if (typeof idx === 'number') {
                controller.setFoldingStateDown(idx, 1 , 1);
            }
        }));
        return expandIcon;
    }
    updateInternalLayoutNow(element) {
        this.update(element);
    }
}
export { FoldedCellHint };
