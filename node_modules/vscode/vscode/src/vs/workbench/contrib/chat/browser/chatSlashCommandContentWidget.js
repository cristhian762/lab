import './chatSlashCommandContentWidget.css.js';
import { Range } from '../../../../editor/common/core/range.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { localizeWithPath } from '../../../../nls.js';
import { alert } from '../../../../base/browser/ui/aria/aria.js';
class SlashCommandContentWidget extends Disposable {
    constructor(_editor) {
        super();
        this._editor = _editor;
        this._domNode = document.createElement('div');
        this._isVisible = false;
        this._domNode.toggleAttribute('hidden', true);
        this._domNode.classList.add('chat-slash-command-content-widget');
        this._register(this._editor.onKeyDown((e) => this._handleKeyDown(e)));
    }
    dispose() {
        this.hide();
        super.dispose();
    }
    show() {
        if (!this._isVisible) {
            this._isVisible = true;
            this._domNode.toggleAttribute('hidden', false);
            this._editor.addContentWidget(this);
        }
    }
    hide() {
        if (this._isVisible) {
            this._isVisible = false;
            this._domNode.toggleAttribute('hidden', true);
            this._editor.removeContentWidget(this);
        }
    }
    setCommandText(slashCommand) {
        this._domNode.innerText = `/${slashCommand} `;
        this._lastSlashCommandText = slashCommand;
    }
    getId() {
        return 'chat-slash-command-content-widget';
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return { position: { lineNumber: 1, column: 1 }, preference: [0 ] };
    }
    beforeRender() {
        const lineHeight = this._editor.getOption(67 );
        this._domNode.style.lineHeight = `${lineHeight - 2 }px`;
        return null;
    }
    _handleKeyDown(e) {
        if (e.keyCode !== 1 ) {
            return;
        }
        const firstLine = this._editor.getModel()?.getLineContent(1);
        const selection = this._editor.getSelection();
        const withSlash = `/${this._lastSlashCommandText} `;
        if (!firstLine?.startsWith(withSlash) || !selection?.isEmpty() || selection?.startLineNumber !== 1 || selection?.startColumn !== withSlash.length + 1) {
            return;
        }
        this._editor.executeEdits('chat-slash-command', [{
                range: ( new Range(1, 1, 1, selection.startColumn)),
                text: null
            }]);
        alert(( localizeWithPath(
            'vs/workbench/contrib/chat/browser/chatSlashCommandContentWidget',
            'exited slash command mode',
            'Exited {0} mode',
            this._lastSlashCommandText
        )));
    }
}
export { SlashCommandContentWidget };
