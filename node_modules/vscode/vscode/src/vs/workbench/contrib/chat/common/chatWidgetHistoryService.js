import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Emitter } from '../../../../base/common/event.js';
import { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';
import { IStorageService } from '../../../../platform/storage/common/storage.js';
import { Memento } from '../../../common/memento.js';
const IChatWidgetHistoryService = ( createDecorator('IChatWidgetHistoryService'));
let ChatWidgetHistoryService = class ChatWidgetHistoryService {
    constructor(storageService) {
        this._onDidClearHistory = ( new Emitter());
        this.onDidClearHistory = this._onDidClearHistory.event;
        this.memento = ( new Memento('interactive-session', storageService));
        const loadedState = this.memento.getMemento(1 , 1 );
        for (const provider in loadedState.history) {
            loadedState.history[provider] = ( loadedState.history[provider].map(entry => typeof entry === 'string' ? { text: entry } : entry));
        }
        this.viewState = loadedState;
    }
    getHistory(providerId) {
        return this.viewState.history?.[providerId] ?? [];
    }
    saveHistory(providerId, history) {
        if (!this.viewState.history) {
            this.viewState.history = {};
        }
        this.viewState.history[providerId] = history;
        this.memento.saveMemento();
    }
    clearHistory() {
        this.viewState.history = {};
        this.memento.saveMemento();
        this._onDidClearHistory.fire();
    }
};
ChatWidgetHistoryService = ( __decorate([
    ( __param(0, IStorageService))
], ChatWidgetHistoryService));
export { ChatWidgetHistoryService, IChatWidgetHistoryService };
