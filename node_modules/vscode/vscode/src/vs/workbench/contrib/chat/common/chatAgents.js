import { Emitter } from '../../../../base/common/event.js';
import { Iterable } from '../../../../base/common/iterator.js';
import { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';
import { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';
const IChatAgentService = ( createDecorator('chatAgentService'));
class ChatAgentService extends Disposable {
    constructor() {
        super(...arguments);
        this._agents = ( new Map());
        this._onDidChangeAgents = this._register(( new Emitter()));
        this.onDidChangeAgents = this._onDidChangeAgents.event;
    }
    static { this.AGENT_LEADER = '@'; }
    dispose() {
        super.dispose();
        this._agents.clear();
    }
    registerAgent(agent) {
        if (( this._agents.has(agent.id))) {
            throw new Error(`Already registered an agent with id ${agent.id}`);
        }
        this._agents.set(agent.id, { agent });
        this._onDidChangeAgents.fire(agent);
        return toDisposable(() => {
            if (this._agents.delete(agent.id)) {
                this._onDidChangeAgents.fire(undefined);
            }
        });
    }
    updateAgent(id, updateMetadata) {
        const data = this._agents.get(id);
        if (!data) {
            throw new Error(`No agent with id ${id} registered`);
        }
        data.agent.metadata = { ...data.agent.metadata, ...updateMetadata };
        this._onDidChangeAgents.fire(data.agent);
    }
    getDefaultAgent() {
        return Iterable.find(( this._agents.values()), a => !!a.agent.metadata.isDefault)?.agent;
    }
    getSecondaryAgent() {
        return Iterable.find(( this._agents.values()), a => !!a.agent.metadata.isSecondary)?.agent;
    }
    getAgents() {
        return Array.from(( this._agents.values()), v => v.agent);
    }
    hasAgent(id) {
        return ( this._agents.has(id));
    }
    getAgent(id) {
        const data = this._agents.get(id);
        return data?.agent;
    }
    async invokeAgent(id, request, progress, history, token) {
        const data = this._agents.get(id);
        if (!data) {
            throw new Error(`No agent with id ${id}`);
        }
        return await data.agent.invoke(request, progress, history, token);
    }
    async getFollowups(id, request, result, token) {
        const data = this._agents.get(id);
        if (!data) {
            throw new Error(`No agent with id ${id}`);
        }
        if (!data.agent.provideFollowups) {
            return [];
        }
        return data.agent.provideFollowups(request, result, token);
    }
}
export { ChatAgentService, IChatAgentService };
