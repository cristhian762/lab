import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { append, $ as $$1 } from '../../../../base/browser/dom.js';
import { Button } from '../../../../base/browser/ui/button/button.js';
import { MarkdownString } from '../../../../base/common/htmlContent.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { localizeWithPath } from '../../../../nls.js';
import { ContextKeyExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';
import { IChatAgentService } from '../common/chatAgents.js';
import { chatAgentLeader, chatSubcommandLeader } from '../common/chatParserTypes.js';
const $ = $$1;
let ChatFollowups = class ChatFollowups extends Disposable {
    constructor(container, followups, options, clickHandler, contextService, chatAgentService) {
        super();
        this.options = options;
        this.clickHandler = clickHandler;
        this.contextService = contextService;
        this.chatAgentService = chatAgentService;
        const followupsContainer = append(container, $('.interactive-session-followups'));
        followups.forEach(followup => this.renderFollowup(followupsContainer, followup));
    }
    renderFollowup(container, followup) {
        if (followup.kind === 'command' && followup.when && !this.contextService.contextMatchesRules(ContextKeyExpr.deserialize(followup.when))) {
            return;
        }
        if (!this.chatAgentService.getDefaultAgent()) {
            return;
        }
        let tooltipPrefix = '';
        if ('agentId' in followup && followup.agentId && followup.agentId !== this.chatAgentService.getDefaultAgent()?.id) {
            tooltipPrefix += `${chatAgentLeader}${followup.agentId} `;
            if ('subCommand' in followup && followup.subCommand) {
                tooltipPrefix += `${chatSubcommandLeader}${followup.subCommand} `;
            }
        }
        const baseTitle = followup.kind === 'reply' ?
            (followup.title || followup.message)
            : followup.title;
        const tooltip = tooltipPrefix +
            ('tooltip' in followup && followup.tooltip || baseTitle);
        const button = this._register(( new Button(container, { ...this.options, supportIcons: true, title: tooltip })));
        if (followup.kind === 'reply') {
            button.element.classList.add('interactive-followup-reply');
        }
        else if (followup.kind === 'command') {
            button.element.classList.add('interactive-followup-command');
        }
        button.element.ariaLabel = ( localizeWithPath(
            'vs/workbench/contrib/chat/browser/chatFollowups',
            'followUpAriaLabel',
            "Follow up question: {0}",
            followup.title
        ));
        let label = '';
        if (followup.kind === 'reply') {
            label = '$(sparkle) ' + baseTitle;
        }
        else {
            label = baseTitle;
        }
        button.label = ( new MarkdownString(label, { supportThemeIcons: true }));
        this._register(button.onDidClick(() => this.clickHandler(followup)));
    }
};
ChatFollowups = ( __decorate([
    ( __param(4, IContextKeyService)),
    ( __param(5, IChatAgentService))
], ChatFollowups));
export { ChatFollowups };
