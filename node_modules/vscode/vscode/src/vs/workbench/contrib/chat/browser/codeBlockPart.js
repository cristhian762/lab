import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import './codeBlockPart.css.js';
import { append, clearNode, $ as $$1, hide, show } from '../../../../base/browser/dom.js';
import { Button } from '../../../../base/browser/ui/button/button.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { Emitter } from '../../../../base/common/event.js';
import { MutableDisposable, Disposable } from '../../../../base/common/lifecycle.js';
import { Schemas } from '../../../../base/common/network.js';
import { URI } from '../../../../base/common/uri.js';
import { generateUuid } from '../../../../base/common/uuid.js';
import { EditorExtensionsRegistry } from '../../../../editor/browser/editorExtensions.js';
import { CodeEditorWidget } from '../../../../editor/browser/widget/codeEditorWidget.js';
import { EDITOR_FONT_DEFAULTS } from '../../../../editor/common/config/editorOptions.js';
import { Range } from '../../../../editor/common/core/range.js';
import { ILanguageService } from '../../../../editor/common/languages/language.js';
import { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';
import { IModelService } from '../../../../editor/common/services/model.js';
import { ITextModelService } from '../../../../editor/common/services/resolverService.js';
import { BracketMatchingController } from '../../../../editor/contrib/bracketMatching/browser/bracketMatching.js';
import { ContextMenuController } from '../../../../editor/contrib/contextmenu/browser/contextmenu.js';
import { GotoDefinitionAtPositionEditorContribution } from '../../../../editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.js';
import { HoverController } from '../../../../editor/contrib/hover/browser/hover.js';
import { ViewportSemanticTokensContribution } from '../../../../editor/contrib/semanticTokens/browser/viewportSemanticTokens.js';
import { SmartSelectController } from '../../../../editor/contrib/smartSelect/browser/smartSelect.js';
import { WordHighlighterContribution } from '../../../../editor/contrib/wordHighlighter/browser/wordHighlighter.js';
import { localizeWithPath } from '../../../../nls.js';
import { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';
import { MenuWorkbenchToolBar } from '../../../../platform/actions/browser/toolbar.js';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';
import { isResponseVM } from '../common/chatViewModel.js';
import { MenuPreventer } from '../../codeEditor/browser/menuPreventer.js';
import { SelectionClipboardContributionID } from '../../codeEditor/browser/selectionClipboard.js';
import { getSimpleEditorOptions } from '../../codeEditor/browser/simpleEditorOptions.js';
const $ = $$1;
const localFileLanguageId = 'vscode-local-file';
function parseLocalFileData(text) {
    let data;
    try {
        data = JSON.parse(text);
    }
    catch (e) {
        throw new Error('Could not parse code block local file data');
    }
    let uri;
    try {
        uri = URI.revive(data?.uri);
    }
    catch (e) {
        throw new Error('Invalid code block local file data URI');
    }
    let range;
    if (data.range) {
        range = ( new Range(
            data.range.startLineNumber + 1,
            data.range.startColumn + 1,
            data.range.endLineNumber + 1,
            data.range.endColumn + 1
        ));
    }
    return { uri, range };
}
const defaultCodeblockPadding = 10;
let BaseCodeBlockPart = class BaseCodeBlockPart extends Disposable {
    constructor(options, menuId, delegate, overflowWidgetsDomNode, instantiationService, contextKeyService, modelService, configurationService, accessibilityService) {
        super();
        this.options = options;
        this.menuId = menuId;
        this.modelService = modelService;
        this.configurationService = configurationService;
        this.accessibilityService = accessibilityService;
        this._onDidChangeContentHeight = this._register(( new Emitter()));
        this.onDidChangeContentHeight = this._onDidChangeContentHeight.event;
        this.currentScrollWidth = 0;
        this.element = $('.interactive-result-code-block');
        this.contextKeyService = this._register(contextKeyService.createScoped(this.element));
        const scopedInstantiationService = instantiationService.createChild(( new ServiceCollection([IContextKeyService, this.contextKeyService])));
        const editorElement = append(this.element, $('.interactive-result-editor'));
        this.editor = this.createEditor(scopedInstantiationService, editorElement, {
            ...getSimpleEditorOptions(this.configurationService),
            readOnly: true,
            lineNumbers: 'off',
            selectOnLineNumbers: true,
            scrollBeyondLastLine: false,
            lineDecorationsWidth: 8,
            dragAndDrop: false,
            padding: { top: defaultCodeblockPadding, bottom: defaultCodeblockPadding },
            mouseWheelZoom: false,
            scrollbar: {
                alwaysConsumeMouseWheel: false
            },
            ariaLabel: ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'chat.codeBlockHelp',
                'Code block'
            )),
            overflowWidgetsDomNode,
            ...this.getEditorOptionsFromConfig(),
        });
        const toolbarElement = append(this.element, $('.interactive-result-code-block-toolbar'));
        const editorScopedService = this.editor.contextKeyService.createScoped(toolbarElement);
        const editorScopedInstantiationService = scopedInstantiationService.createChild(( new ServiceCollection([IContextKeyService, editorScopedService])));
        this.toolbar = this._register(editorScopedInstantiationService.createInstance(MenuWorkbenchToolBar, toolbarElement, menuId, {
            menuOptions: {
                shouldForwardArgs: true
            }
        }));
        this._register(this.toolbar.onDidChangeDropdownVisibility(e => {
            toolbarElement.classList.toggle('force-visibility', e);
        }));
        this._configureForScreenReader();
        this._register(this.accessibilityService.onDidChangeScreenReaderOptimized(() => this._configureForScreenReader()));
        this._register(this.configurationService.onDidChangeConfiguration((e) => {
            if (( e.affectedKeys.has(
                "accessibility.verbosity.panelChat"
            ))) {
                this._configureForScreenReader();
            }
        }));
        this._register(this.options.onDidChange(() => {
            this.editor.updateOptions(this.getEditorOptionsFromConfig());
        }));
        this._register(this.editor.onDidScrollChange(e => {
            this.currentScrollWidth = e.scrollWidth;
        }));
        this._register(this.editor.onDidContentSizeChange(e => {
            if (e.contentHeightChanged) {
                this._onDidChangeContentHeight.fire();
            }
        }));
        this._register(this.editor.onDidBlurEditorWidget(() => {
            this.element.classList.remove('focused');
            WordHighlighterContribution.get(this.editor)?.stopHighlighting();
            this.clearWidgets();
        }));
        this._register(this.editor.onDidFocusEditorWidget(() => {
            this.element.classList.add('focused');
            WordHighlighterContribution.get(this.editor)?.restoreViewState(true);
        }));
        if (delegate.onDidScroll) {
            this._register(delegate.onDidScroll(e => {
                this.clearWidgets();
            }));
        }
    }
    focus() {
        this.editor.focus();
    }
    updatePaddingForLayout() {
        const horizontalScrollbarVisible = this.currentScrollWidth > this.editor.getLayoutInfo().contentWidth;
        const scrollbarHeight = this.editor.getLayoutInfo().horizontalScrollbarHeight;
        const bottomPadding = horizontalScrollbarVisible ?
            Math.max(defaultCodeblockPadding - scrollbarHeight, 2) :
            defaultCodeblockPadding;
        this.editor.updateOptions({ padding: { top: defaultCodeblockPadding, bottom: bottomPadding } });
    }
    _configureForScreenReader() {
        const toolbarElt = this.toolbar.getElement();
        if (this.accessibilityService.isScreenReaderOptimized()) {
            toolbarElt.style.display = 'block';
            toolbarElt.ariaLabel = this.configurationService.getValue("accessibility.verbosity.panelChat" ) ? ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'chat.codeBlock.toolbarVerbose',
                'Toolbar for code block which can be reached via tab'
            )) : ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'chat.codeBlock.toolbar',
                'Code block toolbar'
            ));
        }
        else {
            toolbarElt.style.display = '';
        }
    }
    getEditorOptionsFromConfig() {
        return {
            wordWrap: this.options.configuration.resultEditor.wordWrap,
            fontLigatures: this.options.configuration.resultEditor.fontLigatures,
            bracketPairColorization: this.options.configuration.resultEditor.bracketPairColorization,
            fontFamily: this.options.configuration.resultEditor.fontFamily === 'default' ?
                EDITOR_FONT_DEFAULTS.fontFamily :
                this.options.configuration.resultEditor.fontFamily,
            fontSize: this.options.configuration.resultEditor.fontSize,
            fontWeight: this.options.configuration.resultEditor.fontWeight,
            lineHeight: this.options.configuration.resultEditor.lineHeight,
        };
    }
    layout(width) {
        const contentHeight = this.getContentHeight();
        const editorBorder = 2;
        this.editor.layout({ width: width - editorBorder, height: contentHeight });
        this.updatePaddingForLayout();
    }
    getContentHeight() {
        return this.editor.getContentHeight();
    }
    async render(data, width) {
        if (data.parentContextKeyService) {
            this.contextKeyService.updateParent(data.parentContextKeyService);
        }
        if (this.options.configuration.resultEditor.wordWrap === 'on') {
            this.layout(width);
        }
        await this.updateEditor(data);
        this.layout(width);
        this.editor.updateOptions({ ariaLabel: ( localizeWithPath(
            'vs/workbench/contrib/chat/browser/codeBlockPart',
            'chat.codeBlockLabel',
            "Code block {0}",
            data.codeBlockIndex + 1
        )) });
        if (data.hideToolbar) {
            hide(this.toolbar.getElement());
        }
        else {
            show(this.toolbar.getElement());
        }
    }
    reset() {
        this.clearWidgets();
    }
    clearWidgets() {
        HoverController.get(this.editor)?.hideContentHover();
    }
};
BaseCodeBlockPart = ( __decorate([
    ( __param(4, IInstantiationService)),
    ( __param(5, IContextKeyService)),
    ( __param(6, IModelService)),
    ( __param(7, IConfigurationService)),
    ( __param(8, IAccessibilityService))
], BaseCodeBlockPart));
let SimpleCodeBlockPart = class SimpleCodeBlockPart extends BaseCodeBlockPart {
    constructor(options, menuId, delegate, overflowWidgetsDomNode, instantiationService, contextKeyService, modelService, textModelService, configurationService, accessibilityService, languageService) {
        super(options, menuId, delegate, overflowWidgetsDomNode, instantiationService, contextKeyService, modelService, configurationService, accessibilityService);
        this.languageService = languageService;
        const vulnsContainer = append(this.element, $('.interactive-result-vulns'));
        const vulnsHeaderElement = append(vulnsContainer, $('.interactive-result-vulns-header', undefined));
        this.vulnsButton = ( new Button(vulnsHeaderElement, {
            buttonBackground: undefined,
            buttonBorder: undefined,
            buttonForeground: undefined,
            buttonHoverBackground: undefined,
            buttonSecondaryBackground: undefined,
            buttonSecondaryForeground: undefined,
            buttonSecondaryHoverBackground: undefined,
            buttonSeparator: undefined,
            supportIcons: true
        }));
        this._uri = ( URI.from({ scheme: Schemas.vscodeChatCodeBlock, path: generateUuid() }));
        this.textModel = textModelService.createModelReference(this._uri).then(ref => {
            this.editor.setModel(ref.object.textEditorModel);
            this._register(ref);
            return ref.object.textEditorModel;
        });
        this.vulnsListElement = append(vulnsContainer, $('ul.interactive-result-vulns-list'));
        this.vulnsButton.onDidClick(() => {
            const element = this.currentCodeBlockData.element;
            element.vulnerabilitiesListExpanded = !element.vulnerabilitiesListExpanded;
            this.vulnsButton.label = this.getVulnerabilitiesLabel();
            this.element.classList.toggle('chat-vulnerabilities-collapsed', !element.vulnerabilitiesListExpanded);
            this._onDidChangeContentHeight.fire();
        });
    }
    get uri() {
        return this._uri;
    }
    createEditor(instantiationService, parent, options) {
        return this._register(instantiationService.createInstance(CodeEditorWidget, parent, options, {
            isSimpleWidget: false,
            contributions: EditorExtensionsRegistry.getSomeEditorContributions([
                MenuPreventer.ID,
                SelectionClipboardContributionID,
                ContextMenuController.ID,
                WordHighlighterContribution.ID,
                ViewportSemanticTokensContribution.ID,
                BracketMatchingController.ID,
                SmartSelectController.ID,
                HoverController.ID,
                GotoDefinitionAtPositionEditorContribution.ID,
            ])
        }));
    }
    async render(data, width) {
        await super.render(data, width);
        if (data.vulns?.length && isResponseVM(data.element)) {
            clearNode(this.vulnsListElement);
            this.element.classList.remove('no-vulns');
            this.element.classList.toggle('chat-vulnerabilities-collapsed', !data.element.vulnerabilitiesListExpanded);
            append(this.vulnsListElement, ...( data.vulns.map(
                v => $('li', undefined, $('span.chat-vuln-title', undefined, v.title), ' ' + v.description)
            )));
            this.vulnsButton.label = this.getVulnerabilitiesLabel();
        }
        else {
            this.element.classList.add('no-vulns');
        }
    }
    async updateEditor(data) {
        this.editor.setModel(await this.textModel);
        const text = this.fixCodeText(data.text, data.languageId);
        this.setText(text);
        const vscodeLanguageId = this.languageService.getLanguageIdByLanguageName(data.languageId) ?? undefined;
        this.setLanguage(vscodeLanguageId);
        data.languageId = vscodeLanguageId ?? 'plaintext';
        this.toolbar.context = {
            code: data.text,
            codeBlockIndex: data.codeBlockIndex,
            element: data.element,
            languageId: data.languageId
        };
    }
    getVulnerabilitiesLabel() {
        if (!this.currentCodeBlockData || !this.currentCodeBlockData.vulns) {
            return '';
        }
        const referencesLabel = this.currentCodeBlockData.vulns.length > 1 ?
            ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'vulnerabilitiesPlural',
                "{0} vulnerabilities",
                this.currentCodeBlockData.vulns.length
            )) :
            ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'vulnerabilitiesSingular',
                "{0} vulnerability",
                1
            ));
        const icon = (element) => element.vulnerabilitiesListExpanded ? Codicon.chevronDown : Codicon.chevronRight;
        return `${referencesLabel} $(${icon(this.currentCodeBlockData.element).id})`;
    }
    fixCodeText(text, languageId) {
        if (languageId === 'php') {
            if (!text.trim().startsWith('<')) {
                return `<?php\n${text}\n?>`;
            }
        }
        return text;
    }
    async setText(newText) {
        const model = await this.textModel;
        const currentText = model.getValue(1 );
        if (newText === currentText) {
            return;
        }
        if (newText.startsWith(currentText)) {
            const text = newText.slice(currentText.length);
            const lastLine = model.getLineCount();
            const lastCol = model.getLineMaxColumn(lastLine);
            model.applyEdits([{ range: ( new Range(lastLine, lastCol, lastLine, lastCol)), text }]);
        }
        else {
            model.setValue(newText);
        }
    }
    async setLanguage(vscodeLanguageId) {
        (await this.textModel).setLanguage(vscodeLanguageId ?? PLAINTEXT_LANGUAGE_ID);
    }
};
SimpleCodeBlockPart = ( __decorate([
    ( __param(4, IInstantiationService)),
    ( __param(5, IContextKeyService)),
    ( __param(6, IModelService)),
    ( __param(7, ITextModelService)),
    ( __param(8, IConfigurationService)),
    ( __param(9, IAccessibilityService)),
    ( __param(10, ILanguageService))
], SimpleCodeBlockPart));
let LocalFileCodeBlockPart = class LocalFileCodeBlockPart extends BaseCodeBlockPart {
    constructor(options, menuId, delegate, overflowWidgetsDomNode, instantiationService, contextKeyService, modelService, textModelService, configurationService, accessibilityService) {
        super(options, menuId, delegate, overflowWidgetsDomNode, instantiationService, contextKeyService, modelService, configurationService, accessibilityService);
        this.textModelService = textModelService;
        this.textModelReference = this._register(( new MutableDisposable()));
    }
    get uri() {
        return this.currentCodeBlockData.uri;
    }
    getContentHeight() {
        if (this.currentCodeBlockData?.range) {
            const lineCount = this.currentCodeBlockData.range.endLineNumber - this.currentCodeBlockData.range.startLineNumber + 1;
            const lineHeight = this.editor.getOption(67 );
            return lineCount * lineHeight;
        }
        return super.getContentHeight();
    }
    createEditor(instantiationService, parent, options) {
        return this._register(instantiationService.createInstance(CodeEditorWidget, parent, {
            ...options,
        }, {
        }));
    }
    async updateEditor(data) {
        let model;
        if (this.currentCodeBlockData?.uri.toString() === ( data.uri.toString())) {
            this.currentCodeBlockData = data;
            model = this.editor.getModel();
        }
        else {
            this.currentCodeBlockData = data;
            const result = await this.textModelService.createModelReference(data.uri);
            model = result.object.textEditorModel;
            this.textModelReference.value = result;
            this.editor.setModel(model);
        }
        if (data.range) {
            this.editor.setSelection(data.range);
            this.editor.revealRangeInCenter(data.range, 1 );
        }
        this.toolbar.context = {
            code: model.getTextBuffer().getValueInRange(data.range ?? model.getFullModelRange(), 0 ),
            codeBlockIndex: data.codeBlockIndex,
            element: data.element,
            languageId: model.getLanguageId()
        };
    }
};
LocalFileCodeBlockPart = ( __decorate([
    ( __param(4, IInstantiationService)),
    ( __param(5, IContextKeyService)),
    ( __param(6, IModelService)),
    ( __param(7, ITextModelService)),
    ( __param(8, IConfigurationService)),
    ( __param(9, IAccessibilityService))
], LocalFileCodeBlockPart));
let ChatCodeBlockContentProvider = class ChatCodeBlockContentProvider extends Disposable {
    constructor(textModelService, _modelService) {
        super();
        this._modelService = _modelService;
        this._register(textModelService.registerTextModelContentProvider(Schemas.vscodeChatCodeBlock, this));
    }
    async provideTextContent(resource) {
        const existing = this._modelService.getModel(resource);
        if (existing) {
            return existing;
        }
        return this._modelService.createModel('', null, resource);
    }
};
ChatCodeBlockContentProvider = ( __decorate([
    ( __param(0, ITextModelService)),
    ( __param(1, IModelService))
], ChatCodeBlockContentProvider));
export { ChatCodeBlockContentProvider, LocalFileCodeBlockPart, SimpleCodeBlockPart, localFileLanguageId, parseLocalFileData };
