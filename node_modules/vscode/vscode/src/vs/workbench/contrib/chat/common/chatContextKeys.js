import { localizeWithPath } from '../../../../nls.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';
const CONTEXT_RESPONSE_VOTE = ( new RawContextKey(
 'chatSessionResponseVote',
 '',
 { type: 'string', description: ( localizeWithPath(
  'vs/workbench/contrib/chat/common/chatContextKeys',
  'interactiveSessionResponseVote',
  "When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string."
 )) }
));
const CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING = ( new RawContextKey(
 'chatResponseSupportsIssueReporting',
 false,
 { type: 'boolean', description: ( localizeWithPath(
  'vs/workbench/contrib/chat/common/chatContextKeys',
  'chatResponseSupportsIssueReporting',
  "True when the current chat response supports issue reporting."
 )) }
));
const CONTEXT_RESPONSE_FILTERED = ( new RawContextKey(
 'chatSessionResponseFiltered',
 false,
 { type: 'boolean', description: ( localizeWithPath(
  'vs/workbench/contrib/chat/common/chatContextKeys',
  'chatResponseFiltered',
  "True when the chat response was filtered out by the server."
 )) }
));
const CONTEXT_CHAT_REQUEST_IN_PROGRESS = ( new RawContextKey(
 'chatSessionRequestInProgress',
 false,
 { type: 'boolean', description: ( localizeWithPath(
  'vs/workbench/contrib/chat/common/chatContextKeys',
  'interactiveSessionRequestInProgress',
  "True when the current request is still in progress."
 )) }
));
const CONTEXT_RESPONSE = ( new RawContextKey('chatResponse', false, { type: 'boolean', description: ( localizeWithPath(
 'vs/workbench/contrib/chat/common/chatContextKeys',
 'chatResponse',
 "The chat item is a response."
)) }));
const CONTEXT_REQUEST = ( new RawContextKey('chatRequest', false, { type: 'boolean', description: ( localizeWithPath(
 'vs/workbench/contrib/chat/common/chatContextKeys',
 'chatRequest',
 "The chat item is a request"
)) }));
const CONTEXT_CHAT_INPUT_HAS_TEXT = ( new RawContextKey('chatInputHasText', false, { type: 'boolean', description: ( localizeWithPath(
 'vs/workbench/contrib/chat/common/chatContextKeys',
 'interactiveInputHasText',
 "True when the chat input has text."
)) }));
const CONTEXT_IN_CHAT_INPUT = ( new RawContextKey('inChatInput', false, { type: 'boolean', description: ( localizeWithPath(
 'vs/workbench/contrib/chat/common/chatContextKeys',
 'inInteractiveInput',
 "True when focus is in the chat input, false otherwise."
)) }));
const CONTEXT_IN_CHAT_SESSION = ( new RawContextKey('inChat', false, { type: 'boolean', description: ( localizeWithPath(
 'vs/workbench/contrib/chat/common/chatContextKeys',
 'inChat',
 "True when focus is in the chat widget, false otherwise."
)) }));
const CONTEXT_PROVIDER_EXISTS = ( new RawContextKey('hasChatProvider', false, { type: 'boolean', description: ( localizeWithPath(
 'vs/workbench/contrib/chat/common/chatContextKeys',
 'hasChatProvider',
 "True when some chat provider has been registered."
)) }));
const CONTEXT_CHAT_INPUT_CURSOR_AT_TOP = ( new RawContextKey('chatCursorAtTop', false));
export { CONTEXT_CHAT_INPUT_CURSOR_AT_TOP, CONTEXT_CHAT_INPUT_HAS_TEXT, CONTEXT_CHAT_REQUEST_IN_PROGRESS, CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING, CONTEXT_IN_CHAT_INPUT, CONTEXT_IN_CHAT_SESSION, CONTEXT_PROVIDER_EXISTS, CONTEXT_REQUEST, CONTEXT_RESPONSE, CONTEXT_RESPONSE_FILTERED, CONTEXT_RESPONSE_VOTE };
