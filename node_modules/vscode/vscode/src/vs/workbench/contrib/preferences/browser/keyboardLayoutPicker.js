import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { localizeWithPath, localize2WithPath } from '../../../../nls.js';
import { IStatusbarService } from '../../../services/statusbar/browser/statusbar.js';
import { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';
import { parseKeyboardLayoutDescription, IKeyboardLayoutService, areKeyboardLayoutsEqual, getKeyboardLayoutId } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';
import { registerWorkbenchContribution2 } from '../../../common/contributions.js';
import { KEYBOARD_LAYOUT_OPEN_PICKER } from '../common/preferences.js';
import { isMacintosh, isWindows } from '../../../../base/common/platform.js';
import { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';
import { registerAction2, Action2 } from '../../../../platform/actions/common/actions.js';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';
import { IEnvironmentService } from '../../../../platform/environment/common/environment.js';
import { IFileService } from '../../../../platform/files/common/files.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { VSBuffer } from '../../../../base/common/buffer.js';
let KeyboardLayoutPickerContribution = class KeyboardLayoutPickerContribution extends Disposable {
    static { this.ID = 'workbench.contrib.keyboardLayoutPicker'; }
    constructor(keyboardLayoutService, statusbarService) {
        super();
        this.keyboardLayoutService = keyboardLayoutService;
        this.statusbarService = statusbarService;
        this.pickerElement = this._register(( new MutableDisposable()));
        const name = ( localizeWithPath(
            'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
            'status.workbench.keyboardLayout',
            "Keyboard Layout"
        ));
        const layout = this.keyboardLayoutService.getCurrentKeyboardLayout();
        if (layout) {
            const layoutInfo = parseKeyboardLayoutDescription(layout);
            const text = ( localizeWithPath(
                'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
                'keyboardLayout',
                "Layout: {0}",
                layoutInfo.label
            ));
            this.pickerElement.value = this.statusbarService.addEntry({
                name,
                text,
                ariaLabel: text,
                command: KEYBOARD_LAYOUT_OPEN_PICKER
            }, 'status.workbench.keyboardLayout', 1 );
        }
        this._register(this.keyboardLayoutService.onDidChangeKeyboardLayout(() => {
            const layout = this.keyboardLayoutService.getCurrentKeyboardLayout();
            const layoutInfo = parseKeyboardLayoutDescription(layout);
            if (this.pickerElement.value) {
                const text = ( localizeWithPath(
                    'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
                    'keyboardLayout',
                    "Layout: {0}",
                    layoutInfo.label
                ));
                this.pickerElement.value.update({
                    name,
                    text,
                    ariaLabel: text,
                    command: KEYBOARD_LAYOUT_OPEN_PICKER
                });
            }
            else {
                const text = ( localizeWithPath(
                    'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
                    'keyboardLayout',
                    "Layout: {0}",
                    layoutInfo.label
                ));
                this.pickerElement.value = this.statusbarService.addEntry({
                    name,
                    text,
                    ariaLabel: text,
                    command: KEYBOARD_LAYOUT_OPEN_PICKER
                }, 'status.workbench.keyboardLayout', 1 );
            }
        }));
    }
};
KeyboardLayoutPickerContribution = ( __decorate([
    ( __param(0, IKeyboardLayoutService)),
    ( __param(1, IStatusbarService))
], KeyboardLayoutPickerContribution));
registerWorkbenchContribution2(KeyboardLayoutPickerContribution.ID, KeyboardLayoutPickerContribution, 1 );
const DEFAULT_CONTENT = [
    `// ${( localizeWithPath(
        'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
        'displayLanguage',
        'Defines the keyboard layout used in VS Code in the browser environment.'
    ))}`,
    `// ${( localizeWithPath(
        'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
        'doc',
        'Open VS Code and run "Developer: Inspect Key Mappings (JSON)" from Command Palette.'
    ))}`,
    ``,
    `// Once you have the keyboard layout info, please paste it below.`,
    '\n'
].join('\n');
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: KEYBOARD_LAYOUT_OPEN_PICKER,
            title: ( localize2WithPath(
                'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
                'keyboard.chooseLayout',
                "Change Keyboard Layout"
            )),
            f1: true
        });
    }
    async run(accessor) {
        const keyboardLayoutService = accessor.get(IKeyboardLayoutService);
        const quickInputService = accessor.get(IQuickInputService);
        const configurationService = accessor.get(IConfigurationService);
        const environmentService = accessor.get(IEnvironmentService);
        const editorService = accessor.get(IEditorService);
        const fileService = accessor.get(IFileService);
        const layouts = keyboardLayoutService.getAllKeyboardLayouts();
        const currentLayout = keyboardLayoutService.getCurrentKeyboardLayout();
        const layoutConfig = configurationService.getValue('keyboard.layout');
        const isAutoDetect = layoutConfig === 'autodetect';
        const picks = ( layouts.map(layout => {
            const picked = !isAutoDetect && areKeyboardLayoutsEqual(currentLayout, layout);
            const layoutInfo = parseKeyboardLayoutDescription(layout);
            return {
                layout: layout,
                label: [layoutInfo.label, (layout && layout.isUserKeyboardLayout) ? '(User configured layout)' : ''].join(' '),
                id: layout.text || layout.lang || layout.layout,
                description: layoutInfo.description + (picked ? ' (Current layout)' : ''),
                picked: !isAutoDetect && areKeyboardLayoutsEqual(currentLayout, layout)
            };
        })).sort((a, b) => {
            return a.label < b.label ? -1 : (a.label > b.label ? 1 : 0);
        });
        if (picks.length > 0) {
            const platform = isMacintosh ? 'Mac' : isWindows ? 'Win' : 'Linux';
            picks.unshift({ type: 'separator', label: ( localizeWithPath(
                'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
                'layoutPicks',
                "Keyboard Layouts ({0})",
                platform
            )) });
        }
        const configureKeyboardLayout = { label: ( localizeWithPath(
            'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
            'configureKeyboardLayout',
            "Configure Keyboard Layout"
        )) };
        picks.unshift(configureKeyboardLayout);
        const autoDetectMode = {
            label: ( localizeWithPath(
                'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
                'autoDetect',
                "Auto Detect"
            )),
            description: isAutoDetect ? `Current: ${parseKeyboardLayoutDescription(currentLayout).label}` : undefined,
            picked: isAutoDetect ? true : undefined
        };
        picks.unshift(autoDetectMode);
        const pick = await quickInputService.pick(picks, { placeHolder: ( localizeWithPath(
            'vs/workbench/contrib/preferences/browser/keyboardLayoutPicker',
            'pickKeyboardLayout',
            "Select Keyboard Layout"
        )), matchOnDescription: true });
        if (!pick) {
            return;
        }
        if (pick === autoDetectMode) {
            configurationService.updateValue('keyboard.layout', 'autodetect');
            return;
        }
        if (pick === configureKeyboardLayout) {
            const file = environmentService.keyboardLayoutResource;
            await fileService.stat(file).then(undefined, () => {
                return fileService.createFile(file, VSBuffer.fromString(DEFAULT_CONTENT));
            }).then((stat) => {
                if (!stat) {
                    return undefined;
                }
                return editorService.openEditor({
                    resource: stat.resource,
                    languageId: 'jsonc',
                    options: { pinned: true }
                });
            }, (error) => {
                throw new Error(localizeWithPath('vs/workbench/contrib/preferences/browser/keyboardLayoutPicker', 'fail.createSettings', "Unable to create '{0}' ({1}).", file.toString(), error));
            });
            return Promise.resolve();
        }
        configurationService.updateValue('keyboard.layout', getKeyboardLayoutId(pick.layout));
    }
});
export { KeyboardLayoutPickerContribution };
