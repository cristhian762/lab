import { registerEditorContribution, registerEditorCommand, EditorCommand, registerEditorAction, EditorAction } from '../../../browser/editorExtensions.js';
import { EditorContextKeys } from '../../../common/editorContextKeys.js';
import { registerEditorFeature } from '../../../common/editorFeatures.js';
import { changePasteTypeCommandId, pasteWidgetVisibleCtx, CopyPasteController } from './copyPasteController.js';
import { DefaultPasteProvidersFeature } from './defaultProviders.js';
import { localizeWithPath } from '../../../../nls.js';
registerEditorContribution(CopyPasteController.ID, CopyPasteController, 0 );
registerEditorFeature(DefaultPasteProvidersFeature);
registerEditorCommand(new (class extends EditorCommand {
    constructor() {
        super({
            id: changePasteTypeCommandId,
            precondition: pasteWidgetVisibleCtx,
            kbOpts: {
                weight: 100 ,
                primary: 2048  | 89 ,
            }
        });
    }
    runEditorCommand(_accessor, editor, _args) {
        return CopyPasteController.get(editor)?.changePasteType();
    }
}));
registerEditorAction(class extends EditorAction {
    constructor() {
        super({
            id: 'editor.action.pasteAs',
            label: ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution',
                'pasteAs',
                "Paste As..."
            )),
            alias: 'Paste As...',
            precondition: EditorContextKeys.writable,
            metadata: {
                description: 'Paste as',
                args: [{
                        name: 'args',
                        schema: {
                            type: 'object',
                            properties: {
                                'id': {
                                    type: 'string',
                                    description: ( localizeWithPath(
                                        'vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution',
                                        'pasteAs.id',
                                        "The id of the paste edit to try applying. If not provided, the editor will show a picker."
                                    )),
                                }
                            },
                        }
                    }]
            }
        });
    }
    run(_accessor, editor, args) {
        const id = typeof args?.id === 'string' ? args.id : undefined;
        return CopyPasteController.get(editor)?.pasteAs(id);
    }
});
registerEditorAction(class extends EditorAction {
    constructor() {
        super({
            id: 'editor.action.pasteAsText',
            label: ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution',
                'pasteAsText',
                "Paste as Text"
            )),
            alias: 'Paste as Text',
            precondition: EditorContextKeys.writable,
        });
    }
    run(_accessor, editor, args) {
        return CopyPasteController.get(editor)?.pasteAs('text');
    }
});
