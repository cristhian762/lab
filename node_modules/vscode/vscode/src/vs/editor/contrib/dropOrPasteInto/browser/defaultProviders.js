import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { coalesce } from '../../../../base/common/arrays.js';
import { UriList } from '../../../../base/common/dataTransfer.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { Mimes } from '../../../../base/common/mime.js';
import { Schemas } from '../../../../base/common/network.js';
import { relativePath } from '../../../../base/common/resources.js';
import { URI } from '../../../../base/common/uri.js';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';
import { localizeWithPath } from '../../../../nls.js';
import { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';
const builtInLabel = ( localizeWithPath(
    'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
    'builtIn',
    'Built-in'
));
class SimplePasteAndDropProvider {
    async provideDocumentPasteEdits(_model, _ranges, dataTransfer, context, token) {
        const edit = await this.getEdit(dataTransfer, token);
        return edit ? { insertText: edit.insertText, label: edit.label, detail: edit.detail, handledMimeType: edit.handledMimeType, yieldTo: edit.yieldTo } : undefined;
    }
    async provideDocumentOnDropEdits(_model, _position, dataTransfer, token) {
        const edit = await this.getEdit(dataTransfer, token);
        return edit ? { insertText: edit.insertText, label: edit.label, handledMimeType: edit.handledMimeType, yieldTo: edit.yieldTo } : undefined;
    }
}
class DefaultTextProvider extends SimplePasteAndDropProvider {
    constructor() {
        super(...arguments);
        this.id = 'text';
        this.dropMimeTypes = [Mimes.text];
        this.pasteMimeTypes = [Mimes.text];
    }
    async getEdit(dataTransfer, _token) {
        const textEntry = dataTransfer.get(Mimes.text);
        if (!textEntry) {
            return;
        }
        if (( dataTransfer.has(Mimes.uriList))) {
            return;
        }
        const insertText = await textEntry.asString();
        return {
            handledMimeType: Mimes.text,
            label: ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'text.label',
                "Insert Plain Text"
            )),
            detail: builtInLabel,
            insertText
        };
    }
}
class PathProvider extends SimplePasteAndDropProvider {
    constructor() {
        super(...arguments);
        this.id = 'uri';
        this.dropMimeTypes = [Mimes.uriList];
        this.pasteMimeTypes = [Mimes.uriList];
    }
    async getEdit(dataTransfer, token) {
        const entries = await extractUriList(dataTransfer);
        if (!entries.length || token.isCancellationRequested) {
            return;
        }
        let uriCount = 0;
        const insertText = ( entries
            .map(({ uri, originalText }) => {
            if (uri.scheme === Schemas.file) {
                return uri.fsPath;
            }
            else {
                uriCount++;
                return originalText;
            }
        }))
            .join(' ');
        let label;
        if (uriCount > 0) {
            label = entries.length > 1
                ? ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'defaultDropProvider.uriList.uris',
                "Insert Uris"
            ))
                : ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'defaultDropProvider.uriList.uri',
                "Insert Uri"
            ));
        }
        else {
            label = entries.length > 1
                ? ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'defaultDropProvider.uriList.paths',
                "Insert Paths"
            ))
                : ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'defaultDropProvider.uriList.path',
                "Insert Path"
            ));
        }
        return {
            handledMimeType: Mimes.uriList,
            insertText,
            label,
            detail: builtInLabel,
        };
    }
}
let RelativePathProvider = class RelativePathProvider extends SimplePasteAndDropProvider {
    constructor(_workspaceContextService) {
        super();
        this._workspaceContextService = _workspaceContextService;
        this.id = 'relativePath';
        this.dropMimeTypes = [Mimes.uriList];
        this.pasteMimeTypes = [Mimes.uriList];
    }
    async getEdit(dataTransfer, token) {
        const entries = await extractUriList(dataTransfer);
        if (!entries.length || token.isCancellationRequested) {
            return;
        }
        const relativeUris = coalesce(( entries.map(({ uri }) => {
            const root = this._workspaceContextService.getWorkspaceFolder(uri);
            return root ? relativePath(root.uri, uri) : undefined;
        })));
        if (!relativeUris.length) {
            return;
        }
        return {
            handledMimeType: Mimes.uriList,
            insertText: relativeUris.join(' '),
            label: entries.length > 1
                ? ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'defaultDropProvider.uriList.relativePaths',
                "Insert Relative Paths"
            ))
                : ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'defaultDropProvider.uriList.relativePath',
                "Insert Relative Path"
            )),
            detail: builtInLabel,
        };
    }
};
RelativePathProvider = ( __decorate([
    ( __param(0, IWorkspaceContextService))
], RelativePathProvider));
class PasteHtmlProvider {
    constructor() {
        this.id = 'html';
        this.pasteMimeTypes = ['text/html'];
        this._yieldTo = [{ mimeType: Mimes.text }];
    }
    async provideDocumentPasteEdits(_model, _ranges, dataTransfer, context, token) {
        if (context.trigger !== 'explicit' && context.only !== this.id) {
            return;
        }
        const entry = dataTransfer.get('text/html');
        const htmlText = await entry?.asString();
        if (!htmlText || token.isCancellationRequested) {
            return;
        }
        return {
            insertText: htmlText,
            yieldTo: this._yieldTo,
            label: ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders',
                'pasteHtmlLabel',
                'Insert HTML'
            )),
            detail: builtInLabel,
        };
    }
}
async function extractUriList(dataTransfer) {
    const urlListEntry = dataTransfer.get(Mimes.uriList);
    if (!urlListEntry) {
        return [];
    }
    const strUriList = await urlListEntry.asString();
    const entries = [];
    for (const entry of UriList.parse(strUriList)) {
        try {
            entries.push({ uri: ( URI.parse(entry)), originalText: entry });
        }
        catch {
        }
    }
    return entries;
}
let DefaultDropProvidersFeature = class DefaultDropProvidersFeature extends Disposable {
    constructor(languageFeaturesService, workspaceContextService) {
        super();
        this._register(languageFeaturesService.documentOnDropEditProvider.register('*', ( new DefaultTextProvider())));
        this._register(languageFeaturesService.documentOnDropEditProvider.register('*', ( new PathProvider())));
        this._register(languageFeaturesService.documentOnDropEditProvider.register('*', ( new RelativePathProvider(workspaceContextService))));
    }
};
DefaultDropProvidersFeature = ( __decorate([
    ( __param(0, ILanguageFeaturesService)),
    ( __param(1, IWorkspaceContextService))
], DefaultDropProvidersFeature));
let DefaultPasteProvidersFeature = class DefaultPasteProvidersFeature extends Disposable {
    constructor(languageFeaturesService, workspaceContextService) {
        super();
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', ( new DefaultTextProvider())));
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', ( new PathProvider())));
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', ( new RelativePathProvider(workspaceContextService))));
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', ( new PasteHtmlProvider())));
    }
};
DefaultPasteProvidersFeature = ( __decorate([
    ( __param(0, ILanguageFeaturesService)),
    ( __param(1, IWorkspaceContextService))
], DefaultPasteProvidersFeature));
export { DefaultDropProvidersFeature, DefaultPasteProvidersFeature };
