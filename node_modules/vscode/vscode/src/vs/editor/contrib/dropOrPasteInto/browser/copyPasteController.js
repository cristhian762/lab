import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';
import { coalesce } from '../../../../base/common/arrays.js';
import { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';
import { matchesMimeType, createStringDataTransferItem, UriList } from '../../../../base/common/dataTransfer.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { Mimes } from '../../../../base/common/mime.js';
import { isWeb, isWindows } from '../../../../base/common/platform.js';
import { generateUuid } from '../../../../base/common/uuid.js';
import { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';
import { toVSDataTransfer, toExternalVSDataTransfer } from '../../../browser/dnd.js';
import { IBulkEditService } from '../../../browser/services/bulkEditService.js';
import { Range } from '../../../common/core/range.js';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';
import { sortEditsByYieldTo, createCombinedWorkspaceEdit } from './edit.js';
import { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';
import { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';
import { localizeWithPath } from '../../../../nls.js';
import { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IProgressService } from '../../../../platform/progress/common/progress.js';
import { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';
import { PostEditWidgetManager } from './postEditWidget.js';
import { MessageController } from '../../message/browser/messageController.js';
var CopyPasteController_1;
const changePasteTypeCommandId = 'editor.changePasteType';
const pasteWidgetVisibleCtx = ( new RawContextKey('pasteWidgetVisible', false, ( localizeWithPath(
    'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController',
    'pasteWidgetVisible',
    "Whether the paste widget is showing"
))));
const vscodeClipboardMime = 'application/vnd.code.copyMetadata';
let CopyPasteController = class CopyPasteController extends Disposable {
    static { CopyPasteController_1 = this; }
    static { this.ID = 'editor.contrib.copyPasteActionController'; }
    static get(editor) {
        return editor.getContribution(CopyPasteController_1.ID);
    }
    constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {
        super();
        this._bulkEditService = _bulkEditService;
        this._clipboardService = _clipboardService;
        this._languageFeaturesService = _languageFeaturesService;
        this._quickInputService = _quickInputService;
        this._progressService = _progressService;
        this._editor = editor;
        const container = editor.getContainerDomNode();
        this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));
        this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));
        this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));
        this._pasteProgressManager = this._register(( new InlineProgressManager('pasteIntoEditor', editor, instantiationService)));
        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: ( localizeWithPath(
            'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController',
            'postPasteWidgetTitle',
            "Show paste options..."
        )) }));
    }
    changePasteType() {
        this._postPasteWidgetManager.tryShowSelector();
    }
    pasteAs(preferredId) {
        this._editor.focus();
        try {
            this._pasteAsActionContext = { preferredId };
            getActiveDocument().execCommand('paste');
        }
        finally {
            this._pasteAsActionContext = undefined;
        }
    }
    clearWidgets() {
        this._postPasteWidgetManager.clear();
    }
    isPasteAsEnabled() {
        return this._editor.getOption(85 ).enabled
            && !this._editor.getOption(91 );
    }
    async finishedPaste() {
        await this._currentPasteOperation;
    }
    handleCopy(e) {
        if (!this._editor.hasTextFocus()) {
            return;
        }
        if (isWeb) {
            this._clipboardService.writeResources([]);
        }
        if (!e.clipboardData || !this.isPasteAsEnabled()) {
            return;
        }
        const model = this._editor.getModel();
        const selections = this._editor.getSelections();
        if (!model || !selections?.length) {
            return;
        }
        const enableEmptySelectionClipboard = this._editor.getOption(37 );
        let ranges = selections;
        const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();
        if (wasFromEmptySelection) {
            if (!enableEmptySelectionClipboard) {
                return;
            }
            ranges = [( new Range(
                ranges[0].startLineNumber,
                1,
                ranges[0].startLineNumber,
                1 + model.getLineLength(ranges[0].startLineNumber)
            ))];
        }
        const toCopy = this._editor._getViewModel()?.getPlainTextToCopy(selections, enableEmptySelectionClipboard, isWindows);
        const multicursorText = Array.isArray(toCopy) ? toCopy : null;
        const defaultPastePayload = {
            multicursorText,
            pasteOnNewLine: wasFromEmptySelection,
            mode: null
        };
        const providers = this._languageFeaturesService.documentPasteEditProvider
            .ordered(model)
            .filter(x => !!x.prepareDocumentPaste);
        if (!providers.length) {
            this.setCopyMetadata(e.clipboardData, { defaultPastePayload });
            return;
        }
        const dataTransfer = toVSDataTransfer(e.clipboardData);
        const providerCopyMimeTypes = providers.flatMap(x => x.copyMimeTypes ?? []);
        const handle = generateUuid();
        this.setCopyMetadata(e.clipboardData, {
            id: handle,
            providerCopyMimeTypes,
            defaultPastePayload
        });
        const promise = createCancelablePromise(async (token) => {
            const results = coalesce(await Promise.all(( providers.map(async (provider) => {
                try {
                    return await provider.prepareDocumentPaste(model, ranges, dataTransfer, token);
                }
                catch (err) {
                    console.error(err);
                    return undefined;
                }
            }))));
            results.reverse();
            for (const result of results) {
                for (const [mime, value] of result) {
                    dataTransfer.replace(mime, value);
                }
            }
            return dataTransfer;
        });
        this._currentCopyOperation?.dataTransferPromise.cancel();
        this._currentCopyOperation = { handle: handle, dataTransferPromise: promise };
    }
    async handlePaste(e) {
        if (!e.clipboardData || !this._editor.hasTextFocus()) {
            return;
        }
        MessageController.get(this._editor)?.closeMessage();
        this._currentPasteOperation?.cancel();
        this._currentPasteOperation = undefined;
        const model = this._editor.getModel();
        const selections = this._editor.getSelections();
        if (!selections?.length || !model) {
            return;
        }
        if (!this.isPasteAsEnabled()
            && !this._pasteAsActionContext
        ) {
            return;
        }
        const metadata = this.fetchCopyMetadata(e);
        const dataTransfer = toExternalVSDataTransfer(e.clipboardData);
        dataTransfer.delete(vscodeClipboardMime);
        const allPotentialMimeTypes = [
            ...e.clipboardData.types,
            ...(metadata?.providerCopyMimeTypes ?? []),
            Mimes.uriList,
        ];
        const allProviders = this._languageFeaturesService.documentPasteEditProvider
            .ordered(model)
            .filter(provider => {
            if (this._pasteAsActionContext?.preferredId) {
                if (this._pasteAsActionContext.preferredId !== provider.id) {
                    return false;
                }
            }
            return provider.pasteMimeTypes?.some(type => matchesMimeType(type, allPotentialMimeTypes));
        });
        if (!allProviders.length) {
            if (this._pasteAsActionContext?.preferredId) {
                this.showPasteAsNoEditMessage(selections, this._pasteAsActionContext?.preferredId);
            }
            return;
        }
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this._pasteAsActionContext) {
            this.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata, { trigger: 'explicit', only: this._pasteAsActionContext.preferredId });
        }
        else {
            this.doPasteInline(allProviders, selections, dataTransfer, metadata, { trigger: 'implicit' });
        }
    }
    showPasteAsNoEditMessage(selections, editId) {
        MessageController.get(this._editor)?.showMessage(( localizeWithPath(
            'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController',
            'pasteAsError',
            "No paste edits for '{0}' found",
            editId
        )), selections[0].getStartPosition());
    }
    doPasteInline(allProviders, selections, dataTransfer, metadata, context) {
        const p = createCancelablePromise(async (token) => {
            const editor = this._editor;
            if (!editor.hasModel()) {
                return;
            }
            const model = editor.getModel();
            const tokenSource = ( new EditorStateCancellationTokenSource(
                editor,
                1  | 2 ,
                undefined,
                token
            ));
            try {
                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);
                if (tokenSource.token.isCancellationRequested) {
                    return;
                }
                const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));
                if (!supportedProviders.length
                    || (supportedProviders.length === 1 && supportedProviders[0].id === 'text')
                ) {
                    await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);
                    return;
                }
                const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);
                if (tokenSource.token.isCancellationRequested) {
                    return;
                }
                if (providerEdits.length === 1 && providerEdits[0].providerId === 'text') {
                    await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);
                    return;
                }
                if (providerEdits.length) {
                    const canShowWidget = editor.getOption(85 ).showPasteSelector === 'afterPaste';
                    return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: providerEdits }, canShowWidget, tokenSource.token);
                }
                await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);
            }
            finally {
                tokenSource.dispose();
                if (this._currentPasteOperation === p) {
                    this._currentPasteOperation = undefined;
                }
            }
        });
        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), ( localizeWithPath(
            'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController',
            'pasteIntoEditorProgress',
            "Running paste handlers. Click to cancel"
        )), p);
        this._currentPasteOperation = p;
    }
    showPasteAsPick(preferredId, allProviders, selections, dataTransfer, metadata, context) {
        const p = createCancelablePromise(async (token) => {
            const editor = this._editor;
            if (!editor.hasModel()) {
                return;
            }
            const model = editor.getModel();
            const tokenSource = ( new EditorStateCancellationTokenSource(
                editor,
                1  | 2 ,
                undefined,
                token
            ));
            try {
                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);
                if (tokenSource.token.isCancellationRequested) {
                    return;
                }
                let supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));
                if (preferredId) {
                    supportedProviders = supportedProviders.filter(edit => edit.id === preferredId);
                }
                const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);
                if (tokenSource.token.isCancellationRequested) {
                    return;
                }
                if (!providerEdits.length) {
                    if (context.only) {
                        this.showPasteAsNoEditMessage(selections, context.only);
                    }
                    return;
                }
                let pickedEdit;
                if (preferredId) {
                    pickedEdit = providerEdits.at(0);
                }
                else {
                    const selected = await this._quickInputService.pick(( providerEdits.map((edit) => ({
                        label: edit.label,
                        description: edit.providerId,
                        detail: edit.detail,
                        edit,
                    }))), {
                        placeHolder: ( localizeWithPath(
                            'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController',
                            'pasteAsPickerPlaceholder',
                            "Select Paste Action"
                        )),
                    });
                    pickedEdit = selected?.edit;
                }
                if (!pickedEdit) {
                    return;
                }
                const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);
                await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });
            }
            finally {
                tokenSource.dispose();
                if (this._currentPasteOperation === p) {
                    this._currentPasteOperation = undefined;
                }
            }
        });
        this._progressService.withProgress({
            location: 10 ,
            title: ( localizeWithPath(
                'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController',
                'pasteAsProgress',
                "Running paste handlers"
            )),
        }, () => p);
    }
    setCopyMetadata(dataTransfer, metadata) {
        dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));
    }
    fetchCopyMetadata(e) {
        if (!e.clipboardData) {
            return;
        }
        const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);
        if (rawMetadata) {
            try {
                return JSON.parse(rawMetadata);
            }
            catch {
                return undefined;
            }
        }
        const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);
        if (metadata) {
            return {
                defaultPastePayload: {
                    mode: metadata.mode,
                    multicursorText: metadata.multicursorText ?? null,
                    pasteOnNewLine: !!metadata.isFromEmptySelection,
                },
            };
        }
        return undefined;
    }
    async mergeInDataFromCopy(dataTransfer, metadata, token) {
        if (metadata?.id && this._currentCopyOperation?.handle === metadata.id) {
            const toMergeDataTransfer = await this._currentCopyOperation.dataTransferPromise;
            if (token.isCancellationRequested) {
                return;
            }
            for (const [key, value] of toMergeDataTransfer) {
                dataTransfer.replace(key, value);
            }
        }
        if (!( dataTransfer.has(Mimes.uriList))) {
            const resources = await this._clipboardService.readResources();
            if (token.isCancellationRequested) {
                return;
            }
            if (resources.length) {
                dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));
            }
        }
    }
    async getPasteEdits(providers, dataTransfer, model, selections, context, token) {
        const results = await raceCancellation(Promise.all(( providers.map(async (provider) => {
            try {
                const edit = await provider.provideDocumentPasteEdits?.(model, selections, dataTransfer, context, token);
                if (edit) {
                    return { ...edit, providerId: provider.id };
                }
            }
            catch (err) {
                console.error(err);
            }
            return undefined;
        }))), token);
        const edits = coalesce(results ?? []);
        return sortEditsByYieldTo(edits);
    }
    async applyDefaultPasteHandler(dataTransfer, metadata, token) {
        const textDataTransfer = dataTransfer.get(Mimes.text) ?? dataTransfer.get('text');
        if (!textDataTransfer) {
            return;
        }
        const text = await textDataTransfer.asString();
        if (token.isCancellationRequested) {
            return;
        }
        const payload = {
            text,
            pasteOnNewLine: metadata?.defaultPastePayload.pasteOnNewLine ?? false,
            multicursorText: metadata?.defaultPastePayload.multicursorText ?? null,
            mode: null,
        };
        this._editor.trigger('keyboard', "paste" , payload);
    }
};
CopyPasteController = CopyPasteController_1 = ( __decorate([
    ( __param(1, IInstantiationService)),
    ( __param(2, IBulkEditService)),
    ( __param(3, IClipboardService)),
    ( __param(4, ILanguageFeaturesService)),
    ( __param(5, IQuickInputService)),
    ( __param(6, IProgressService))
], CopyPasteController));
function isSupportedPasteProvider(provider, dataTransfer) {
    return Boolean(provider.pasteMimeTypes?.some(type => dataTransfer.matches(type)));
}
export { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx };
