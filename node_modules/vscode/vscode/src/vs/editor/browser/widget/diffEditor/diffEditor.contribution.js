import { getActiveElement } from '../../../../base/browser/dom.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { EditorAction2 } from '../../editorExtensions.js';
import { ICodeEditorService } from '../../services/codeEditorService.js';
import { DiffEditorWidget } from './diffEditorWidget.js';
import { EditorContextKeys } from '../../../common/editorContextKeys.js';
import { localizeWithPath, localize2WithPath } from '../../../../nls.js';
import { registerAction2, MenuRegistry, MenuId, Action2 } from '../../../../platform/actions/common/actions.js';
import { CommandsRegistry } from '../../../../platform/commands/common/commands.js';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';
import { ContextKeyExpr, ContextKeyEqualsExpr } from '../../../../platform/contextkey/common/contextkey.js';
import './registrations.contribution.js';
class ToggleCollapseUnchangedRegions extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleCollapseUnchangedRegions',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'toggleCollapseUnchangedRegions',
                'Toggle Collapse Unchanged Regions'
            )),
            icon: Codicon.map,
            toggled: ( ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled')),
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
            menu: {
                when: ( ContextKeyExpr.has('isInDiffEditor')),
                id: MenuId.EditorTitle,
                order: 22,
                group: 'navigation',
            },
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');
        configurationService.updateValue('diffEditor.hideUnchangedRegions.enabled', newValue);
    }
}
registerAction2(ToggleCollapseUnchangedRegions);
class ToggleShowMovedCodeBlocks extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleShowMovedCodeBlocks',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'toggleShowMovedCodeBlocks',
                'Toggle Show Moved Code Blocks'
            )),
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');
        configurationService.updateValue('diffEditor.experimental.showMoves', newValue);
    }
}
registerAction2(ToggleShowMovedCodeBlocks);
class ToggleUseInlineViewWhenSpaceIsLimited extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'toggleUseInlineViewWhenSpaceIsLimited',
                'Toggle Use Inline View When Space Is Limited'
            )),
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.useInlineViewWhenSpaceIsLimited');
        configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);
    }
}
registerAction2(ToggleUseInlineViewWhenSpaceIsLimited);
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: ( new ToggleUseInlineViewWhenSpaceIsLimited()).desc.id,
        title: ( localizeWithPath(
            'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
            'useInlineViewWhenSpaceIsLimited',
            "Use Inline View When Space Is Limited"
        )),
        toggled: ( ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited')),
        precondition: ( ContextKeyExpr.has('isInDiffEditor')),
    },
    order: 11,
    group: '1_diff',
    when: ( ContextKeyExpr.and(
        EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached,
        ( ContextKeyExpr.has('isInDiffEditor'))
    )),
});
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: ( new ToggleShowMovedCodeBlocks()).desc.id,
        title: ( localizeWithPath(
            'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
            'showMoves',
            "Show Moved Code Blocks"
        )),
        icon: Codicon.move,
        toggled: ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),
        precondition: ( ContextKeyExpr.has('isInDiffEditor')),
    },
    order: 10,
    group: '1_diff',
    when: ( ContextKeyExpr.has('isInDiffEditor')),
});
const diffEditorCategory = ( localize2WithPath(
    'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
    'diffEditor',
    "Diff Editor"
));
class SwitchSide extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.switchSide',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'switchSide',
                'Switch Side'
            )),
            icon: Codicon.arrowSwap,
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, arg) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget) {
            if (arg && arg.dryRun) {
                return { destinationSelection: diffEditor.mapToOtherSide().destinationSelection };
            }
            else {
                diffEditor.switchSide();
            }
        }
        return undefined;
    }
}
registerAction2(SwitchSide);
class ExitCompareMove extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.exitCompareMove',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'exitCompareMove',
                'Exit Compare Move'
            )),
            icon: Codicon.close,
            precondition: EditorContextKeys.comparingMovedCode,
            f1: false,
            category: diffEditorCategory,
            keybinding: {
                weight: 10000,
                primary: 9 ,
            }
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget) {
            diffEditor.exitCompareMove();
        }
    }
}
registerAction2(ExitCompareMove);
class CollapseAllUnchangedRegions extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.collapseAllUnchangedRegions',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'collapseAllUnchangedRegions',
                'Collapse All Unchanged Regions'
            )),
            icon: Codicon.fold,
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget) {
            diffEditor.collapseAllUnchangedRegions();
        }
    }
}
registerAction2(CollapseAllUnchangedRegions);
class ShowAllUnchangedRegions extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.showAllUnchangedRegions',
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'showAllUnchangedRegions',
                'Show All Unchanged Regions'
            )),
            icon: Codicon.unfold,
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget) {
            diffEditor.showAllUnchangedRegions();
        }
    }
}
registerAction2(ShowAllUnchangedRegions);
const accessibleDiffViewerCategory = ( localize2WithPath(
    'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
    'accessibleDiffViewer',
    "Accessible Diff Viewer"
));
class AccessibleDiffViewerNext extends Action2 {
    static { this.id = 'editor.action.accessibleDiffViewer.next'; }
    constructor() {
        super({
            id: AccessibleDiffViewerNext.id,
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'editor.action.accessibleDiffViewer.next',
                'Go to Next Difference'
            )),
            category: accessibleDiffViewerCategory,
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
            keybinding: {
                primary: 65 ,
                weight: 100
            },
            f1: true,
        });
    }
    run(accessor) {
        const diffEditor = findFocusedDiffEditor(accessor);
        diffEditor?.accessibleDiffViewerNext();
    }
}
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: AccessibleDiffViewerNext.id,
        title: ( localizeWithPath(
            'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
            'Open Accessible Diff Viewer',
            "Open Accessible Diff Viewer"
        )),
        precondition: ( ContextKeyExpr.has('isInDiffEditor')),
    },
    order: 10,
    group: '2_diff',
    when: ( ContextKeyExpr.and(( EditorContextKeys.accessibleDiffViewerVisible.negate()), ( ContextKeyExpr.has('isInDiffEditor')))),
});
class AccessibleDiffViewerPrev extends Action2 {
    static { this.id = 'editor.action.accessibleDiffViewer.prev'; }
    constructor() {
        super({
            id: AccessibleDiffViewerPrev.id,
            title: ( localize2WithPath(
                'vs/editor/browser/widget/diffEditor/diffEditor.contribution',
                'editor.action.accessibleDiffViewer.prev',
                'Go to Previous Difference'
            )),
            category: accessibleDiffViewerCategory,
            precondition: ( ContextKeyExpr.has('isInDiffEditor')),
            keybinding: {
                primary: 1024  | 65 ,
                weight: 100
            },
            f1: true,
        });
    }
    run(accessor) {
        const diffEditor = findFocusedDiffEditor(accessor);
        diffEditor?.accessibleDiffViewerPrev();
    }
}
function findFocusedDiffEditor(accessor) {
    const codeEditorService = accessor.get(ICodeEditorService);
    const diffEditors = codeEditorService.listDiffEditors();
    const activeElement = getActiveElement();
    if (activeElement) {
        for (const d of diffEditors) {
            const container = d.getContainerDomNode();
            if (isElementOrParentOf(container, activeElement)) {
                return d;
            }
        }
    }
    return null;
}
function isElementOrParentOf(elementOrParent, element) {
    let e = element;
    while (e) {
        if (e === elementOrParent) {
            return true;
        }
        e = e.parentElement;
    }
    return false;
}
CommandsRegistry.registerCommandAlias('editor.action.diffReview.next', AccessibleDiffViewerNext.id);
registerAction2(AccessibleDiffViewerNext);
CommandsRegistry.registerCommandAlias('editor.action.diffReview.prev', AccessibleDiffViewerPrev.id);
registerAction2(AccessibleDiffViewerPrev);
export { AccessibleDiffViewerNext, AccessibleDiffViewerPrev, CollapseAllUnchangedRegions, ExitCompareMove, ShowAllUnchangedRegions, SwitchSide, ToggleCollapseUnchangedRegions, ToggleShowMovedCodeBlocks, ToggleUseInlineViewWhenSpaceIsLimited, findFocusedDiffEditor };
