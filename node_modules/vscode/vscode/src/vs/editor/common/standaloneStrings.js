import { localizeWithPath } from '../../nls.js';
var AccessibilityHelpNLS;
( (function(AccessibilityHelpNLS) {
    AccessibilityHelpNLS.accessibilityHelpTitle = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        'accessibilityHelpTitle',
        "Accessibility Help"
    ));
    AccessibilityHelpNLS.openingDocs = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "openingDocs",
        "Opening the Accessibility documentation page."
    ));
    AccessibilityHelpNLS.readonlyDiffEditor = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "readonlyDiffEditor",
        "You are in a read-only pane of a diff editor."
    ));
    AccessibilityHelpNLS.editableDiffEditor = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "editableDiffEditor",
        "You are in a pane of a diff editor."
    ));
    AccessibilityHelpNLS.readonlyEditor = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "readonlyEditor",
        "You are in a read-only code editor."
    ));
    AccessibilityHelpNLS.editableEditor = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "editableEditor",
        "You are in a code editor."
    ));
    AccessibilityHelpNLS.changeConfigToOnMac = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "changeConfigToOnMac",
        "Configure the application to be optimized for usage with a Screen Reader (Command+E)."
    ));
    AccessibilityHelpNLS.changeConfigToOnWinLinux = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "changeConfigToOnWinLinux",
        "Configure the application to be optimized for usage with a Screen Reader (Control+E)."
    ));
    AccessibilityHelpNLS.auto_on = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "auto_on",
        "The application is configured to be optimized for usage with a Screen Reader."
    ));
    AccessibilityHelpNLS.auto_off = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "auto_off",
        "The application is configured to never be optimized for usage with a Screen Reader."
    ));
    AccessibilityHelpNLS.screenReaderModeEnabled = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "screenReaderModeEnabled",
        "Screen Reader Optimized Mode enabled."
    ));
    AccessibilityHelpNLS.screenReaderModeDisabled = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "screenReaderModeDisabled",
        "Screen Reader Optimized Mode disabled."
    ));
    AccessibilityHelpNLS.tabFocusModeOnMsg = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "tabFocusModeOnMsg",
        "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior {0}."
    ));
    AccessibilityHelpNLS.tabFocusModeOnMsgNoKb = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "tabFocusModeOnMsgNoKb",
        "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding."
    ));
    AccessibilityHelpNLS.stickScrollKb = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "stickScrollKb",
        "Focus Sticky Scroll ({0}) to focus the currently nested scopes."
    ));
    AccessibilityHelpNLS.stickScrollNoKb = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "stickScrollNoKb",
        "Focus Sticky Scroll to focus the currently nested scopes. It is currently not triggerable by a keybinding."
    ));
    AccessibilityHelpNLS.tabFocusModeOffMsg = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "tabFocusModeOffMsg",
        "Pressing Tab in the current editor will insert the tab character. Toggle this behavior {0}."
    ));
    AccessibilityHelpNLS.tabFocusModeOffMsgNoKb = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "tabFocusModeOffMsgNoKb",
        "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding."
    ));
    AccessibilityHelpNLS.showAccessibilityHelpAction = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "showAccessibilityHelpAction",
        "Show Accessibility Help"
    ));
    AccessibilityHelpNLS.listSignalSounds = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "listSignalSoundsCommand",
        "Run the command: List Signal Sounds for an overview of all sounds and their current status."
    ));
    AccessibilityHelpNLS.listAlerts = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "listAnnouncementsCommand",
        "Run the command: List Signal Announcements for an overview of announcements and their current status."
    ));
    AccessibilityHelpNLS.quickChat = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "quickChatCommand",
        "Toggle quick chat ({0}) to open or close a chat session."
    ));
    AccessibilityHelpNLS.quickChatNoKb = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "quickChatCommandNoKb",
        "Toggle quick chat is not currently triggerable by a keybinding."
    ));
    AccessibilityHelpNLS.startInlineChat = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "startInlineChatCommand",
        "Start inline chat ({0}) to create an in editor chat session."
    ));
    AccessibilityHelpNLS.startInlineChatNoKb = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        "startInlineChatCommandNoKb",
        "The command: Start inline chat is not currentlyt riggerable by a keybinding."
    ));
})(AccessibilityHelpNLS || (AccessibilityHelpNLS = {})));
var StandaloneCodeEditorNLS;
( (function(StandaloneCodeEditorNLS) {
    StandaloneCodeEditorNLS.editorViewAccessibleLabel = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        'editorViewAccessibleLabel',
        "Editor content"
    ));
    StandaloneCodeEditorNLS.accessibilityHelpMessage = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        'accessibilityHelpMessage',
        "Press Alt+F1 for Accessibility Options."
    ));
})(StandaloneCodeEditorNLS || (StandaloneCodeEditorNLS = {})));
var StandaloneServicesNLS;
( (function(StandaloneServicesNLS) {
    StandaloneServicesNLS.bulkEditServiceSummary = ( localizeWithPath(
        'vs/editor/common/standaloneStrings',
        'bulkEditServiceSummary',
        "Made {0} edits in {1} files"
    ));
})(StandaloneServicesNLS || (StandaloneServicesNLS = {})));
export { AccessibilityHelpNLS, StandaloneCodeEditorNLS, StandaloneServicesNLS };
