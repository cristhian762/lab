import { localizeWithPath } from '../../nls.js';
import { RawContextKey } from '../../platform/contextkey/common/contextkey.js';
var EditorContextKeys;
( (function(EditorContextKeys) {
    EditorContextKeys.editorSimpleInput = ( new RawContextKey('editorSimpleInput', false, true));
    EditorContextKeys.editorTextFocus = ( new RawContextKey('editorTextFocus', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorTextFocus',
     "Whether the editor text has focus (cursor is blinking)"
    ))));
    EditorContextKeys.focus = ( new RawContextKey('editorFocus', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorFocus',
     "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)"
    ))));
    EditorContextKeys.textInputFocus = ( new RawContextKey('textInputFocus', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'textInputFocus',
     "Whether an editor or a rich text input has focus (cursor is blinking)"
    ))));
    EditorContextKeys.readOnly = ( new RawContextKey('editorReadonly', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorReadonly',
     "Whether the editor is read-only"
    ))));
    EditorContextKeys.inDiffEditor = ( new RawContextKey('inDiffEditor', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'inDiffEditor',
     "Whether the context is a diff editor"
    ))));
    EditorContextKeys.isEmbeddedDiffEditor = ( new RawContextKey('isEmbeddedDiffEditor', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'isEmbeddedDiffEditor',
     "Whether the context is an embedded diff editor"
    ))));
    EditorContextKeys.inMultiDiffEditor = ( new RawContextKey('inMultiDiffEditor', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'inMultiDiffEditor',
     "Whether the context is a multi diff editor"
    ))));
    EditorContextKeys.multiDiffEditorAllCollapsed = ( new RawContextKey('multiDiffEditorAllCollapsed', undefined, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'multiDiffEditorAllCollapsed',
     "Whether all files in multi diff editor are collapsed"
    ))));
    EditorContextKeys.hasChanges = ( new RawContextKey('diffEditorHasChanges', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'diffEditorHasChanges',
     "Whether the diff editor has changes"
    ))));
    EditorContextKeys.comparingMovedCode = ( new RawContextKey('comparingMovedCode', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'comparingMovedCode',
     "Whether a moved code block is selected for comparison"
    ))));
    EditorContextKeys.accessibleDiffViewerVisible = ( new RawContextKey('accessibleDiffViewerVisible', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'accessibleDiffViewerVisible',
     "Whether the accessible diff viewer is visible"
    ))));
    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = ( new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'diffEditorRenderSideBySideInlineBreakpointReached',
     "Whether the diff editor render side by side inline breakpoint is reached"
    ))));
    EditorContextKeys.columnSelection = ( new RawContextKey('editorColumnSelection', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorColumnSelection',
     "Whether `editor.columnSelection` is enabled"
    ))));
    EditorContextKeys.writable = ( EditorContextKeys.readOnly.toNegated());
    EditorContextKeys.hasNonEmptySelection = ( new RawContextKey('editorHasSelection', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasSelection',
     "Whether the editor has text selected"
    ))));
    EditorContextKeys.hasOnlyEmptySelection = ( EditorContextKeys.hasNonEmptySelection.toNegated());
    EditorContextKeys.hasMultipleSelections = ( new RawContextKey('editorHasMultipleSelections', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasMultipleSelections',
     "Whether the editor has multiple selections"
    ))));
    EditorContextKeys.hasSingleSelection = ( EditorContextKeys.hasMultipleSelections.toNegated());
    EditorContextKeys.tabMovesFocus = ( new RawContextKey('editorTabMovesFocus', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorTabMovesFocus',
     "Whether `Tab` will move focus out of the editor"
    ))));
    EditorContextKeys.tabDoesNotMoveFocus = ( EditorContextKeys.tabMovesFocus.toNegated());
    EditorContextKeys.isInEmbeddedEditor = ( new RawContextKey('isInEmbeddedEditor', false, true));
    EditorContextKeys.canUndo = ( new RawContextKey('canUndo', false, true));
    EditorContextKeys.canRedo = ( new RawContextKey('canRedo', false, true));
    EditorContextKeys.hoverVisible = ( new RawContextKey('editorHoverVisible', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHoverVisible',
     "Whether the editor hover is visible"
    ))));
    EditorContextKeys.hoverFocused = ( new RawContextKey('editorHoverFocused', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHoverFocused',
     "Whether the editor hover is focused"
    ))));
    EditorContextKeys.stickyScrollFocused = ( new RawContextKey('stickyScrollFocused', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'stickyScrollFocused',
     "Whether the sticky scroll is focused"
    ))));
    EditorContextKeys.stickyScrollVisible = ( new RawContextKey('stickyScrollVisible', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'stickyScrollVisible',
     "Whether the sticky scroll is visible"
    ))));
    EditorContextKeys.standaloneColorPickerVisible = ( new RawContextKey('standaloneColorPickerVisible', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'standaloneColorPickerVisible',
     "Whether the standalone color picker is visible"
    ))));
    EditorContextKeys.standaloneColorPickerFocused = ( new RawContextKey('standaloneColorPickerFocused', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'standaloneColorPickerFocused',
     "Whether the standalone color picker is focused"
    ))));
    EditorContextKeys.inCompositeEditor = ( new RawContextKey('inCompositeEditor', undefined, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'inCompositeEditor',
     "Whether the editor is part of a larger editor (e.g. notebooks)"
    ))));
    EditorContextKeys.notInCompositeEditor = ( EditorContextKeys.inCompositeEditor.toNegated());
    EditorContextKeys.languageId = ( new RawContextKey('editorLangId', '', ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorLangId',
     "The language identifier of the editor"
    ))));
    EditorContextKeys.hasCompletionItemProvider = ( new RawContextKey('editorHasCompletionItemProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasCompletionItemProvider',
     "Whether the editor has a completion item provider"
    ))));
    EditorContextKeys.hasCodeActionsProvider = ( new RawContextKey('editorHasCodeActionsProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasCodeActionsProvider',
     "Whether the editor has a code actions provider"
    ))));
    EditorContextKeys.hasCodeLensProvider = ( new RawContextKey('editorHasCodeLensProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasCodeLensProvider',
     "Whether the editor has a code lens provider"
    ))));
    EditorContextKeys.hasDefinitionProvider = ( new RawContextKey('editorHasDefinitionProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasDefinitionProvider',
     "Whether the editor has a definition provider"
    ))));
    EditorContextKeys.hasDeclarationProvider = ( new RawContextKey('editorHasDeclarationProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasDeclarationProvider',
     "Whether the editor has a declaration provider"
    ))));
    EditorContextKeys.hasImplementationProvider = ( new RawContextKey('editorHasImplementationProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasImplementationProvider',
     "Whether the editor has an implementation provider"
    ))));
    EditorContextKeys.hasTypeDefinitionProvider = ( new RawContextKey('editorHasTypeDefinitionProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasTypeDefinitionProvider',
     "Whether the editor has a type definition provider"
    ))));
    EditorContextKeys.hasHoverProvider = ( new RawContextKey('editorHasHoverProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasHoverProvider',
     "Whether the editor has a hover provider"
    ))));
    EditorContextKeys.hasDocumentHighlightProvider = ( new RawContextKey('editorHasDocumentHighlightProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasDocumentHighlightProvider',
     "Whether the editor has a document highlight provider"
    ))));
    EditorContextKeys.hasDocumentSymbolProvider = ( new RawContextKey('editorHasDocumentSymbolProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasDocumentSymbolProvider',
     "Whether the editor has a document symbol provider"
    ))));
    EditorContextKeys.hasReferenceProvider = ( new RawContextKey('editorHasReferenceProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasReferenceProvider',
     "Whether the editor has a reference provider"
    ))));
    EditorContextKeys.hasRenameProvider = ( new RawContextKey('editorHasRenameProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasRenameProvider',
     "Whether the editor has a rename provider"
    ))));
    EditorContextKeys.hasSignatureHelpProvider = ( new RawContextKey('editorHasSignatureHelpProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasSignatureHelpProvider',
     "Whether the editor has a signature help provider"
    ))));
    EditorContextKeys.hasInlayHintsProvider = ( new RawContextKey('editorHasInlayHintsProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasInlayHintsProvider',
     "Whether the editor has an inline hints provider"
    ))));
    EditorContextKeys.hasDocumentFormattingProvider = ( new RawContextKey('editorHasDocumentFormattingProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasDocumentFormattingProvider',
     "Whether the editor has a document formatting provider"
    ))));
    EditorContextKeys.hasDocumentSelectionFormattingProvider = ( new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasDocumentSelectionFormattingProvider',
     "Whether the editor has a document selection formatting provider"
    ))));
    EditorContextKeys.hasMultipleDocumentFormattingProvider = ( new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, ( localizeWithPath(
     'vs/editor/common/editorContextKeys',
     'editorHasMultipleDocumentFormattingProvider',
     "Whether the editor has multiple document formatting providers"
    ))));
    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = ( new RawContextKey(
     'editorHasMultipleDocumentSelectionFormattingProvider',
     false,
     ( localizeWithPath(
      'vs/editor/common/editorContextKeys',
      'editorHasMultipleDocumentSelectionFormattingProvider',
      "Whether the editor has multiple document selection formatting providers"
     ))
    ));
})(EditorContextKeys || (EditorContextKeys = {})));
export { EditorContextKeys };
