import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { Emitter } from '../../../base/common/event.js';
import { Disposable } from '../../../base/common/lifecycle.js';
import { createDecorator } from '../../instantiation/common/instantiation.js';
import { IUserDataSyncStoreService, IUserDataSyncLogService } from './userDataSync.js';
const IUserDataSyncAccountService = ( createDecorator('IUserDataSyncAccountService'));
let UserDataSyncAccountService = class UserDataSyncAccountService extends Disposable {
    get account() { return this._account; }
    constructor(userDataSyncStoreService, logService) {
        super();
        this.userDataSyncStoreService = userDataSyncStoreService;
        this.logService = logService;
        this._onDidChangeAccount = this._register(( new Emitter()));
        this.onDidChangeAccount = this._onDidChangeAccount.event;
        this._onTokenFailed = this._register(( new Emitter()));
        this.onTokenFailed = this._onTokenFailed.event;
        this.wasTokenFailed = false;
        this._register(userDataSyncStoreService.onTokenFailed(code => {
            this.logService.info('Settings Sync auth token failed', this.account?.authenticationProviderId, this.wasTokenFailed, code);
            this.updateAccount(undefined);
            if (code === "Forbidden" ) {
                this._onTokenFailed.fire(true );
            }
            else {
                this._onTokenFailed.fire(this.wasTokenFailed );
            }
            this.wasTokenFailed = true;
        }));
        this._register(userDataSyncStoreService.onTokenSucceed(() => this.wasTokenFailed = false));
    }
    async updateAccount(account) {
        if (account && this._account ? account.token !== this._account.token || account.authenticationProviderId !== this._account.authenticationProviderId : account !== this._account) {
            this._account = account;
            if (this._account) {
                this.userDataSyncStoreService.setAuthToken(this._account.token, this._account.authenticationProviderId);
            }
            this._onDidChangeAccount.fire(account);
        }
    }
};
UserDataSyncAccountService = ( __decorate([
    ( __param(0, IUserDataSyncStoreService)),
    ( __param(1, IUserDataSyncLogService))
], UserDataSyncAccountService));
export { IUserDataSyncAccountService, UserDataSyncAccountService };
