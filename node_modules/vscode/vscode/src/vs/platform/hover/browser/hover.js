import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { createDecorator } from '../../instantiation/common/instantiation.js';
import { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';
import { IConfigurationService } from '../../configuration/common/configuration.js';
import { addStandardDisposableListener } from '../../../base/browser/dom.js';
const IHoverService = ( createDecorator('hoverService'));
let WorkbenchHoverDelegate = class WorkbenchHoverDelegate extends Disposable {
    get delay() {
        if (this.instantHover && Date.now() - this.lastHoverHideTime < this.timeLimit) {
            return 0;
        }
        return this._delay;
    }
    constructor(placement, instantHover, overrideOptions = {}, configurationService, hoverService) {
        super();
        this.placement = placement;
        this.instantHover = instantHover;
        this.overrideOptions = overrideOptions;
        this.configurationService = configurationService;
        this.hoverService = hoverService;
        this.lastHoverHideTime = Number.MAX_VALUE;
        this.timeLimit = 200;
        this.hoverDisposables = this._register(( new DisposableStore()));
        this._delay = this.configurationService.getValue('workbench.hover.delay');
        this._register(this.configurationService.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration('workbench.hover.delay')) {
                this._delay = this.configurationService.getValue('workbench.hover.delay');
            }
        }));
    }
    showHover(options, focus) {
        const overrideOptions = typeof this.overrideOptions === 'function' ? this.overrideOptions(options, focus) : this.overrideOptions;
        this.hoverDisposables.clear();
        const targets = options.target instanceof HTMLElement ? [options.target] : options.target.targetElements;
        for (const target of targets) {
            this.hoverDisposables.add(addStandardDisposableListener(target, 'keydown', (e) => {
                if (e.equals(9 )) {
                    this.hoverService.hideHover();
                }
            }));
        }
        return this.hoverService.showHover({
            ...options,
            persistence: {
                hideOnHover: true
            },
            ...overrideOptions
        }, focus);
    }
    setOptions(options) {
        this.overrideOptions = options;
    }
    onDidHideHover() {
        this.hoverDisposables.clear();
        if (this.instantHover) {
            this.lastHoverHideTime = Date.now();
        }
    }
};
WorkbenchHoverDelegate = ( __decorate([
    ( __param(3, IConfigurationService)),
    ( __param(4, IHoverService))
], WorkbenchHoverDelegate));
const nativeHoverDelegate = {
    showHover: function () {
        throw new Error('Native hover function not implemented.');
    },
    delay: 0,
    showNativeHover: true
};
export { IHoverService, WorkbenchHoverDelegate, nativeHoverDelegate };
