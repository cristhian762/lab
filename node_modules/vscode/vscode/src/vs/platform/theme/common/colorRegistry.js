import { assertNever } from '../../../base/common/assert.js';
import { RunOnceScheduler } from '../../../base/common/async.js';
import { Color, RGBA } from '../../../base/common/color.js';
import { Emitter } from '../../../base/common/event.js';
import { localizeWithPath } from '../../../nls.js';
import { Extensions as Extensions$1 } from '../../jsonschemas/common/jsonContributionRegistry.js';
import { Registry } from '../../registry/common/platform.js';
function asCssVariableName(colorIdent) {
    return `--vscode-${colorIdent.replace(/\./g, '-')}`;
}
function asCssVariable(color) {
    return `var(${asCssVariableName(color)})`;
}
function asCssVariableWithDefault(color, defaultCssValue) {
    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;
}
const Extensions = {
    ColorContribution: 'base.contributions.colors'
};
class ColorRegistry {
    constructor() {
        this._onDidChangeSchema = ( (new Emitter()));
        this.onDidChangeSchema = this._onDidChangeSchema.event;
        this.colorSchema = { type: 'object', properties: {} };
        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };
        this.colorsById = {};
    }
    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {
        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };
        this.colorsById[id] = colorContribution;
        const propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };
        if (deprecationMessage) {
            propertySchema.deprecationMessage = deprecationMessage;
        }
        if (needsTransparency) {
            propertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';
            propertySchema.patternErrorMessage = 'This color must be transparent or it will obscure content';
        }
        this.colorSchema.properties[id] = propertySchema;
        this.colorReferenceSchema.enum.push(id);
        this.colorReferenceSchema.enumDescriptions.push(description);
        this._onDidChangeSchema.fire();
        return id;
    }
    deregisterColor(id) {
        delete this.colorsById[id];
        delete this.colorSchema.properties[id];
        const index = this.colorReferenceSchema.enum.indexOf(id);
        if (index !== -1) {
            this.colorReferenceSchema.enum.splice(index, 1);
            this.colorReferenceSchema.enumDescriptions.splice(index, 1);
        }
        this._onDidChangeSchema.fire();
    }
    getColors() {
        return (
             (( (Object.keys(this.colorsById))).map(id => this.colorsById[id]))
        );
    }
    resolveDefaultColor(id, theme) {
        const colorDesc = this.colorsById[id];
        if (colorDesc && colorDesc.defaults) {
            const colorValue = colorDesc.defaults[theme.type];
            return resolveColorValue(colorValue, theme);
        }
        return undefined;
    }
    getColorSchema() {
        return this.colorSchema;
    }
    getColorReferenceSchema() {
        return this.colorReferenceSchema;
    }
    toString() {
        const sorter = (a, b) => {
            const cat1 = a.indexOf('.') === -1 ? 0 : 1;
            const cat2 = b.indexOf('.') === -1 ? 0 : 1;
            if (cat1 !== cat2) {
                return cat1 - cat2;
            }
            return a.localeCompare(b);
        };
        return ( (( (Object.keys(this.colorsById))).sort(sorter).map(k => `- \`${k}\`: ${this.colorsById[k].description}`))).join('\n');
    }
}
const colorRegistry = ( (new ColorRegistry()));
Registry.add(Extensions.ColorContribution, colorRegistry);
function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {
    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);
}
function getColorRegistry() {
    return colorRegistry;
}
const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'foreground',
    "Overall foreground color. This color is only used if not overridden by a component."
))));
const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'disabledForeground',
    "Overall foreground for disabled elements. This color is only used if not overridden by a component."
))));
const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'errorForeground',
    "Overall foreground color for error messages. This color is only used if not overridden by a component."
))));
registerColor('descriptionForeground', { light: '#717171', dark: ( (transparent(foreground, 0.7))), hcDark: ( (transparent(foreground, 0.7))), hcLight: ( (transparent(foreground, 0.7))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'descriptionForeground',
    "Foreground color for description text providing additional information, for example for a label."
))));
const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'iconForeground',
    "The default color for icons in the workbench."
))));
const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'focusBorder',
    "Overall border color for focused elements. This color is only used if not overridden by a component."
))));
const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'contrastBorder',
    "An extra border around elements to separate them from others for greater contrast."
))));
const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'activeContrastBorder',
    "An extra border around active elements to separate them from others for greater contrast."
))));
const selectionBackground = registerColor('selection.background', { light: null, dark: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'selectionBackground',
    "The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor."
))));
registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textSeparatorForeground',
    "Color for text separators."
))));
const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textLinkForeground',
    "Foreground color for links in text."
))));
const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textLinkActiveForeground',
    "Foreground color for links in text when clicked on and on mouse hover."
))));
const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textPreformatForeground',
    "Foreground color for preformatted text segments."
))));
registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textPreformatBackground',
    "Background color for preformatted text segments."
))));
const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textBlockQuoteBackground',
    "Background color for block quotes in text."
))));
const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textBlockQuoteBorder',
    "Border color for block quotes in text."
))));
registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'textCodeBlockBackground',
    "Background color for code blocks in text."
))));
const widgetShadow = registerColor('widget.shadow', { dark: ( (transparent(Color.black, .36))), light: ( (transparent(Color.black, .16))), hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'widgetShadow',
    'Shadow color of widgets such as find/replace inside the editor.'
))));
const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'widgetBorder',
    'Border color of widgets such as find/replace inside the editor.'
))));
const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputBoxBackground',
    "Input box background."
))));
const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputBoxForeground',
    "Input box foreground."
))));
const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputBoxBorder',
    "Input box border."
))));
const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputBoxActiveOptionBorder',
    "Border color of activated options in input fields."
))));
registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputOption.hoverBackground',
    "Background color of activated options in input fields."
))));
const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: ( (transparent(focusBorder, 0.4))), light: ( (transparent(focusBorder, 0.2))), hcDark: Color.transparent, hcLight: Color.transparent }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputOption.activeBackground',
    "Background hover color of options in input fields."
))));
const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputOption.activeForeground',
    "Foreground color of activated options in input fields."
))));
const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: ( (transparent(foreground, 0.5))), dark: ( (transparent(foreground, 0.5))), hcDark: ( (transparent(foreground, 0.7))), hcLight: ( (transparent(foreground, 0.7))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputPlaceholderForeground',
    "Input box foreground color for placeholder text."
))));
const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationInfoBackground',
    "Input validation background color for information severity."
))));
const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationInfoForeground',
    "Input validation foreground color for information severity."
))));
const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationInfoBorder',
    "Input validation border color for information severity."
))));
const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationWarningBackground',
    "Input validation background color for warning severity."
))));
const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationWarningForeground',
    "Input validation foreground color for warning severity."
))));
const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationWarningBorder',
    "Input validation border color for warning severity."
))));
const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationErrorBackground',
    "Input validation background color for error severity."
))));
const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationErrorForeground',
    "Input validation foreground color for error severity."
))));
const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'inputValidationErrorBorder',
    "Input validation border color for error severity."
))));
const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'dropdownBackground',
    "Dropdown background."
))));
const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'dropdownListBackground',
    "Dropdown list background."
))));
const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'dropdownForeground',
    "Dropdown foreground."
))));
const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'dropdownBorder',
    "Dropdown border."
))));
const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonForeground',
    "Button foreground color."
))));
const buttonSeparator = registerColor('button.separator', { dark: ( (transparent(buttonForeground, .4))), light: ( (transparent(buttonForeground, .4))), hcDark: ( (transparent(buttonForeground, .4))), hcLight: ( (transparent(buttonForeground, .4))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonSeparator',
    "Button separator color."
))));
const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonBackground',
    "Button background color."
))));
const buttonHoverBackground = registerColor('button.hoverBackground', { dark: ( (lighten(buttonBackground, 0.2))), light: ( (darken(buttonBackground, 0.2))), hcDark: buttonBackground, hcLight: buttonBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonHoverBackground',
    "Button background color when hovering."
))));
const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonBorder',
    "Button border color."
))));
const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonSecondaryForeground',
    "Secondary button foreground color."
))));
const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonSecondaryBackground',
    "Secondary button background color."
))));
const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: ( (lighten(buttonSecondaryBackground, 0.2))), light: ( (darken(buttonSecondaryBackground, 0.2))), hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'buttonSecondaryHoverBackground',
    "Secondary button background color when hovering."
))));
const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'badgeBackground',
    "Badge background color. Badges are small information labels, e.g. for search results count."
))));
const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'badgeForeground',
    "Badge foreground color. Badges are small information labels, e.g. for search results count."
))));
const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'scrollbarShadow',
    "Scrollbar shadow to indicate that the view is scrolled."
))));
const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: ( (( (Color.fromHex('#797979'))).transparent(0.4))), light: ( (( (Color.fromHex('#646464'))).transparent(0.4))), hcDark: ( (transparent(contrastBorder, 0.6))), hcLight: ( (transparent(contrastBorder, 0.4))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'scrollbarSliderBackground',
    "Scrollbar slider background color."
))));
const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: ( (( (Color.fromHex('#646464'))).transparent(0.7))), light: ( (( (Color.fromHex('#646464'))).transparent(0.7))), hcDark: ( (transparent(contrastBorder, 0.8))), hcLight: ( (transparent(contrastBorder, 0.8))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'scrollbarSliderHoverBackground',
    "Scrollbar slider background color when hovering."
))));
const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: ( (( (Color.fromHex('#BFBFBF'))).transparent(0.4))), light: ( (( (Color.fromHex('#000000'))).transparent(0.6))), hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'scrollbarSliderActiveBackground',
    "Scrollbar slider background color when clicked on."
))));
const progressBarBackground = registerColor('progressBar.background', { dark: ( (Color.fromHex('#0E70C0'))), light: ( (Color.fromHex('#0E70C0'))), hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'progressBarBackground',
    "Background color of the progress bar that can show for long running operations."
))));
registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorError.background',
    'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorError.foreground',
    'Foreground color of error squigglies in the editor.'
))));
const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: ( (( (Color.fromHex('#E47777'))).transparent(0.8))), hcLight: '#B5200D' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'errorBorder',
    'If set, color of double underlines for errors in the editor.'
))));
const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorWarning.background',
    'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorWarning.foreground',
    'Foreground color of warning squigglies in the editor.'
))));
const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: ( (( (Color.fromHex('#FFCC00'))).transparent(0.8))), hcLight: ( (( (Color.fromHex('#FFCC00'))).transparent(0.8))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'warningBorder',
    'If set, color of double underlines for warnings in the editor.'
))));
registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInfo.background',
    'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInfo.foreground',
    'Foreground color of info squigglies in the editor.'
))));
const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: ( (( (Color.fromHex('#3794FF'))).transparent(0.8))), hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'infoBorder',
    'If set, color of double underlines for infos in the editor.'
))));
const editorHintForeground = registerColor('editorHint.foreground', { dark: ( (( (Color.fromHex('#eeeeee'))).transparent(0.7))), light: '#6c6c6c', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorHint.foreground',
    'Foreground color of hint squigglies in the editor.'
))));
registerColor('editorHint.border', { dark: null, light: null, hcDark: ( (( (Color.fromHex('#eeeeee'))).transparent(0.8))), hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'hintBorder',
    'If set, color of double underlines for hints in the editor.'
))));
registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'sashActiveBorder',
    "Border color of active sashes."
))));
const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorBackground',
    "Editor background color."
))));
const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorForeground',
    "Editor default foreground color."
))));
registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorStickyScrollBackground',
    "Background color of sticky scroll in the editor"
))));
registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: ( (( (Color.fromHex('#0F4A85'))).transparent(0.1))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorStickyScrollHoverBackground',
    "Background color of sticky scroll on hover in the editor"
))));
registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorStickyScrollBorder',
    "Border color of sticky scroll in the editor"
))));
registerColor('editorStickyScroll.shadow', { dark: scrollbarShadow, light: scrollbarShadow, hcDark: scrollbarShadow, hcLight: scrollbarShadow }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorStickyScrollShadow',
    " Shadow color of sticky scroll in the editor"
))));
const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorWidgetBackground',
    'Background color of editor widgets, such as find/replace.'
))));
const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorWidgetForeground',
    'Foreground color of editor widgets, such as find/replace.'
))));
const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorWidgetBorder',
    'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'
))));
registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorWidgetResizeBorder',
    "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget."
))));
const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'pickerBackground',
    "Quick picker background color. The quick picker widget is the container for pickers like the command palette."
))));
const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'pickerForeground',
    "Quick picker foreground color. The quick picker widget is the container for pickers like the command palette."
))));
const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: ( (new Color( (new RGBA(255, 255, 255, 0.105))))), light: ( (new Color( (new RGBA(0, 0, 0, 0.06))))), hcDark: '#000000', hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'pickerTitleBackground',
    "Quick picker title background color. The quick picker widget is the container for pickers like the command palette."
))));
const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'pickerGroupForeground',
    "Quick picker color for grouping labels."
))));
const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'pickerGroupBorder',
    "Quick picker color for grouping borders."
))));
const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: ( (new Color( (new RGBA(128, 128, 128, 0.17))))), light: ( (new Color( (new RGBA(221, 221, 221, 0.4))))), hcDark: Color.transparent, hcLight: Color.transparent }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'keybindingLabelBackground',
    "Keybinding label background color. The keybinding label is used to represent a keyboard shortcut."
))));
const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: ( (Color.fromHex('#CCCCCC'))), light: ( (Color.fromHex('#555555'))), hcDark: Color.white, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'keybindingLabelForeground',
    "Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut."
))));
const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: ( (new Color( (new RGBA(51, 51, 51, 0.6))))), light: ( (new Color( (new RGBA(204, 204, 204, 0.4))))), hcDark: ( (new Color( (new RGBA(111, 195, 223))))), hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'keybindingLabelBorder',
    "Keybinding label border color. The keybinding label is used to represent a keyboard shortcut."
))));
const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: ( (new Color( (new RGBA(68, 68, 68, 0.6))))), light: ( (new Color( (new RGBA(187, 187, 187, 0.4))))), hcDark: ( (new Color( (new RGBA(111, 195, 223))))), hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'keybindingLabelBottomBorder',
    "Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut."
))));
const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorSelectionBackground',
    "Color of the editor selection."
))));
const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorSelectionForeground',
    "Color of the selected text for high contrast."
))));
const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: ( (transparent(editorSelectionBackground, 0.5))), dark: ( (transparent(editorSelectionBackground, 0.5))), hcDark: ( (transparent(editorSelectionBackground, 0.7))), hcLight: ( (transparent(editorSelectionBackground, 0.5))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInactiveSelection',
    "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."
))), true);
const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorSelectionHighlight',
    'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'
))), true);
registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorSelectionHighlightBorder',
    "Border color for regions with the same content as the selection."
))));
const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorFindMatch',
    "Color of the current search match."
))));
const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'findMatchHighlight',
    "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."
))), true);
const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'findRangeHighlight',
    "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."
))), true);
registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorFindMatchBorder',
    "Border color of the current search match."
))));
const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'findMatchHighlightBorder',
    "Border color of the other search matches."
))));
const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: ( (transparent(activeContrastBorder, 0.4))), hcLight: ( (transparent(activeContrastBorder, 0.4))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'findRangeHighlightBorder',
    "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."
))), true);
registerColor('searchEditor.findMatchBackground', { light: ( (transparent(editorFindMatchHighlight, 0.66))), dark: ( (transparent(editorFindMatchHighlight, 0.66))), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'searchEditor.queryMatch',
    "Color of the Search Editor query matches."
))));
registerColor('searchEditor.findMatchBorder', { light: ( (transparent(editorFindMatchHighlightBorder, 0.66))), dark: ( (transparent(editorFindMatchHighlightBorder, 0.66))), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'searchEditor.editorFindMatchBorder',
    "Border color of the Search Editor query matches."
))));
registerColor('search.resultsInfoForeground', { light: foreground, dark: ( (transparent(foreground, 0.65))), hcDark: foreground, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'search.resultsInfoForeground',
    "Color of the text in the search viewlet's completion message."
))));
const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'hoverHighlight',
    'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'hoverBackground',
    'Background color of the editor hover.'
))));
const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'hoverForeground',
    'Foreground color of the editor hover.'
))));
const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'hoverBorder',
    'Border color of the editor hover.'
))));
registerColor('editorHoverWidget.statusBarBackground', { dark: ( (lighten(editorHoverBackground, 0.2))), light: ( (darken(editorHoverBackground, 0.05))), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'statusBarBackground',
    "Background color of the editor hover status bar."
))));
const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'activeLinkForeground',
    'Color of active links.'
))));
const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInlayHintForeground',
    'Foreground color of inline hints'
))));
const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: ( (transparent(badgeBackground, .10))), light: ( (transparent(badgeBackground, .10))), hcDark: ( (transparent(Color.white, .10))), hcLight: ( (transparent(badgeBackground, .10))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInlayHintBackground',
    'Background color of inline hints'
))));
const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInlayHintForegroundTypes',
    'Foreground color of inline hints for types'
))));
const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInlayHintBackgroundTypes',
    'Background color of inline hints for types'
))));
const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInlayHintForegroundParameter',
    'Foreground color of inline hints for parameters'
))));
const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorInlayHintBackgroundParameter',
    'Background color of inline hints for parameters'
))));
const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorLightBulbForeground',
    "The color used for the lightbulb actions icon."
))));
registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorLightBulbAutoFixForeground',
    "The color used for the lightbulb auto fix actions icon."
))));
registerColor('editorLightBulbAi.foreground', { dark: editorLightBulbForeground, light: editorLightBulbForeground, hcDark: editorLightBulbForeground, hcLight: editorLightBulbForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'editorLightBulbAiForeground',
    "The color used for the lightbulb AI icon."
))));
const defaultInsertColor = ( (new Color( (new RGBA(155, 185, 85, .2)))));
const defaultRemoveColor = ( (new Color( (new RGBA(255, 0, 0, .2)))));
const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorInserted',
    'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorRemoved',
    'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorInsertedLines',
    'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorRemovedLines',
    'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'
))), true);
registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorInsertedLineGutter',
    'Background color for the margin where lines got inserted.'
))));
registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorRemovedLineGutter',
    'Background color for the margin where lines got removed.'
))));
const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorOverviewInserted',
    'Diff overview ruler foreground for inserted content.'
))));
const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorOverviewRemoved',
    'Diff overview ruler foreground for removed content.'
))));
registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorInsertedOutline',
    'Outline color for the text that got inserted.'
))));
registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorRemovedOutline',
    'Outline color for text that got removed.'
))));
registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditorBorder',
    'Border color between the two text editors.'
))));
const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffDiagonalFill',
    "Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views."
))));
registerColor('diffEditor.unchangedRegionBackground', { dark: 'sideBar.background', light: 'sideBar.background', hcDark: 'sideBar.background', hcLight: 'sideBar.background' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditor.unchangedRegionBackground',
    "The background color of unchanged blocks in the diff editor."
))));
registerColor('diffEditor.unchangedRegionForeground', { dark: 'foreground', light: 'foreground', hcDark: 'foreground', hcLight: 'foreground' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditor.unchangedRegionForeground',
    "The foreground color of unchanged blocks in the diff editor."
))));
registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'diffEditor.unchangedCodeBackground',
    "The background color of unchanged code in the diff editor."
))));
const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFocusBackground',
    "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."
))));
const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFocusForeground',
    "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."
))));
const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFocusOutline',
    "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."
))));
const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFocusAndSelectionOutline',
    "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not."
))));
const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: ( (( (Color.fromHex('#0F4A85'))).transparent(0.1))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listActiveSelectionBackground',
    "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."
))));
const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listActiveSelectionForeground',
    "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."
))));
const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listActiveSelectionIconForeground',
    "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."
))));
const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: ( (( (Color.fromHex('#0F4A85'))).transparent(0.1))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listInactiveSelectionBackground',
    "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."
))));
const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listInactiveSelectionForeground',
    "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."
))));
const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listInactiveSelectionIconForeground',
    "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."
))));
const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listInactiveFocusBackground',
    "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."
))));
const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listInactiveFocusOutline',
    "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."
))));
const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: ( (Color.white.transparent(0.1))), hcLight: ( (( (Color.fromHex('#0F4A85'))).transparent(0.1))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listHoverBackground',
    "List/Tree background when hovering over items using the mouse."
))));
const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listHoverForeground',
    "List/Tree foreground when hovering over items using the mouse."
))));
const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listDropBackground',
    "List/Tree drag and drop background when moving items over other items when using the mouse."
))));
const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listDropBetweenBackground',
    "List/Tree drag and drop border color when moving items between items when using the mouse."
))));
const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'highlight',
    'List/Tree foreground color of the match highlights when searching inside the list/tree.'
))));
const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFocusHighlightForeground',
    'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'
))));
const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'invalidItemForeground',
    'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'
))));
const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listErrorForeground',
    'Foreground color of list items containing errors.'
))));
const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listWarningForeground',
    'Foreground color of list items containing warnings.'
))));
const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: ( (darken(editorWidgetBackground, 0))), dark: ( (lighten(editorWidgetBackground, 0))), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFilterWidgetBackground',
    'Background color of the type filter widget in lists and trees.'
))));
const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFilterWidgetOutline',
    'Outline color of the type filter widget in lists and trees.'
))));
const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFilterWidgetNoMatchesOutline',
    'Outline color of the type filter widget in lists and trees, when there are no matches.'
))));
const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFilterWidgetShadow',
    'Shadow color of the type filter widget in lists and trees.'
))));
registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFilterMatchHighlight',
    'Background color of the filtered match.'
))));
registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listFilterMatchHighlightBorder',
    'Border color of the filtered match.'
))));
const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'treeIndentGuidesStroke',
    "Tree stroke color for the indentation guides."
))));
const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', { dark: ( (transparent(treeIndentGuidesStroke, 0.4))), light: ( (transparent(treeIndentGuidesStroke, 0.4))), hcDark: ( (transparent(treeIndentGuidesStroke, 0.4))), hcLight: ( (transparent(treeIndentGuidesStroke, 0.4))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'treeInactiveIndentGuidesStroke',
    "Tree stroke color for the indentation guides that are not active."
))));
const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'tableColumnsBorder',
    "Table border color between columns."
))));
const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: ( (transparent(foreground, 0.04))), light: ( (transparent(foreground, 0.04))), hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'tableOddRowsBackgroundColor',
    "Background color for odd table rows."
))));
const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'listDeemphasizedForeground',
    "List/Tree foreground color for items that are deemphasized. "
))));
const checkboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'checkbox.background',
    "Background color of checkbox widget."
))));
registerColor('checkbox.selectBackground', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'checkbox.select.background',
    "Background color of checkbox widget when the element it's in is selected."
))));
const checkboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'checkbox.foreground',
    "Foreground color of checkbox widget."
))));
const checkboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'checkbox.border',
    "Border color of checkbox widget."
))));
registerColor('checkbox.selectBorder', { dark: iconForeground, light: iconForeground, hcDark: iconForeground, hcLight: iconForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'checkbox.select.border',
    "Border color of checkbox widget when the element it's in is selected."
))));
const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, '', undefined, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'quickInput.list.focusBackground deprecation',
    "Please use quickInputList.focusBackground instead"
))));
const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'quickInput.listFocusForeground',
    "Quick picker foreground color for the focused item."
))));
const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hcDark: listActiveSelectionIconForeground, hcLight: listActiveSelectionIconForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'quickInput.listFocusIconForeground',
    "Quick picker icon foreground color for the focused item."
))));
const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'quickInput.listFocusBackground',
    "Quick picker background color for the focused item."
))));
const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuBorder',
    "Border color of menus."
))));
const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuForeground',
    "Foreground color of menu items."
))));
const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuBackground',
    "Background color of menu items."
))));
const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuSelectionForeground',
    "Foreground color of the selected menu item in menus."
))));
const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hcDark: listActiveSelectionBackground, hcLight: listActiveSelectionBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuSelectionBackground',
    "Background color of the selected menu item in menus."
))));
const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuSelectionBorder',
    "Border color of the selected menu item in menus."
))));
const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'menuSeparatorBackground',
    "Color of a separator menu item in menus."
))));
const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'toolbarHoverBackground',
    "Toolbar background when hovering over actions using the mouse"
))));
registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'toolbarHoverOutline',
    "Toolbar outline when hovering over actions using the mouse"
))));
registerColor('toolbar.activeBackground', { dark: ( (lighten(toolbarHoverBackground, 0.1))), light: ( (darken(toolbarHoverBackground, 0.1))), hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'toolbarActiveBackground',
    "Toolbar background when holding the mouse over actions"
))));
registerColor('editor.snippetTabstopHighlightBackground', { dark: ( (new Color( (new RGBA(124, 124, 124, 0.3))))), light: ( (new Color( (new RGBA(10, 50, 100, 0.2))))), hcDark: ( (new Color( (new RGBA(124, 124, 124, 0.3))))), hcLight: ( (new Color( (new RGBA(10, 50, 100, 0.2))))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'snippetTabstopHighlightBackground',
    "Highlight background color of a snippet tabstop."
))));
registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'snippetTabstopHighlightBorder',
    "Highlight border color of a snippet tabstop."
))));
registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'snippetFinalTabstopHighlightBackground',
    "Highlight background color of the final tabstop of a snippet."
))));
registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: ( (new Color( (new RGBA(10, 50, 100, 0.5))))), hcDark: '#525252', hcLight: '#292929' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'snippetFinalTabstopHighlightBorder',
    "Highlight border color of the final tabstop of a snippet."
))));
const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: ( (transparent(foreground, 0.8))), dark: ( (transparent(foreground, 0.8))), hcDark: ( (transparent(foreground, 0.8))), hcLight: ( (transparent(foreground, 0.8))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'breadcrumbsFocusForeground',
    "Color of focused breadcrumb items."
))));
const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'breadcrumbsBackground',
    "Background color of breadcrumb items."
))));
const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: ( (darken(foreground, 0.2))), dark: ( (lighten(foreground, 0.1))), hcDark: ( (lighten(foreground, 0.1))), hcLight: ( (lighten(foreground, 0.1))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'breadcrumbsFocusForeground',
    "Color of focused breadcrumb items."
))));
const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: ( (darken(foreground, 0.2))), dark: ( (lighten(foreground, 0.1))), hcDark: ( (lighten(foreground, 0.1))), hcLight: ( (lighten(foreground, 0.1))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'breadcrumbsSelectedForeground',
    "Color of selected breadcrumb items."
))));
const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'breadcrumbsSelectedBackground',
    "Background color of breadcrumb item picker."
))));
const headerTransparency = 0.5;
const currentBaseColor = ( (( (Color.fromHex('#40C8AE'))).transparent(headerTransparency)));
const incomingBaseColor = ( (( (Color.fromHex('#40A6FF'))).transparent(headerTransparency)));
const commonBaseColor = ( (( (Color.fromHex('#606060'))).transparent(0.4)));
const contentTransparency = 0.4;
const rulerTransparency = 1;
const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeCurrentHeaderBackground',
    'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'
))), true);
registerColor('merge.currentContentBackground', { dark: ( (transparent(mergeCurrentHeaderBackground, contentTransparency))), light: ( (transparent(mergeCurrentHeaderBackground, contentTransparency))), hcDark: ( (transparent(mergeCurrentHeaderBackground, contentTransparency))), hcLight: ( (transparent(mergeCurrentHeaderBackground, contentTransparency))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeCurrentContentBackground',
    'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeIncomingHeaderBackground',
    'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'
))), true);
registerColor('merge.incomingContentBackground', { dark: ( (transparent(mergeIncomingHeaderBackground, contentTransparency))), light: ( (transparent(mergeIncomingHeaderBackground, contentTransparency))), hcDark: ( (transparent(mergeIncomingHeaderBackground, contentTransparency))), hcLight: ( (transparent(mergeIncomingHeaderBackground, contentTransparency))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeIncomingContentBackground',
    'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeCommonHeaderBackground',
    'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'
))), true);
registerColor('merge.commonContentBackground', { dark: ( (transparent(mergeCommonHeaderBackground, contentTransparency))), light: ( (transparent(mergeCommonHeaderBackground, contentTransparency))), hcDark: ( (transparent(mergeCommonHeaderBackground, contentTransparency))), hcLight: ( (transparent(mergeCommonHeaderBackground, contentTransparency))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeCommonContentBackground',
    'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'mergeBorder',
    'Border color on headers and the splitter in inline merge-conflicts.'
))));
registerColor('editorOverviewRuler.currentContentForeground', { dark: ( (transparent(mergeCurrentHeaderBackground, rulerTransparency))), light: ( (transparent(mergeCurrentHeaderBackground, rulerTransparency))), hcDark: mergeBorder, hcLight: mergeBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'overviewRulerCurrentContentForeground',
    'Current overview ruler foreground for inline merge-conflicts.'
))));
registerColor('editorOverviewRuler.incomingContentForeground', { dark: ( (transparent(mergeIncomingHeaderBackground, rulerTransparency))), light: ( (transparent(mergeIncomingHeaderBackground, rulerTransparency))), hcDark: mergeBorder, hcLight: mergeBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'overviewRulerIncomingContentForeground',
    'Incoming overview ruler foreground for inline merge-conflicts.'
))));
registerColor('editorOverviewRuler.commonContentForeground', { dark: ( (transparent(mergeCommonHeaderBackground, rulerTransparency))), light: ( (transparent(mergeCommonHeaderBackground, rulerTransparency))), hcDark: mergeBorder, hcLight: mergeBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'overviewRulerCommonContentForeground',
    'Common ancestor overview ruler foreground for inline merge-conflicts.'
))));
const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'overviewRulerFindMatchForeground',
    'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'overviewRulerSelectionHighlightForeground',
    'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'
))), true);
const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapFindMatchHighlight',
    'Minimap marker color for find matches.'
))), true);
const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapSelectionOccurrenceHighlight',
    'Minimap marker color for repeating editor selections.'
))), true);
const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapSelectionHighlight',
    'Minimap marker color for the editor selection.'
))), true);
const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapInfo',
    'Minimap marker color for infos.'
))));
const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'overviewRuleWarning',
    'Minimap marker color for warnings.'
))));
const minimapError = registerColor('minimap.errorHighlight', { dark: ( (new Color( (new RGBA(255, 18, 18, 0.7))))), light: ( (new Color( (new RGBA(255, 18, 18, 0.7))))), hcDark: ( (new Color( (new RGBA(255, 50, 50, 1))))), hcLight: '#B5200D' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapError',
    'Minimap marker color for errors.'
))));
const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hcDark: null, hcLight: null }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapBackground',
    "Minimap background color."
))));
const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: ( (Color.fromHex('#000f'))), light: ( (Color.fromHex('#000f'))), hcDark: ( (Color.fromHex('#000f'))), hcLight: ( (Color.fromHex('#000f'))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapForegroundOpacity',
    'Opacity of foreground elements rendered in the minimap. For example, "#000000c0" will render the elements with 75% opacity.'
))));
registerColor('minimapSlider.background', { light: ( (transparent(scrollbarSliderBackground, 0.5))), dark: ( (transparent(scrollbarSliderBackground, 0.5))), hcDark: ( (transparent(scrollbarSliderBackground, 0.5))), hcLight: ( (transparent(scrollbarSliderBackground, 0.5))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapSliderBackground',
    "Minimap slider background color."
))));
registerColor('minimapSlider.hoverBackground', { light: ( (transparent(scrollbarSliderHoverBackground, 0.5))), dark: ( (transparent(scrollbarSliderHoverBackground, 0.5))), hcDark: ( (transparent(scrollbarSliderHoverBackground, 0.5))), hcLight: ( (transparent(scrollbarSliderHoverBackground, 0.5))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapSliderHoverBackground',
    "Minimap slider background color when hovering."
))));
registerColor('minimapSlider.activeBackground', { light: ( (transparent(scrollbarSliderActiveBackground, 0.5))), dark: ( (transparent(scrollbarSliderActiveBackground, 0.5))), hcDark: ( (transparent(scrollbarSliderActiveBackground, 0.5))), hcLight: ( (transparent(scrollbarSliderActiveBackground, 0.5))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'minimapSliderActiveBackground',
    "Minimap slider background color when clicked on."
))));
const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'problemsErrorIconForeground',
    "The color used for the problems error icon."
))));
const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'problemsWarningIconForeground',
    "The color used for the problems warning icon."
))));
const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'problemsInfoIconForeground',
    "The color used for the problems info icon."
))));
registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsForeground',
    "The foreground color used in charts."
))));
registerColor('charts.lines', { dark: ( (transparent(foreground, .5))), light: ( (transparent(foreground, .5))), hcDark: ( (transparent(foreground, .5))), hcLight: ( (transparent(foreground, .5))) }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsLines',
    "The color used for horizontal lines in charts."
))));
const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsRed',
    "The red color used in chart visualizations."
))));
registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsBlue',
    "The blue color used in chart visualizations."
))));
const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsYellow',
    "The yellow color used in chart visualizations."
))));
registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsOrange',
    "The orange color used in chart visualizations."
))));
const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsGreen',
    "The green color used in chart visualizations."
))));
registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, ( (localizeWithPath(
    'vs/platform/theme/common/colorRegistry',
    'chartsPurple',
    "The purple color used in chart visualizations."
))));
function executeTransform(transform, theme) {
    switch (transform.op) {
        case 0 :
            return resolveColorValue(transform.value, theme)?.darken(transform.factor);
        case 1 :
            return resolveColorValue(transform.value, theme)?.lighten(transform.factor);
        case 2 :
            return resolveColorValue(transform.value, theme)?.transparent(transform.factor);
        case 3 : {
            const backgroundColor = resolveColorValue(transform.background, theme);
            if (!backgroundColor) {
                return resolveColorValue(transform.value, theme);
            }
            return resolveColorValue(transform.value, theme)?.makeOpaque(backgroundColor);
        }
        case 4 :
            for (const candidate of transform.values) {
                const color = resolveColorValue(candidate, theme);
                if (color) {
                    return color;
                }
            }
            return undefined;
        case 6 :
            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);
        case 5 : {
            const from = resolveColorValue(transform.value, theme);
            if (!from) {
                return undefined;
            }
            const backgroundColor = resolveColorValue(transform.background, theme);
            if (!backgroundColor) {
                return (
                     (from.transparent(transform.factor * transform.transparency))
                );
            }
            return from.isDarkerThan(backgroundColor)
                ? ( (Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)))
                : ( (Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency)));
        }
        default:
            throw assertNever();
    }
}
function darken(colorValue, factor) {
    return { op: 0 , value: colorValue, factor };
}
function lighten(colorValue, factor) {
    return { op: 1 , value: colorValue, factor };
}
function transparent(colorValue, factor) {
    return { op: 2 , value: colorValue, factor };
}
function opaque(colorValue, background) {
    return { op: 3 , value: colorValue, background };
}
function oneOf(...colorValues) {
    return { op: 4 , values: colorValues };
}
function ifDefinedThenElse(ifArg, thenArg, elseArg) {
    return { op: 6 , if: ifArg, then: thenArg, else: elseArg };
}
function lessProminent(colorValue, backgroundColorValue, factor, transparency) {
    return { op: 5 , value: colorValue, background: backgroundColorValue, factor, transparency };
}
function resolveColorValue(colorValue, theme) {
    if (colorValue === null) {
        return undefined;
    }
    else if (typeof colorValue === 'string') {
        if (colorValue[0] === '#') {
            return (
                 (Color.fromHex(colorValue))
            );
        }
        return theme.getColor(colorValue);
    }
    else if (colorValue instanceof Color) {
        return colorValue;
    }
    else if (typeof colorValue === 'object') {
        return executeTransform(colorValue, theme);
    }
    return undefined;
}
const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';
const schemaRegistry = ( Registry.as(Extensions$1.JSONContribution));
schemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());
const delayer = ( (new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200)));
colorRegistry.onDidChangeSchema(() => {
    if (!delayer.isScheduled()) {
        delayer.schedule();
    }
});
export { Extensions, _deprecatedQuickInputListFocusBackground, activeContrastBorder, asCssVariable, asCssVariableName, asCssVariableWithDefault, badgeBackground, badgeForeground, breadcrumbsActiveSelectionForeground, breadcrumbsBackground, breadcrumbsFocusForeground, breadcrumbsForeground, breadcrumbsPickerBackground, buttonBackground, buttonBorder, buttonForeground, buttonHoverBackground, buttonSecondaryBackground, buttonSecondaryForeground, buttonSecondaryHoverBackground, buttonSeparator, chartsGreen, chartsRed, chartsYellow, checkboxBackground, checkboxBorder, checkboxForeground, contrastBorder, darken, defaultInsertColor, defaultRemoveColor, diffDiagonalFill, diffInserted, diffInsertedLine, diffOverviewRulerInserted, diffOverviewRulerRemoved, diffRemoved, diffRemovedLine, disabledForeground, editorActiveLinkForeground, editorBackground, editorErrorBorder, editorErrorForeground, editorFindMatch, editorFindMatchHighlight, editorFindMatchHighlightBorder, editorFindRangeHighlight, editorFindRangeHighlightBorder, editorForeground, editorHintForeground, editorHoverBackground, editorHoverBorder, editorHoverForeground, editorHoverHighlight, editorInactiveSelection, editorInfoBorder, editorInfoForeground, editorInlayHintBackground, editorInlayHintForeground, editorInlayHintParameterBackground, editorInlayHintParameterForeground, editorInlayHintTypeBackground, editorInlayHintTypeForeground, editorLightBulbForeground, editorSelectionBackground, editorSelectionForeground, editorSelectionHighlight, editorWarningBackground, editorWarningBorder, editorWarningForeground, editorWidgetBackground, editorWidgetBorder, editorWidgetForeground, errorForeground, executeTransform, focusBorder, foreground, getColorRegistry, iconForeground, ifDefinedThenElse, inputActiveOptionBackground, inputActiveOptionBorder, inputActiveOptionForeground, inputBackground, inputBorder, inputForeground, inputPlaceholderForeground, inputValidationErrorBackground, inputValidationErrorBorder, inputValidationErrorForeground, inputValidationInfoBackground, inputValidationInfoBorder, inputValidationInfoForeground, inputValidationWarningBackground, inputValidationWarningBorder, inputValidationWarningForeground, keybindingLabelBackground, keybindingLabelBorder, keybindingLabelBottomBorder, keybindingLabelForeground, lighten, listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground, listDeemphasizedForeground, listDropBetweenBackground, listDropOverBackground, listErrorForeground, listFilterWidgetBackground, listFilterWidgetNoMatchesOutline, listFilterWidgetOutline, listFilterWidgetShadow, listFocusAndSelectionOutline, listFocusBackground, listFocusForeground, listFocusHighlightForeground, listFocusOutline, listHighlightForeground, listHoverBackground, listHoverForeground, listInactiveFocusBackground, listInactiveFocusOutline, listInactiveSelectionBackground, listInactiveSelectionForeground, listInactiveSelectionIconForeground, listInvalidItemForeground, listWarningForeground, menuBackground, menuBorder, menuForeground, menuSelectionBackground, menuSelectionBorder, menuSelectionForeground, menuSeparatorBackground, mergeBorder, mergeCommonHeaderBackground, mergeCurrentHeaderBackground, mergeIncomingHeaderBackground, minimapBackground, minimapError, minimapFindMatch, minimapForegroundOpacity, minimapInfo, minimapSelection, minimapSelectionOccurrenceHighlight, minimapWarning, oneOf, opaque, overviewRulerFindMatchForeground, overviewRulerSelectionHighlightForeground, pickerGroupBorder, pickerGroupForeground, problemsErrorIconForeground, problemsInfoIconForeground, problemsWarningIconForeground, progressBarBackground, quickInputBackground, quickInputForeground, quickInputListFocusBackground, quickInputListFocusForeground, quickInputListFocusIconForeground, quickInputTitleBackground, registerColor, resolveColorValue, scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground, selectBackground, selectBorder, selectForeground, selectListBackground, selectionBackground, tableColumnsBorder, tableOddRowsBackgroundColor, textBlockQuoteBackground, textBlockQuoteBorder, textLinkActiveForeground, textLinkForeground, textPreformatForeground, toolbarHoverBackground, transparent, treeInactiveIndentGuidesStroke, treeIndentGuidesStroke, widgetBorder, widgetShadow, workbenchColorsSchemaId };
