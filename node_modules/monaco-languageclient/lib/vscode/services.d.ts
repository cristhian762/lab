import * as monaco from 'monaco-editor';
import 'vscode/localExtensionHost';
import { IWorkbenchConstructionOptions } from 'vscode/services';
export interface MonacoEnvironmentEnhanced extends monaco.Environment {
    vscodeInitialising?: boolean;
    vscodeApiInitialised?: boolean;
}
export type InitializeServiceConfig = {
    userServices?: monaco.editor.IEditorOverrideServices;
    enableExtHostWorker?: boolean;
    debugLogging?: boolean;
    workspaceConfig?: IWorkbenchConstructionOptions;
};
export declare const initEnhancedMonacoEnvironment: () => MonacoEnvironmentEnhanced;
export declare const supplyRequiredServices: () => Promise<{
    [x: string]: any;
}>;
export declare const reportServiceLoading: (services: monaco.editor.IEditorOverrideServices, debugLogging: boolean) => void;
export declare const mergeServices: (services: monaco.editor.IEditorOverrideServices, overrideServices: monaco.editor.IEditorOverrideServices) => void;
export declare const initServices: (config?: InitializeServiceConfig, caller?: string, performChecks?: () => boolean) => Promise<void>;
/**
 * monaco-vscode-api automatically loads the following services:
 *  - layout
 *  - environment
 *  - extension
 *  - files
 *  - quickAccess
 * monaco-languageclient always adds the following services:
 *   - languages
 *   - model
 */
export declare const importAllServices: (config?: InitializeServiceConfig, performChecks?: () => boolean) => Promise<void>;
/**
 * Enable ext host to run in a worker
 */
export declare const configureExtHostWorker: (enableExtHostWorker: boolean, userServices: monaco.editor.IEditorOverrideServices) => Promise<void>;
//# sourceMappingURL=services.d.ts.map